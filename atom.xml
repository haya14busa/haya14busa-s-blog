<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[haya14busa]]></title>
  <link href="http://haya14busa.com/atom.xml" rel="self"/>
  <link href="http://haya14busa.com/"/>
  <updated>2017-12-14T21:38:37+09:00</updated>
  <id>http://haya14busa.com/</id>
  <author>
    <name><![CDATA[haya14busa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[コードのエッジへ移動しろ！ vim-edgemotion 作った]]></title>
    <link href="http://haya14busa.com/vim-edgemotion/"/>
    <updated>2017-12-14T20:24:11+09:00</updated>
    <id>http://haya14busa.com/vim-edgemotion</id>
    <content type="html"><![CDATA[<p>この記事は <a href="https://qiita.com/advent-calendar/2017/vim2">Vim2 Advent Calendar 2017</a> 14日目の記事です。</p>

<h2>vim-edgemotion つくった</h2>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/4f66e3a746b4537397116e60979cc6e09348eb12/vim-edgemotion/vim-edgemotion%202017-11-04%2016-18.gif" alt="vim-edgemotion-demo" /></p>

<p><a href="http://vimconf.vim-jp.org/2017/">VimConf 2017</a> の <a href="https://qiita.com/t9md/items/236d09fea9bcdfabdcea">t9md
さんの発表</a> で紹介されていた、
Atom vim-mode-plus の機能の一つ, Edge motion を Vim に移植しました。</p>

<p><a href="https://github.com/haya14busa/vim-edgemotion">https://github.com/haya14busa/vim-edgemotion</a></p>

<h2>Edge Motion とは?</h2>

<p>Edge Motion は上下方向へのカーソル移動を拡張するモーションで、&#8221;コードブロック&#8221;のエッジ(端)へカーソルを移動させることができます。
ブロック内にいればそのブロックの端へ、すでにブロック端にいたりブロック外で実行すると次にぶつかるブロックの端までカーソルを移動します。</p>

<p>VimConf2017 でのデモ(本記事の冒頭のgif) でも直感的・視覚的に移動できてよさそう感は
伝わると思うのですが、個人的に便利だなぁと思うのはキチンとインデントされているコードであれば、
関数やifブロックを効率的に、しかも言語を問わずに移動できるところです。</p>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/266c266ef7d2a3d9fa6cc026e2ac10c3e65136da/vim-edgemotion/vim-edgemotion-indent.gif" alt="edgemotion indent demo" /></p>

<p>GIF では Vim script の if-elseif-else 間の移動や、function-endfunction 間の移動を行っていますが、
CでもGoでもPythonでもHaskell でも、様々な言語でこのインデントベースで次のエッジに飛ぶという
カーソル移動は効果を発揮するかと思います。</p>

<h2>vim-edgemotionにおけるコードブロックってなに?</h2>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/266c266ef7d2a3d9fa6cc026e2ac10c3e65136da/vim-edgemotion/vim-edgemotion-visualize.gif" alt="edgemotion visualize" /></p>

<p>GIF にあるように、以下の正規表現でコードのブロックをヴィジュアライズすることができます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>" Code block regex: [^[:space:]][[:space:]]\ze[^[:space:]]\|[^[:space:]]
</span><span class='line'>" :let @/ = '[^[:space:]][[:space:]]\ze[^[:space:]]\|[^[:space:]]' | set hls</span></code></pre></td></tr></table></div></figure>


<p>要するに空白文字でないか、または非空白文字に挟まれている空白文字をコードブロックと見なしています。
これは例えば <code>:let @/ =</code> の空白がブロックとみなされないと、カーソルが思っても見ないところで止まったり、
予想以上のところまで移動してしまうことを防ぐためで、Atom vim-mode-plus の仕様にあわせています。</p>

<p>最初はそのヒューリスティックでいいのかな&hellip;という気持ちはありましたが、他にいい判定方法も思いつかなかったし仕方ない。
Edge Motion は説明なしに直感的・視覚的に使えると見せかけて仕様を理解しないと
驚いてしまうかもしれないというのがデザインの難しいところですね&hellip;</p>

<h2>使い方サンプル</h2>

<p>お好みのキーにマッピングしてください。僕は <code>&lt;C-j&gt;</code>/<code>&lt;C-k&gt;</code>にマッピングしてみた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map &lt;C-j&gt; &lt;Plug&gt;(edgemotion-j)
</span><span class='line'>map &lt;C-k&gt; &lt;Plug&gt;(edgemotion-k)</span></code></pre></td></tr></table></div></figure>


<p><code>&lt;Plug&gt;(edgemotion-j)</code> で下方向、<code>&lt;Plug&gt;(edgemotion-k)</code> で上方向にカーソルを移動します。</p>

<h3>宣伝</h3>

<p><a href="https://github.com/haya14busa/vim-edgemotion">vim-edgemotion</a> は
今年僕も発表した <a href="http://vimconf.vim-jp.org/2017/">VimConf 2017</a> の
<a href="https://qiita.com/t9md/items/236d09fea9bcdfabdcea">t9md さんの発表</a> から
インスパイア&hellip; というかまるまるパクってVim plugin にポートしてできたプラグインです。</p>

<p>VimConf はエディタの垣根を超えるカンファレンスで奇しくも昨日の
Vim2 Advent Calendar 2017 13日目の記事(
<a href="https://qiita.com/maxmellon/items/2edc7bebe5a7762b22e1">vim-shiny という plugin を作った</a>)
も VimConf2017 で発表された vim-mode-plus にインスパイアされてプラグインを作っています。</p>

<h3>宣伝2</h3>

<p>また vim-edgemotion はもともと VimConf2017 開催中に30minくらいで作ったのですが、
あとで t9md さんに見てもらうとどうやら実装が違ったらしく、「その仕様はいいかもしれないけど
それならedgemotion と名乗るな」とt9mdさんに怒られました(笑)。</p>

<p>結局自分でもオリジナルの仕様が良さそうということで今の仕様にその後変更しました。
この変更はつい<small>[要出典]</small> 先日 <a href="http://www.dozenryokan.com/">土善旅館</a> というにて開催された進捗合宿で
ダメになるソファーでダメになりながら、ネコとペアプロすることで実装されました。</p>

<p>その様子です。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">やっていくぞ〜💪🏻🐦 <a href="https://t.co/jVQ8AEJ07l">pic.twitter.com/jVQ8AEJ07l</a></p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/933561197382721538?ref_src=twsrc%5Etfw">November 23, 2017</a></blockquote>




<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">ねこちゃんとペアプロ <a href="https://t.co/ZAZWGLJoMI">pic.twitter.com/ZAZWGLJoMI</a></p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/933951181658890240?ref_src=twsrc%5Etfw">November 24, 2017</a></blockquote>




<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">セパレートキーボードでねこにゃんとペアプロうらやましい…😺✨ <a href="https://t.co/oTpyb6oGi9">pic.twitter.com/oTpyb6oGi9</a></p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/934425547567804416?ref_src=twsrc%5Etfw">November 25, 2017</a></blockquote>




<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">進捗の鬼です <a href="https://t.co/VaE0taLxAD">pic.twitter.com/VaE0taLxAD</a></p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/933563374184538112?ref_src=twsrc%5Etfw">November 23, 2017</a></blockquote>




<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">進捗の鬼（浴衣 ver） <a href="https://t.co/ak4XXbhFi0">pic.twitter.com/ak4XXbhFi0</a></p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/933842740588175360?ref_src=twsrc%5Etfw">November 23, 2017</a></blockquote>




<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">進捗の鬼（毛布ぬくぬくver） <a href="https://t.co/v8s6FbhxCJ">pic.twitter.com/v8s6FbhxCJ</a></p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/933933166968037377?ref_src=twsrc%5Etfw">November 24, 2017</a></blockquote>


<h3>Vim進捗週末旅行@土善旅館についてあわせて読みたい</h3>

<ul>
<li><a href="http://aomoriringo.hateblo.jp/entry/2017/11/26/225323">中年週末旅行 - チューリング不完全</a></li>
<li><a href="https://darui.io/saikou-no-natsu/">土善旅館で最高の開発合宿をしような - だるい</a></li>
<li><a href="http://rbtnn.hateblo.jp/entry/2017/11/27/011156">TabSideBarの進捗旅 at 土善旅館 - rbtnn雑記</a></li>
<li><a href="http://rhysd.hatenablog.com/entry/2017/11/27/091003">Vim 進捗旅行 - はやくプログラムになりたい</a></li>
</ul>


<h2>おわりに</h2>

<ul>
<li>Edge Motion は直感的・視覚的にカーソルの上下移動ができてなかなか可能性を感じるので使ってみてね</li>
<li>VimConf は来年の VimConf2018 もオススメ</li>
<li><a href="http://www.dozenryokan.com/">土善旅館</a> はネコにゃんとペアプロして積んでたタスクを崩せるので便利</li>
</ul>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go に恋した Vimmer の2016年の振り返り]]></title>
    <link href="http://haya14busa.com/2016-is-go-year/"/>
    <updated>2016-12-29T17:47:59+09:00</updated>
    <id>http://haya14busa.com/2016-is-go-year</id>
    <content type="html"><![CDATA[<p>この記事では2016年 <a href="https://twitter.com/haya14busa">@haya14busa</a> がやってきた活動，特にVimとかGo 活動をざっくり振り返ります．
個人的な備忘録です．あとポエム．</p>

<h3>過去の振り返り記事</h3>

<ul>
<li><a href="http://haya14busa.com/vim_driven_learning/">1年間『Vim駆動学習』してきて最高に楽しかったのでオススメしたい - haya14busa</a></li>
<li><a href="http://haya14busa.com/haya14busa-s-happy-vimming-year-2014/">2014年の振り返り. またはプログラミング2年目をVimに捧げるとこうなるという話 - haya14busa</a></li>
<li><a href="http://haya14busa.com/look-back-2015/">はてな，Googleインターン行ってイカやりすぎたイカVimmerの2015年の振り返り - haya14busa</a></li>
</ul>


<p>今年はざっくりプログラミング &amp; Vimmer 歴 4年目でした．
そろそろプログラミングの基礎的なところわかってなくても，まだはじめてそんな経ってなくてまだ勉強できてないんです〜，また今度やっておきますっ!
みたいな言い訳が完全に通用しない年になってきた気がします (そもそも実際に言ったことは無い)．
まだまだ学んでおきたい分野はたくさんあって，特にもうちょっとレイヤーが下の要素もやっていって理解しておきたさがありますね&hellip;</p>

<h2>&ldquo;Go&rdquo; に恋した 2016年</h2>

<p>AlphaGo, Pokemon GO, Amazon Go&hellip; &ldquo;Go&rdquo; は2016年の1つのキーワードだったように思いますが，個人的には Go 言語の &ldquo;Go&rdquo; に恋した1年でした．</p>

<p><img src="../images/post/2016-12-26-gopher-stickers-lovely.png" alt="" /></p>

<p><small>credit: <a href="https://github.com/tenntenn/gopher-stickers">Gopher by tenntenn CC BY 3.0</a></small></p>

<h3>Go との出会い</h3>

<p>Go 言語との出会いは去年インターンでGoをはじめて使ったときでした．</p>

<p>その時一目惚れ&hellip; をしたわけではありません．</p>

<p>シンプルでとにかくプロジェクトで動くものは作れる感じだったので，なんとなくGoよさそうかなぁとは感じつつも，
ちょっと気になっている子(Scala) との大きな違いに戸惑ってたりしてました．
&ldquo;Functional Programming&rdquo;? なにそれおいしいの? とでも聞こえてきそうな Go の雰囲気に，
僕は一歩足を引いて評価を保留してました．
ただ，さも vim で書くために生まれてきた言語では&hellip;? というほどの <code>gofmt</code>
といった周辺のツールの充実っぷりはこの頃から大好きで，言語というよりは周囲の
エコシステムがよさ&hellip;という印象でした．</p>

<p>また，Go と出会ったころと時を同じくして，僕はスプラトゥーンと出会ってました．
お家に帰って Go やってる場合ではなく，一日中イカする毎日．
イカの存在によって Go とはどこかビジネスライクな付き合いにとどまってました．イカはっょぃ．</p>

<h3>Go との別れ</h3>

<p>それから程なくして，インターンが終了しました．
Go をいちから学ぶところからはじめたにも関わらず，
終了時にある程度のものが出来たことを Go にも感謝しつつ，
一旦 Go との付き合いもお別れになりました．</p>

<p>結局，まぁなんかよさそうな言語だ程度の(ふんわり)印象でここで一旦お別れしたわけですが，
後々，このときのいい環境で Go を書いてレビューしてもらったり，
教えてもらったことはとても役に立ちました．
ありがたい．</p>

<h3>Go との再会</h3>

<p>2016年の春，忙しかった時期も一段落し，スプラトゥーンとの距離をうまく保てるようになった僕は
ちょっとした小さいツールを Go で書くことにしました．</p>

<p>理由としては，コマンドラインツールとか Go で書くのは便利そうだったことや，
来年以降もGo書くことになりそうかなぁという打算的な思考，
また同じ頃にはじめたアルバイト先のいくつかのサブシステムは Go で書かれていることもあり，
Go 書けるとそのへんも触れておもしろそうかなという気持ちがありました．</p>

<p>数カ月の Go とのお別れ期間でいろいろ忘れていることに戸惑いつつも，書いていくうちに勘も戻ってきました．
ちょっとした自分用ツールをいくつか Go で完成させて，簡単にサーバにもっていって動かすことができてよいなーと感じたり，
Google App Engine で雑に動かしたりして遊んでました．
アルバイト先でもちょっとずつ書いたりするようになって，Go と触れ合う時間は増えました．</p>

<h3>2016年秋，気づけば Go に恋に落ちてた</h3>

<p>それからも，定期的に Go で何か作ったりしてました．例えば，</p>

<ul>
<li><a href="https://github.com/haya14busa/goplay">haya14busa/goplay: The Go Playground (https://play.golang.org/) client</a>

<ul>
<li>コマンドラインから Go Playground で Go を実行したり，コードを Playground に共有するツール</li>
<li>習作という向きも強かったけど，いまでも Playground でコードを共有する際に使ったりしていて便利．</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/gopkgs">haya14busa/gopkgs: List Go packages FAST by using the same implementation as goimports</a>

<ul>
<li>goimports と同じ内部実装でGo のパッケージをリストするツール</li>
<li>goimports と同じ実装なので <code>.goimportsignore</code> も見てくれてたりなど速い．</li>
<li>peco/fzf/unite といったフィルタリングツールと組み合わせて，import したり godoc を開いたりなどして今も便利に使ってる．</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/goverage">haya14busa/goverage: go test -coverprofile for multiple packages</a>

<ul>
<li>マルチパッケージ対応版 go test -coverprofile</li>
<li>関連記事: <a href="http://haya14busa.com/ci-for-go-in-end-of-2016/">Go の CI で lint と カバレッジ回して非人間的なレビューは自動化しよう in 2016年 - haya14busa</a></li>
</ul>
</li>
<li>関連Post: <a href="https://medium.com/@haya14busa/golang-tips-you-might-not-know-1c90e6921a3#.4h65zgqzb">Golang tips you might not know – Medium</a></li>
</ul>


<p>この頃には Go がかなり手に馴染むようになってきました．上記に上げたツールも Go
の開発を助けるツールだということからも，Go をより書くようになってきてることがうかがえます．</p>

<p>特にきっかけはありませんでした．でもこの頃にはもう Go に恋してたんだと思います．
その結果，特に意味もなく Vim script のパーサを Go 言語で動かしたいなぁ&hellip;
既存の Python 実装とかあるけど，Go でいじりたいなぁ&hellip; と思って Go 実装を作ったりしてました．</p>

<h4>go-vimlparser - Vim Script Parser written in Go</h4>

<ul>
<li>GitHub: <a href="https://github.com/haya14busa/go-vimlparser">haya14busa/go-vimlparser: Vim Script Parser written in Go</a></li>
<li>Post: <a href="https://medium.com/@haya14busa/vim-script-parser-written-in-go-4d0296782a14#.rtaybepih">Vim Script Parser written in Go – Medium</a></li>
<li>VimConf でも発表しました: <a href="https://medium.com/@haya14busa/report-of-vimconf2016-an-international-conference-for-vim-f99925893322#.d8n121p9e">Report of #vimconf2016 — an international conference for Vim – Medium</a></li>
</ul>


<p>Just for fun ではじめましたが，結果として最速 Vim script parser 実装となって，Vimmer にも嬉しい便利なものになったと思います．
Go のパフォーマンスチューニングのやり方も改めて経験できて身についたし，
AST の表現や AST walker の実装をするために <a href="https://golang.org/pkg/go/ast/">go/ast</a>
のコードを読んでインターフェースをパク&hellip;参考にしたりとおもしろかった．
Go の標準ライブラリのデザインはとても参考になるし，それを Go 言語でザクザク読めるのは本当にいいなぁと思います．</p>

<h3>Go と Vim との共同作業</h3>

<p>この頃，Vim はJSONやchannel, job 機能が実装され，外部インターフェースとの通信が容易になり，もうすぐ Vim 8.0 出すよ〜という時期でした．
Go に恋した Vimmer としては，もちろんここで Go 言語を使って Vim との共同作業をさせたいというのは必然です!
(これでは Go と Vim がカップルになってるのではということは気にしない．でも実際2人の相性はとてもよい)</p>

<p>このあたりの話は Vim Advent Calendar で書きました．</p>

<ul>
<li><a href="http://haya14busa.com/vim-go-client/">Go で Vim プラグインを書く - haya14busa</a></li>
<li><a href="https://github.com/haya14busa/vim-go-client">haya14busa/vim-go-client: [WIP] Vim 8.0 client written in go</a></li>
<li><a href="https://github.com/haya14busa/vim-stacktrace">haya14busa/vim-stacktrace: Stacktrace of Vim script</a></li>
</ul>


<p>vim-go-client の通信のハンドリングのデザインは Go の <a href="https://golang.org/pkg/net/http/">net/http</a> のコードを読んで参考にしたりしました．
が，もうちょっといい感じにできそうな気がする&hellip;
実際に Go で vim-stacktrace という便利プラグインを作れることを確認できて，go-vimlparser も有効活用できたりなど，
Vim活にも Go が絡むようになってきてますます Go が好きになっていきました．</p>

<h3>Go と Vim との間に生まれた子供 - reviewdog</h3>

<p>(Go と Vim が結婚して子供を産みました．僕のGoへの恋は片想い)</p>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/d598ed7dc49fefb0018e422e4c43e5ab8f207a6b/reviewdog/reviewdog.logo.png" alt="reviewdog logo" /></p>

<ul>
<li><a href="https://github.com/haya14busa/reviewdog">haya14busa/reviewdog: A code review dog who keeps your codebase healthy</a></li>
<li><a href="https://github.com/haya14busa/errorformat">haya14busa/errorformat: Vim&rsquo;s quickfix errorformat implementation in Go</a></li>
<li><a href="http://haya14busa.com/reviewdog/">reviewdog を飼ってコードレビューや開発を改善しませんか - haya14busa</a></li>
<li><a href="https://medium.com/@haya14busa/reviewdog-a-code-review-dog-who-keeps-your-codebase-healthy-d957c471938b#.r3hb734et">reviewdog — A code review dog who keeps your codebase healthy</a></li>
</ul>


<p>reviewdog は僕の 2016年に作ったプロダクトの一番のヒット作と言えます．reviewdog の GitHub のスターは執筆時現在 268 です．
reviewdog が好きなのは，実際に超便利プロダクトだということはもちろん，Vim の &lsquo;errorformat&rsquo; という便利な機能を
Go言語で port して Vim の外でも使えるようにしたという，Vim と Go の&#8221;よさ&#8221; が存分に発揮されたプロダクトだというところがとても気に入っています．</p>

<p>reviewdog のようなものを作るには，いろんな linter などのコマンドの結果を扱わなくてはいけません．
他のツールでは， <a href="https://github.com/alecthomas/gometalinter">gometalinter</a> のように linter ごとに正規表現をアドホックに作ったり，
それぞれのコマンドの runner を作ったり， checkstyle xml やJSONのある機械的な形式を吐くlinterにのみ対応するといった割り切りをしています．</p>

<p>Vim はそういういろんなコマンドやいろんなアウトプット形式に対応するというのは得意で，
&lsquo;errorformat&rsquo; という scanf-like な機能がこれにあたり，この形式を使うことに決めました．</p>

<p>ただしこの&#8217;errorformat&#8217;は Vim でしか使えません．そこを同じくマルチプラットフォームで簡単に動く
Go 言語で同等の機能をポート(<a href="https://github.com/haya14busa/errorformat">haya14busa/errorformat</a>)し，
Vim のよさを Go がサポートしてより広く使ってもらえるようにできました．</p>

<p>reviewdog は現在もちょくちょく改善していて，特にローカルでもより動かしやすいようにしようと思ってます．
年内にある程度開発してバージョン1.0にしようかと思っていましたが，もう少しかかりそうです．</p>

<h4>reviewdog の状況</h4>

<ul>
<li><blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">reviewdogでエゴサしたらつい昨日リリースしたというのにすでに <a href="https://twitter.com/hashtag/lispmeetup?src=hash">#lispmeetup</a> というミートアップで lisp のlint ツールの発表で reviewdog 使ってくれているっぽいことを発見した&hellip;. べんりすぎる <a href="https://t.co/zYQeOVIGTX"><a href="https://t.co/zYQeOVIGTX">https://t.co/zYQeOVIGTX</a></a></p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/790888183844089857">October 25, 2016</a></blockquote>

<ul>
<li>スライド: <a href="http://www.slideshare.net/fukamachi/sblint">SBLint</a></li>
<li>リリースした直後に reviewdog に対応するための lint ツール作った発表とかを観測してビビった．</li>
</ul>
</li>
<li><a href="https://speakerdeck.com/fortkle/yasashii-sonogo">やさしいコーディング規約の導入〜その後〜 / yasashii-sonogo // Speaker Deck</a>

<ul>
<li>実際に使ってもらえてるっぽくてよさ</li>
</ul>
</li>
<li><a href="https://github.com/vim-jp/vital.vim/pull/458">CI: reviewdog 導入 by haya14busa · Pull Request #458 · vim-jp/vital.vim</a>

<ul>
<li>vital.vim という Vim script ライブラリのリポジトリに reviewdog 導入してもらった．</li>
</ul>
</li>
<li>reviewdog は僕がバリバリドックフーディングしているのはもちろんのこと，ちょっと使ってもらってる例はちらほら見かける．</li>
</ul>


<p>OSS で導入するのは CI サービスがうまく Secure Token を扱ってくれないせいで，
若干最初の導入が手間なのが使ってもらうには少し壁になってるのが悲しい．Travis〜CircleCI〜頼む〜改善してくれ〜．
一度導入してしまえばあとは楽だし，もしくはローカルでだけ使っても便利なのでもうちょっと使用事案増えて欲しい．</p>

<h3>Go 活動その他</h3>

<ul>
<li><a href="http://haya14busa.com/golang-how-to-write-mock-of-interface-for-testing/">Golangにおけるinterfaceをつかったテストで mock を書く技法 - haya14busa</a>

<ul>
<li>いい記事に感化されて僕も何か書きたくなった。事案</li>
</ul>
</li>
<li><a href="http://haya14busa.com/ci-for-go-in-end-of-2016/">Go の CI で lint と カバレッジ回して非人間的なレビューは自動化しよう in 2016年 - haya14busa</a>

<ul>
<li>Go の CI 周りの紹介</li>
</ul>
</li>
<li><a href="https://medium.com/@haya14busa/sum-union-variant-type-in-go-and-static-check-tool-of-switch-case-handling-3bfc61618b1e#.cp9eqobvo">Sum/Union/Variant Type in Go and Static Check Tool of switch-case handling – Medium</a>

<ul>
<li><a href="http://developer.hatenastaff.com/entry/engineer-advent-calendar-2016">はてなエンジニアアドベントカレンダー2016</a> の 6日目の記事</li>
<li>はてなの Mackerel チームでアルバイトしていて，仕事してて直和型っぽいことを表現したいときの知見がちょうどあったのでアドベントカレンダーに書かせていただきました．</li>
<li>linter はアドベントカレンダー書くなら知見共有だけよりはツールも欲しいなと書きました．<code>go/types</code> パッケージ便利．</li>
</ul>
</li>
<li>OSS Contributions

<ul>
<li><a href="https://github.com/mattn/goveralls">mattn/goveralls</a> で複数パッケージサポート足した</li>
<li>go-github で GitHub の Review API サポートのレビューをなぜかメンテナでもないけどやってる <a href="https://github.com/google/go-github/issues/495">https://github.com/google/go-github/issues/495</a>

<ul>
<li>実質 GitHub Review API の reviewer みたいにもなってて Support に要望送りまくってる</li>
</ul>
</li>
<li>あんまりやってなかった&hellip;</li>
</ul>
</li>
</ul>


<h3>Go が好き</h3>

<p>書いてるうちに手に馴染んできて，いつの間にか好きになってましたが，結局僕はなぜ Go に恋に落ちたのでしょうか．
1つは間違いなく Go の Simplicity に惹かれたんだと思います．</p>

<h4>Simplicity is Complicated</h4>

<ul>
<li>slide: <a href="https://talks.golang.org/2015/simplicity-is-complicated.slide#1">Simplicity is Complicated</a></li>
<li>youtube: <a href="https://www.youtube.com/watch?v=rFejpH_tAHM">dotGo 2015 - Rob Pike - Simplicity is Complicated - YouTube</a></li>
</ul>


<p>Rob Pike の &ldquo;Simplicity is Complicated&rdquo; という発表がオススメです．
僕はこの発表をみて，胸がきゅーーんっとなりました．Go かわいいよ Go．</p>

<p>Go はなぜ成功したんでしょうか? コンパイル速度，実行速度，デプロイの容易さ，充実したツール，質の高いライブラリ，interfaceやconcurrencyをサポートする言語機能&hellip;
そのどれもが大事で，僕も実際どれも好きですが，Rob Pike は &ldquo;Simplicity&rdquo; が答えだといいます．
そしてこの &ldquo;Simplicity&rdquo; は &ldquo;Complicated&rdquo; だとも．</p>

<p>シンプルという言葉はともすれば薄っぺらくなります．特にVimmerという職業(?)柄，
Vim plugin とかをいくつかみると，&#8221;simple&#8221; だとか，他にも &ldquo;easy&rdquo;, &ldquo;minimalictic&rdquo;
と言った単語が並んでたりします．これは自戒を込めてですが，場合によってはちょっと薄っぺらいなぁと感じるようなものもあったりします．</p>

<blockquote><p>Simplicity is the art of hiding complexity.</p></blockquote>

<p>Go が simple だとか，less is more だとか，引き算の言語だ&hellip;といった表現をされるとき，
僕は全く薄っぺらいだとかは思いません．
これは&#8221;Simplicity&#8221; というのは実は&#8221;Complicated&#8221; であり，
&ldquo;Simplicity&rdquo; の背後には&#8221;complexity&#8221;を洗練された，緻密なデザインや設計，実装が隠れているからなんだと思います．</p>

<p>GCやgoroutine,interfaceといった実際の例がスライドで説明されているので是非見てみてください．</p>

<p>僕らが享受しているGo の &ldquo;Simplicity&rdquo; は簡単に実現されたものではありません．
僕らが Go に対して，「あぁ，こういうのでいいんだよ．こういうので．」と感じるとき，
その背後には Go がたくさんの機能を削ぎ落として，直交する必要十分な機能のデザインと
複雑な実装が存在しています．</p>

<blockquote><p>Simplicity is hard—to design. <br>
Simplicity is complicated—to build. <br>
But if you get it right&hellip; <br>
Simplicity is easy—to use. <br>
The success of Go proves it. <br>
&ndash; <a href="https://talks.golang.org/2015/simplicity-is-complicated.slide#30">https://talks.golang.org/2015/simplicity-is-complicated.slide#30</a></p></blockquote>

<p>&ldquo;Simplicity&rdquo; をデザインするのは難しく，&#8221;Simplicity&#8221;の実現はとても複雑です．
でもこれらをうまくやると，&#8221;Simplicity&#8221; は使うのが簡単になります．</p>

<p>これが Go は， &ldquo;simple&rdquo; であり，&#8221;less is more&#8221; であり，&#8221;引き算の言語&#8221; であり，
「あぁ，こういうのでいいんだよ．こういうので．」ということなのでしょう．</p>

<h4>Go is more Pythonic than Python</h4>

<p><a href="https://talks.golang.org/2012/zen.slide#1">Go and the Zen of Python</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; import this
</span><span class='line'>The Zen of Python, by Tim Peters
</span><span class='line'>
</span><span class='line'>Beautiful is better than ugly.
</span><span class='line'>Explicit is better than implicit.
</span><span class='line'>Simple is better than complex.
</span><span class='line'>Complex is better than complicated.
</span><span class='line'>Flat is better than nested.
</span><span class='line'>Sparse is better than dense.
</span><span class='line'>Readability counts.
</span><span class='line'>Special cases aren't special enough to break the rules.
</span><span class='line'>Although practicality beats purity.
</span><span class='line'>Errors should never pass silently.
</span><span class='line'>Unless explicitly silenced.
</span><span class='line'>In the face of ambiguity, refuse the temptation to guess.
</span><span class='line'>There should be one-- and preferably only one --obvious way to do it.
</span><span class='line'>Although that way may not be obvious at first unless you're Dutch.
</span><span class='line'>Now is better than never.
</span><span class='line'>Although never is often better than *right* now.
</span><span class='line'>If the implementation is hard to explain, it's a bad idea.
</span><span class='line'>If the implementation is easy to explain, it may be a good idea.
</span><span class='line'>Namespaces are one honking great idea -- let's do more of those!</span></code></pre></td></tr></table></div></figure>


<p>僕が最初に学んだ言語は Python で，The Zen of Python の思想はとても好きでした．</p>

<ul>
<li>Explicit is better than implicit.</li>
<li>Simple is better than complex.</li>
<li>Readability counts.</li>
<li>There should be one&ndash; and preferably only one &ndash;obvious way to do it.</li>
</ul>


<p>Go は The Zen of Python に，ともすれば Python 以上にマッチしています．
Go が Pythonic なところも間違いなく僕が Go を好きになった一因です．
なんなら，Go が Python より Pythonic なので，もう Python で書くようなところは，
Go で書きたい．</p>

<p>Go の前に学んだ言語は Scala でした．
Scala が魅せてくれるプログラミング言語の可能性にはスゴイなぁ，おもしろいなぁ，
と思いつつも，Scala が気になる子止まりだったのは，The Zen of Python の思想の真逆を
行くような，ないし真逆のコードが生まれやすい言語だからだと思います．
Scala は今も書いているし，堅牢かつ規模の大きいコードも Scala だと比較的安心して書いていけたり，
僕に &ldquo;Functional Programming&rdquo; などを教えてくれた Scala は好きですが，恋に落ちるほどではなかった．
僕を含め，もう少し人類が進化するとまた変わってくる気もする．</p>

<h3>Go とのこれから</h3>

<p>2017年もGoと仲良くやってきたいです．個人的には特に Vim との連携とか含め．
Go 本体になんかコントリビュッションしたいと思いつつできなかったので，機会があればやっていきたい．</p>

<p>あとは，Go のよさを再確認するため(?)に別のパラダイムの言語(rust とか)にちょい浮気しつつやっていきたいですね．</p>

<h2>Vim との 2016年 - 本妻は Vim</h2>

<p>2016年のVim活もザックリ振り返ります．</p>

<h3>EasyMotion 3.0</h3>

<p><a href="http://haya14busa.com/vim-easymotion-ver-3-dot-0-overwin-motions/">Vimのカーソル移動はもっともっと爆速になる! Vim-EasyMotion v3.0 をリリースしました - haya14busa</a></p>

<p>結構前にやった気もしますが，今年でした．
バージョン3.0の機能追加でウィンドウをまたいだEasyMotionによるカーソル移動が実現しました．
完全にライフチェンジング機能だし，待望の機能の実現で自分の Vim script 力の高まりも確認できてよかった．</p>

<h3>vital のロード高速化</h3>

<ul>
<li><a href="http://haya14busa.com/revital-vim-makes-vital-vim-a-lot-faster/">revital.vim で vital.vim を爆速にしてお前らの Vim plugin を速くする - haya14busa</a></li>
<li><a href="https://github.com/vim-jp/vital.vim/pull/415">vital モジュールのロードを爆速にする &amp; ロード方法を考える by haya14busa · Pull Request #415 · vim-jp/vital.vim</a></li>
</ul>


<p>まず，revital.vim という別プラグインで vital.vim のロードを高速化できることを示した後，結局 vital.vim 本体に入れてもらいました．
ついでにリファクタリングしたりインターフェースの改善も行いました(後方互換性は維持している)．
特定の環境でvital.vimが遅いという問題を完全に解決し，現在では autoload 関数を呼ぶのと変わらなくなってます．</p>

<h3>はじめてのパッチ - Vim の Contributer に!</h3>

<ul>
<li><a href="https://github.com/vim-jp/issues/issues/893">statuslineの%{}などでevalした際に，try-catch でVimのエラーをキャッチしていても statusline が disable されてしまう · Issue #893 · vim-jp/issues</a></li>
<li><a href="https://github.com/vim/vim/commit/a742e084b677f76c67e9e52c4f9fb9ab24002e20">patch 7.4.1711 · vim/vim@a742e08</a></li>
</ul>


<p>vital のロード高速化の際に Vim のバグを踏んで，小さいですがはじめてパッチを書いて取り込まれました!
このバグは本体のバグだったということもあって異常に原因究明が難しく，原因を見つけたのは <a href="https://github.com/lambdalisue">lambdalisue</a> さんでした．</p>

<p>今年は他にも EasyMotion で踏んだバグの修正パッチや，Vim8.0 リリース前の channelやjob 機能を叩いたパッチを書いたり，
Vim 8.0 に lambda いれようぜ! ともう一回 vim-jp でちょっと騒いで，あとは vim-jp の <a href="https://github.com/mattn">mattn</a> さんや
<a href="https://github.com/k-takata">k-takata</a> さんに丸投げするなどをしてました．</p>

<p>そのあたりの話で１つ記事を書いてます -> <a href="https://medium.com/@haya14busa/vim-8-0-released-and-now-im-a-contributor-of-vim-36d93bbfc7b6#.nxkskyex2">Vim 8.0 released and Now, I’m a contributor of Vim !!! – Medium</a></p>

<p>今年になって小さいとは言え Vimのパッチ書いたりできたのはとても嬉しかったです．
Vim のソースコードも読むことは出来るし，デバッグの仕方もわかってきたし，
場合によってはちょっと修正するくらいのことも出来るということがわかったのは収穫でした．
ただ，もっと C 力は高めたほうがよさそう．</p>

<h3>Vim 8.0 &amp; Go関連</h3>

<ul>
<li>go-vimlparser</li>
<li>vim-go-client</li>
<li>vim-stacktrace</li>
<li>パッチいくつか．</li>
</ul>


<p>詳細は Go のところで紹介したので省略．</p>

<h3>VimConf</h3>

<ul>
<li><a href="https://medium.com/@haya14busa/report-of-vimconf2016-an-international-conference-for-vim-f99925893322#.d8n121p9e">Report of #vimconf2016 — an international conference for Vim – Medium</a></li>
<li><a href="https://github.com/haya14busa/vim-metarepeat">haya14busa/vim-metarepeat</a></li>
<li><a href="https://github.com/haya14busa/vim-textobj-function-syntax">haya14busa/vim-textobj-function-syntax: heuristic syntax-based text-object for function</a></li>
</ul>


<p>発表は go-vimlparser についての話ですでに書きましたが，
<a href="https://github.com/t9md">t9md</a> さんの <a href="https://github.com/t9md/atom-vim-mode-plus">t9md/atom-vim-mode-plus</a> の発表が面白くて，
Atom の vim-mode-plus のアイデアを Vim にバックポートする業などをしていました．</p>

<p><a href="https://github.com/haya14busa/vim-metarepeat">haya14busa/vim-metarepeat</a> は vim-mode-plus の occurence で出来るようになる便利な機能を別の角度から実装したもので，
ドットリピートをオペレータとして，テキストオブジェクト内の対象に対して一括でドットリピートを実行するものです．
記事には書いてないけどissueにちょっと考えとかを書いています -> <a href="https://github.com/vim-jp/issues/issues/977#issuecomment-259703728">https://github.com/vim-jp/issues/issues/977#issuecomment-259703728</a>
vim-metarepeat はかなり便利で常用していて，記事書くかぁと思いながら今年が終了しました．</p>

<p><a href="https://github.com/haya14busa/vim-textobj-function-syntax">haya14busa/vim-textobj-function-syntax</a> は関数text-objectをVimのsyntaxを使って言語ごとに用意せずに使えるようにしたものです．
syntax によって使える/使えない言語がありますが，ちょっと便利．
これも記事にはしてないけどissueにちょっとコメントしてます．-> <a href="https://github.com/vim-jp/issues/issues/987#issuecomment-262870187">https://github.com/vim-jp/issues/issues/987#issuecomment-262870187</a></p>

<h3>Google Translate の衝撃と Vim</h3>

<p><a href="https://japan.googleblog.com/2016/11/google.html">Google Japan Blog: Google 翻訳が進化しました。</a></p>

<p>今年はGoogle Translate が日英間の翻訳に Neural Machine Translation を導入して，
機械翻訳がとても流暢になりました．Google Translate さんすごい．
この改善をみて，Vimから使いやすくするためにいくつかプラグインを作りました．</p>

<ul>
<li><a href="https://github.com/haya14busa/vim-open-googletranslate">haya14busa/vim-open-googletranslate: Open Google Translate (https://translate.google.com/) from Vim.</a>

<ul>
<li>Vim から Google Translate を開く operator やコマンドを追加するプラグイン．常用してます．</li>
<li><a href="https://twitter.com/Linda_pp">りんだん</a> さんに <a href="https://github.com/rhysd/electron-open-url">rhysd/electron-open-url</a> という Electron で url を開くものを作ってもらって，これをつかって Google Translate を開く設定をすることによって，連続で翻訳しやすくなってとても便利になりました．</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/gtrans">haya14busa/gtrans: Command-line translator using Google Translate</a></li>
<li><a href="https://github.com/haya14busa/vim-gtrans">haya14busa/vim-gtrans: Google Translate in Vim</a>

<ul>
<li>Google Translate の API を使ったもの．こちらは Vim のバッファで完結できる．</li>
<li>API はめちゃめちゃ安いとはいえ，お金がかかるし，vim-open-googletranslate with electron-open-url の組み合わせが十分便利なのでそちらを最近は使ってる．</li>
</ul>
</li>
</ul>


<h2>英語でブログ記事を書く</h2>

<p>Google Translate の流れでいうと今年後半からは実験的にブログ記事も英語で書くようにしました．
Google Translate 改善前からやっていて，改善後も勿論(?)Google Translateはあくまで補助としての使用ですが．</p>

<h3>書いた英語 Posts</h3>

<ul>
<li><a href="https://medium.com/@haya14busa">haya14busa – Medium</a></li>
<li><a href="https://medium.com/@haya14busa/vim-8-0-released-and-now-im-a-contributor-of-vim-36d93bbfc7b6#.5f2fkfj0o">Vim 8.0 released and Now, I’m a contributor of Vim !!! – Medium</a></li>
<li><a href="https://medium.com/@haya14busa/vim-script-parser-written-in-go-4d0296782a14#.gj03djo2w">Vim Script Parser written in Go – Medium</a></li>
<li><a href="https://medium.com/@haya14busa/reviewdog-a-code-review-dog-who-keeps-your-codebase-healthy-d957c471938b#.80j73sekq">reviewdog — A code review dog who keeps your codebase healthy – Medium</a></li>
<li><a href="https://medium.com/@haya14busa/report-of-vimconf2016-an-international-conference-for-vim-f99925893322#.pz8doupyk">Report of #vimconf2016 — an international conference for Vim – Medium</a></li>
<li><a href="https://medium.com/@haya14busa/golang-tips-you-might-not-know-1c90e6921a3#.zhpcp2dot">Golang tips you might not know – Medium</a></li>
<li><a href="https://medium.com/@haya14busa/sum-union-variant-type-in-go-and-static-check-tool-of-switch-case-handling-3bfc61618b1e#.l22136r8d">Sum/Union/Variant Type in Go and Static Check Tool of switch-case handling – Medium</a></li>
</ul>


<p>英語で書く記事かどうか決めるというよりは，基本的に英語で書いて，どうしても日本語で書いたほうがよさそうだったら日本語で書くことにしています．
直近の2つのアドベントカレンダーは普通に日本語で書いてしまって守れてないけど&hellip;正直時間が取れなかったので日本語に逃げました&hellip;
まぁ日本語で発信するのもそれはそれで大事だと思うのでいいかなぁーとは思ってます．</p>

<p>英語で書く理由としては，今後使うし勉強のためやらなきゃ&hellip;という理由と，
発信を日本に閉じる必要性はないかなーと最近は考えてるからでした．
僕はVimとかGoについて書くことが最近は多いですが，それらの記事のターゲットは大抵 Vimmer か Gopher で，
別に想定読者を日本人に絞る必要性はないんですよね．</p>

<p>日本語で書いた後，英訳しようとはなかなか行動できないので，英語・日本語両方ポスト作ると言うよりは，
実質デファクトになってる英語で書けば英語読める日本人は読めるので，基本的には
英語で1つ記事を書くということにしました．</p>

<p>&hellip;とはいえ時間やクオリティーの兼ね合い，日本のコミュニティーの活性化，
フィードバックのもらいやすさ，そして何より現状の英語力が足りてない問題など，
色々と問題はありますが．そもそもたくさんの人に読んでもらうというのが目的ではないという観点もありそうだけど．</p>

<p>英語で書くと特に日本では伸びづらいですが，
日本で伸びなくても今までリーチしなかった層にリーチするし，
今年書いた記事はだいたいある程度は日本人もそれ以外も読んでもらえたっぽいので，
今の所やってみてよかったです．
reddit とかにあげるとそこそこ読みにきてくれて便利．(redditのCEOがコメント編集したという事件があって，若干使いたさが減りましたが&hellip;)．
来年も続けていこうかなぁと思います．</p>

<p>英語に関してはWritingもそうだけど，どちらかといえば勉強する必要があったのはSpeaking/Listeningだった気が&hellip;
という説もあり，今後がとても心配すぎる&hellip;</p>

<h2>2016年活動情報</h2>

<h3>GitHub Contributions</h3>

<ul>
<li><a href="https://github.com/haya14busa?utf8=%E2%9C%93&amp;tab=repositories&amp;q=created%3A%222016-01-01%20..%202017-01-01%22%20fork%3Afalse&amp;type=&amp;language=">作った Repositories</a></li>
<li><a href="https://github.com/search?utf8=%E2%9C%93&amp;q=is%3Apr+author%3Ahaya14busa+created%3A%222016-01-01+..+2017-01-01%22+&amp;type=Issues&amp;ref=searchresults">開いた issues</a></li>
<li><a href="https://github.com/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+author%3Ahaya14busa+created%3A%222016-01-01+..+2017-01-01%22+">開いた Pull Requests</a></li>
</ul>


<p>GitHub Contributions (including private contributions)</p>

<p><img src="../images/post/2016-github-all-contributions.png" alt="GitHub Contributions (including private contributions)" /></p>

<p>GitHub Contributions (public)</p>

<p><img src="../images/post/2016-github-public-contributions.png" alt="GitHub Contributions (public)" /></p>

<h3>Posts</h3>

<ul>
<li>Jan 19 <a href="http://haya14busa.com/vim-easymotion-ver-3-dot-0-overwin-motions/">Vimのカーソル移動はもっともっと爆速になる! Vim-EasyMotion v3.0 をリリースしました - haya14busa</a></li>
<li>Mar 23 <a href="http://haya14busa.com/revital-vim-makes-vital-vim-a-lot-faster/">revital.vim で vital.vim を爆速にしてお前らの Vim plugin を速くする - haya14busa</a></li>
<li>May 30 <a href="http://haya14busa.com/amazon-kindle-sale-til-2016-06-02/">6/2までKindle本50%オフセール!IT系の本で僕が欲しい本をまとめた!!! - haya14busa</a></li>
<li>Jul 02 <a href="http://haya14busa.com/hatena-pepabo-kyoto/">はてな・ペパボ技術大会〜インフラ技術基盤〜@京都 行ってきたメモ - haya14busa</a></li>
<li>Oct 24 <a href="http://haya14busa.com/reviewdog/">reviewdog を飼ってコードレビューや開発を改善しませんか - haya14busa</a></li>
<li>Nov 02 <a href="http://haya14busa.com/golang-how-to-write-mock-of-interface-for-testing/">Golangにおけるinterfaceをつかったテストで mock を書く技法 - haya14busa</a></li>
<li>Dec 21 <a href="http://haya14busa.com/vim-go-client/">Go で Vim プラグインを書く - haya14busa</a></li>
<li>Dec 24 <a href="http://haya14busa.com/ci-for-go-in-end-of-2016/">Go の CI で lint と カバレッジ回して非人間的なレビューは自動化しよう in 2016年 - haya14busa</a></li>
</ul>


<h3>Posts (English)</h3>

<ul>
<li>Sep 13 <a href="https://medium.com/@haya14busa/vim-8-0-released-and-now-im-a-contributor-of-vim-36d93bbfc7b6#.zeqiwqjtq">Vim 8.0 released and Now, I’m a contributor of Vim !!! – Medium</a></li>
<li>Sep 20 <a href="https://medium.com/@haya14busa/vim-script-parser-written-in-go-4d0296782a14#.5ehmbn3dn">Vim Script Parser written in Go – Medium</a></li>
<li>Oct 24 <a href="https://medium.com/@haya14busa/reviewdog-a-code-review-dog-who-keeps-your-codebase-healthy-d957c471938b#.lk0e5kix0">reviewdog — A code review dog who keeps your codebase healthy – Medium</a></li>
<li>Nov 7 <a href="https://medium.com/@haya14busa/report-of-vimconf2016-an-international-conference-for-vim-f99925893322#.fe69sy14m">Report of #vimconf2016 — an international conference for Vim – Medium</a></li>
<li>Dec 1 <a href="https://medium.com/@haya14busa/golang-tips-you-might-not-know-1c90e6921a3#.77th9mu4e">Golang tips you might not know – Medium</a></li>
<li>Dec 6 <a href="https://medium.com/@haya14busa/sum-union-variant-type-in-go-and-static-check-tool-of-switch-case-handling-3bfc61618b1e#.cp9eqobvo">Sum/Union/Variant Type in Go and Static Check Tool of switch-case handling – Medium</a></li>
</ul>


<h2>歩くのが下手って気付いた2016年</h2>

<p>今年は1つ大きく躓いた出来事がありました．躓いただけなら立て直せばよかったはずだったけど，
そのまま歩き続ける意味を見失い，歩みを進めようとする心はもう折れていて，しばらくその場でうずくまってしまいました．
躓いたことにも，歩き直せなかったことにも，道を変えて歩くことさえもできずに，ただただうずくまってました．
今まで通りとはいかないにしても，もうちょっとうまく歩けたはずでした．
あぁ，僕は歩くのがなんて下手なんだ&hellip;</p>

<p>今の所，詳細はオープンインターネットには書かなくてもいいかな&hellip;と思ってます．
書く気がないのにここでふんわり書いたのは完全に自己満足です．忘年です．忘れないけど．</p>

<p>あとは完全にここでやるべきことではないけど，一種の懺悔みたいなものです．
僕が単に1人でうずくまったまま世界から消えても，別に世界はどうってことないけど，
無駄に不要なところにまで迷惑をおかけしてしまったり，いくつか見えた差し伸べられた手も
完全にシャットアウトしてしまったことは，単純に反省しています．ごめんなさい．</p>

<p>最近は人間的な生活をおくるリハビリをしていて，心に平穏は戻りつつある気はします．</p>

<h2>最後に</h2>

<p>2016年の振り返り記事だって言ってるのに無駄なポエムがところどころにあるせいで無駄に長くなった気がします．
あとオープンにやってきたこと何でもかんでも放り込み過ぎて長くなったので，もうちょっとハイライトだけ振り返ればよかった気もする．
まぁ，まだまだとはいえ，2016年結構いろいろやったのでは? と振り返って思いました．
来年の目標，なにか定量的なものを設定して振り返るのが本当は良い気がしますが，
来年はとりあえず強く生きることを目標にします．</p>

<p>来年がとても素晴らしい1年でありますように．</p>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go の CI で lint と カバレッジ回して非人間的なレビューは自動化しよう in 2016年]]></title>
    <link href="http://haya14busa.com/ci-for-go-in-end-of-2016/"/>
    <updated>2016-12-25T23:15:50+09:00</updated>
    <id>http://haya14busa.com/ci-for-go-in-end-of-2016</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://qiita.com/advent-calendar/2016/go3">Go (その3) Advent Calendar 2016</a> の24日目の記事です(代打)．
メリークリスマス!</p>

<p>本記事では Go 言語プロジェクトの CI で回すと便利な各種lintの紹介やカバレッジ計測の方法などなどについて紹介します．</p>

<h2>Go 言語おすすめ linter</h2>

<p>Go の lint 一覧といえば <a href="https://github.com/alecthomas/gometalinter">gometalinter</a> じゃん?
みたいな話もあると思うのですが，CIで回すには個別に linter を明示的に回すほうが良いかと思います．
ということで 僕が普段使ってるオススメ linter の紹介です．</p>

<h3>go vet</h3>

<ul>
<li><a href="https://golang.org/cmd/vet/">vet - The Go Programming Language</a></li>
<li>おすすめ度: ★★★★★</li>
</ul>


<blockquote><p>Vet examines Go source code and reports suspicious constructs, such as Printf
calls whose arguments do not align with the format string. Vet uses
heuristics that do not guarantee all reports are genuine problems, but it can
find errors not caught by the compilers.</p></blockquote>

<p>Go 言語標準でついているlintツールで，コンパイラが検出しないエラーを検出できます．
false positive な結果も無いようにデザインされているのでエラーがリポートされた場合は安心してCIをfailにできます．
go vet に検出されたエラーはほぼ100%直したほうがよいでしょう．</p>

<h3>golint</h3>

<ul>
<li><a href="https://github.com/golang/lint">golang/lint: This is a linter for Go source code.</a></li>
<li>おすすめ度: ★★★★☆</li>
</ul>


<blockquote><p>Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes.
Golint differs from govet. Govet is concerned with correctness, whereas golint is concerned with coding style.</p></blockquote>

<p>gofmtがコードのリフォーマットを，govetがコードの正確性をチェックするのに対して，golint
は Go のソースコードの <strong>&ldquo;コーディングスタイル&rdquo;</strong>
の問題を報告します．これはエラーというよりも &ldquo;suggestion&rdquo; に近く，
基本的に従っていたほうがGoの慣習に沿った確実によいコードになるのですが，
まれに，いやここの関数はコメント書かなくても絶対いいよね&hellip;とかいうケースもあり
若干消耗することもあるので星4です．</p>

<p>なお，結局はコーディングスタイルの問題をリポートするという思想からデフォルトでは問題があっても
exit code は 0 になるので，落としたい場合は <code>-set_exit_status</code> flag を付けましょう．</p>

<h3>errcheck</h3>

<ul>
<li><a href="https://github.com/kisielk/errcheck">kisielk/errcheck: errcheck checks that you checked errors.</a></li>
<li>おすすめ度: ★★★☆☆</li>
</ul>


<p>errcheck は関数のエラーの返り値をハンドリングチェックしているかどうかを静的に解析してくれるツールです．
エラーを捨てた状態の場合思わぬ動作(nilになってたりだとか)するので，これをチェックしてくれるのは大変嬉しいです．</p>

<p>ただし，少し実際直さなくてもいいという意味でのfalse positive が多くCIで動かすには工夫が必要で星3です．エラーをチェックしてくれるという便利度は満点．
なお，最近は標準ライブラリで必ずエラーがnilとして返ってくるような関数についてはリポートしないという
false positive を減らす工夫もされているようです．</p>

<h3>staticcheck</h3>

<ul>
<li><a href="https://github.com/dominikh/go-staticcheck">dominikh/go-staticcheck: Staticcheck is go vet on steroids, applying a ton of static analysis checks you might be used to from tools like ReSharper for C#</a></li>
<li>おすすめ度: ★★★★★</li>
</ul>


<p>staticcheck は一言で言うとサードパーティーの <code>go vet</code>です．go vet でチェックされていないようなことを静的に解析してくれます．
(例えば正規表現がvalidかチェックしてくれるかなどなど&hellip;たくさん項目があるのでREADMEを見てみてください．)</p>

<p>作者の <a href="https://github.com/dominikh">dominikh さん</a> は Go
言語の開発にも関わっていて，dominikh さん製Go lint ツールは個人的には
信頼できる印象です．github/go の issue でも  go vet のissueなどに， staticcheck
は実際こういうのチェックしてるけどと言った感じで参照されてたりするのを見かけます．</p>

<p>そして次の2つのツールも dominikh さん製です．</p>

<h3>gosimple</h3>

<ul>
<li><a href="https://github.com/dominikh/go-simple">dominikh/go-simple: Gosimple is a linter for Go source code that specialises on simplifying code</a></li>
<li>おすすめ度: ★★★★★</li>
</ul>


<p>gosimple は一言で言うとdominikh さん製のサードパーティー <code>gofmt -s</code> です．もっとコードをシンプルに出来るところを報告してくれます．
(ただし執筆時現在，自動で修正してくれるオプションとかはない)</p>

<p>例えば <code>if err != nil { return err }; return nil</code> といった構造のコードがあれば
<code>return err</code> で十分だよ? と報告してくれます．</p>

<p>報告に false positive もない印象で，あーそんなメソッドあったのか〜ということに気付いたりできてオススメです．</p>

<h3>go-unused</h3>

<ul>
<li><a href="https://github.com/dominikh/go-unused">dominikh/go-unused: Check Go programs for unused identifiers</a></li>
<li>おすすめ度: ★★★★★</li>
</ul>


<p>使ってない identifier をチェックしてくれます．
Go のコンパイラ自体が使ってない変数があるとコンパイル通らないという話もありますが，
unused は グローバル変数の var や const, struct の field，export されていない関数などで
使われていないものを報告してくれます．</p>

<p>報告してくれないのは使われてない関数の引数くらいでしょうか? これはインターフェースを満たすための関数など，
引数もらうけど使わないんやというケースなどを考えて報告されていないのではないかという気がします．[要出典]</p>

<p>また個人的には使えてないので強くオススメできませんが，パッケージのリストを渡して
exported なもので，渡したパッケージ内で使われていないものをチェック出来る機能もあります．
<a href="https://github.com/dominikh/go-unused#whole-program-analysis">https://github.com/dominikh/go-unused#whole-program-analysis</a>
&ldquo;internal&rdquo; packages などを使っていたりする場合は便利かもしれないですね．</p>

<p>unused は個人的には大変便利に使っていて，ごくまれにデバック用のexportしてない関数を報告されて，
あー&hellip;ってなる以外に false positive な結果もなく便利に使っています．</p>

<p>この前 interface を満たすためのダミーの関数をいろんな struct に定義してたんですが，
その際，追加すべきでない struct にも追加してしまい，それを unused が<a href="https://github.com/haya14busa/go-vimlparser/pull/23#pullrequestreview-11276693">報告</a>
してくれたことがありました．インターフェースを満たすかどうかといった観点での&#8221;used&#8221;もちゃんと見てくれていて大変良い子だな〜と思い感動しました．
オススメです．</p>

<h3>gofmt -s</h3>

<ul>
<li><a href="https://golang.org/cmd/gofmt/">gofmt - The Go Programming Language</a></li>
<li>おすすめ度: ★★★★☆</li>
</ul>


<p>linter ではない若干番外編その1．</p>

<p><code>gofmt -s</code> の結果 diff があるかどうか，つまりもっとシンプルにかけた部分がないかということをチェックできます．</p>

<p>コマンド: <code>(! gofmt -s -d . | grep '^')</code></p>

<p>括弧は travis などのyamlでvalidなものにするために使っています．
gofmt も exit code が 1 になったりすることはないので個人的には <code>grep '^'</code>
の結果を否定することによって，diffを表示しつつ，diffがあればfailにするという手法を使っています．
(<code>xargs -r</code> とかはMacでは<code>-r</code>がないとかがある&hellip;)</p>

<p>基本的にGo言語開発時はみんな gofmt かけていると思いますが，<code>-s</code> は付けていなかったり，
<code>goimport</code> で <code>gofmt</code> を代用していた場合に <code>-s</code> オプションがなくてかけてなかったりするので
CI で実行するとちょっと便利です．</p>

<p>ちょっと便利なんですが，<code>-s</code> つけるとめっちゃシンプルになって絶対いいよね&hellip;! というよりは，
あー手元で実行してなくて，CIサーバでdiffでちゃったよ&hellip;直すか&hellip;とちょ〜っとだけ消耗することが
あるという意味で個人的にはオススメ度星4です．(goimport <code>-s</code>フラグ足してくれ〜)</p>

<h3>go test -race</h3>

<ul>
<li>おすすめ度: ★★★★★</li>
</ul>


<p>linter ではない若干番外編その2．
<code>go test</code> に <code>-race</code> を付けるとrace condition があるかチェックしてくれます．
特に goroutine とか使ってるコードであれば，CIでのテスト実行時にはぜひ付けておくべきでしょう．
僕も何度も<code>-race</code>に怒られてコード直したり，ああここlockいるなと気付かされております．</p>

<h3>その他</h3>

<p>あんまり僕がまだ使えてなくて，ちゃんとオススメできないけど便利な静的チェックツールはいくつかあります．</p>

<h4>interfacer</h4>

<ul>
<li><a href="https://github.com/mvdan/interfacer">https://github.com/mvdan/interfacer</a></li>
<li>引数の型とかインターフェースでいいじゃん?というところを指摘してくれる. e.g. <code>*os.File</code> -> <code>io.Reader</code></li>
<li>個人的にはインターフェースにするといいところは最初からインターフェース使ってたりするしそこまでの恩恵は感じない</li>
</ul>


<h4>gosum</h4>

<ul>
<li><a href="https://github.com/haya14busa/gosum">https://github.com/haya14busa/gosum</a></li>
<li>急に拙作ツールの宣伝(?)</li>
<li>Go のインターフェースで直和型っぽいことを表現したときの，type switch に抜け漏れがないかを静的にチェックするツールです．</li>
<li>Scala でいう sealed trait のパターンマッチでコンパイラが抜け漏れがあると warning だしてくれるというやつのGoバージョン</li>
<li>詳しくはこの記事に書きました ->  <a href="https://medium.com/@haya14busa/sum-union-variant-type-in-go-and-static-check-tool-of-switch-case-handling-3bfc61618b1e#.lh90e9kx1">Sum/Union/Variant Type in Go and Static Check Tool of switch-case handling – Medium</a></li>
<li>書いてみて，使ってみて実際便利だと思ってるんですが，まだちゃんとCIで回したりはしてないので，その他枠で雑に紹介です．</li>
</ul>


<p>ところで linter 書くときって，AST ベースで解析するツールが僕の観測範囲では多いと思うですが，
Goは必要であれば <a href="https://golang.org/pkg/go/types/">go/types</a> パッケージを使って型情報まで使って
解析できるので大変便利ですね&hellip;! 標準ライブラリでカバーされてるところも +1</p>

<p><strong>&ldquo;go/ast ではしゃいでるのはもう古い! 時代は go/types !&rdquo;</strong> みたいな煽りタイトルの解説記事を最近は待ち望んでます．
go/types 関連は標準ライブラリの中でもかなり大きいものなのでなかなか僕もまだ全貌を理解できてないです．</p>

<h4>その他のその他</h4>

<p><a href="https://github.com/alecthomas/gometalinter">gometalinter</a> とか <a href="https://goreportcard.com/report/github.com/haya14busa/reviewdog">Go Report Card</a> で紹介されているツール．</p>

<p><a href="https://github.com/fzipp/gocyclo">https://github.com/fzipp/gocyclo</a>
とかイマイチ恩恵を受けたことがないんですが，gometalinter とか <a href="https://goreportcard.com/report/github.com/haya14busa/reviewdog">Go Report Card</a>
で使われているツールは参考になるかもしれません．</p>

<h2>reviewdog: linter の false positive と闘う</h2>

<p>特に golint や errcheck など，上記でオススメしたlinterの中には，false positive
なリポートが結構あって，めっちゃ便利でチェックしたいんだけど CI で fail
にしづらい&hellip; というものがいくつかあります．</p>

<p>そこで拙作ツール <a href="https://github.com/haya14busa/reviewdog">reviewdog</a> の紹介です．(宣伝)</p>

<p>もちろん Go 製です!</p>

<p><a href="https://github.com/haya14busa/reviewdog/pull/63#pullrequestreview-13287340"><img src="../images/post/2016-12-26-reviewdog.png" alt="" /></a></p>

<p>(画像は実際のPull Requestのコメントへのリンクになってます)</p>

<p>reviewdog は Go 言語の linter に限らず，任意のコマンドの結果を&#8217;errorformat&#8217;
という形式を使うことでパースして，<em>diff</em> で新たに追加された部分にたいする問題だけを
表示したり，GitHub にコメントすることが出来るツールです． 詳しくは -> <a href="http://haya14busa.com/reviewdog/">reviewdog を飼ってコードレビューや開発を改善しませんか - haya14busa</a></p>

<p>結果をdiffでフィルターすれば，それらの問題についてのみPull
Requestのレビュー時やコミット時にチェックすることが出来るので，
もし false positive な結果な場合は単に無視すれば次回以降に同じ問題は報告されません．</p>

<p>もちろん，例えば先に紹介した unused などは全然diffと関係ない部分で新たに問題がおきたりすることもあり，
結果を diff でフィルターするというのはfalse positiveと闘う銀の弾丸ではないのですが，
多くの場合これで十分機能を果たすでしょう．
(一応 diff 外の問題もうまくまとめて報告する仕組みも足したいな〜という気持ちはあります)</p>

<p>Go 製ツールである reviewdog は自分自身のコードでドックフーディングしていて，この記事で紹介した
いろんなGo 用 linter を実行していて，上記の画像のように実際に便利に使っています．
参考: <a href="https://github.com/haya14busa/reviewdog/blob/08050fc886b39f7caa4b0f39bcb2188043030214/reviewdog.yml">reviewdog/reviewdog.yml</a>
(最近はyamlでも管理できるようにしていて，より簡単にローカルで実行したり，git hook で実行しやすくしたりしたいなどと改善しています)</p>

<h2>Goのテストカバレッジをレビューでも活用する</h2>

<p>Go は標準で <code>go test -coverprofile=coverage.out .</code> などと実行するとテストカバレッジを取得することができます．
ただ実は CI などでカバレッジを取得する際は注意点があり，複数のパッケージをまとめてカバレッジを計測することはできません．
つまり例えば <code>go test -coverprofile=coverage.out ./...</code> とはできません．これは
<code>go test</code> 内部ではパッケージごとにテスト実行用バイナリを作成してそれぞれ実行してるという設計になっていることに起因します．
<a href="https://github.com/golang/go/issues/6909#issuecomment-233493644">issue</a> は上がってますが標準では対応するのはなかなか骨が折れそうです．
(ちょっと修正してコントリビューションしてみようかと格闘しましたが構造的に地味に大変そうでした&hellip;)</p>

<p>そこで現状で，複数パッケージのテストカバレッジに対応するために色んな所で Makefile やGoのツールを使うといった解決方法が紹介されています．
しかし!紹介されていて，確かにある程度はどれも動くのですが，実は多くのスクリプトはちょっと片手落ちなものになっています．
例えば go test の <code>-coverpkg</code> 引数を使わないと依存先のコードカバレッジが取得できてなかったり，
結果の coverage.out に重複行が生まれるケースがあったりします．</p>

<h3>解決策</h3>

<p>mattn さんの <a href="https://github.com/mattn/goveralls">mattn/goveralls</a>
では上記の問題に対応したマルチパッケージ対応テストカバレッジ機能が備わっています．というか僕がPull Request しました．
<a href="https://coveralls.io/">Coveralls</a> に投稿する場合は goveralls を使うと良いと思います.  (<code>goveralls -service=travis-ci</code> でよしなにやってくれる)</p>

<h3>ローカルでは?</h3>

<p>goveralls にコントリビューションしたあと，あれ&hellip;これローカルでもやりたいじゃん&hellip;ということに気付き，
既存のMakefileソリューションや似たツールはいくつかあるにはあったんですが，上記の問題などの対応とか
いろいろ面倒だったのでマルチパッケージカバレッジ作成用go test のラッパーツールを作りました．</p>

<p><a href="https://github.com/haya14busa/goverage">haya14busa/goverage: go test -coverprofile for multiple packages</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ goverage -coverprofile=coverage.out ./...</span></code></pre></td></tr></table></div></figure>


<p>とかするといい感じに coverage.out が生成されます．便利．</p>

<h3>codecov に投稿してレビューでも活用する - &ldquo;おい、coverall もいいけど codecov 使えよ&rdquo;</h3>

<p>サブタイは <a href="https://twitter.com/b4b4r07">b4b4r07</a> さんリスペクトです． ref: <a href="http://qiita.com/b4b4r07/items/9e1bbffb1be70b6ce033">おい、peco もいいけど fzf 使えよ - Qiita</a></p>

<p><a href="https://codecov.io/">Codecov</a> という <a href="https://coveralls.io/">Coveralls</a> と似たサービスがあるのはご存知でしょうか?
僕は以前からたまに見かけたことはあったのですが，最近はじめて使ってみて，断然 coverall よりいいじゃん&hellip;!!! と感じました．</p>

<p>全体的に洗練されてる&hellip;というよさもあるんですが，一番いいところは Pull Request の diff に対するカバレッジを表示できて，
ブラウザの拡張をインストールすれば GitHub の Pull Request 画面上でカバーされた行をオーバーレイで確認できるところが大変気に入りました．</p>

<p><a href="https://github.com/haya14busa/reviewdog/pull/63#pullrequestreview-13287340"><img src="../images/post/2016-12-26-codecov-pull-request.png" alt="" /></a></p>

<p>もちろん Codecov 上のページでも見れます: <a href="https://codecov.io/gh/haya14busa/reviewdog/pull/63/compare">Compare ⋅ haya14busa/reviewdog</a></p>

<p>Go 言語リポジトリのカバレッジを travis で計測して codecov へ投稿する例:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># .travis.yml
</span><span class='line'>install:
</span><span class='line'>  - go get github.com/haya14busa/goverage
</span><span class='line'>
</span><span class='line'>script:
</span><span class='line'>  - goverage -coverprofile=coverage.txt ./...
</span><span class='line'>
</span><span class='line'>after_success:
</span><span class='line'>  - goveralls -service=travis-ci -coverprofile=coverage.txt
</span><span class='line'>  - bash &lt;(curl -s https://codecov.io/bash)</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/codecov/example-go#caveat-multiple-files">codecov 公式のGo言語用リポジトリの例</a> では Makefile を使ってますが，
完全に上記のマルチパッケージサポートの問題を踏んでるので <code>goverage</code> を使うと良いと思います．</p>

<p>テストカバレッジは別に100%を目指さなくてもよいと思っていて，全体のカバレッジが何％以下とか何％下がったらステータスをfail
にするといった機能がcoverallやcodecov にはありますが，この辺を有効にすると結構消耗するかと思います．</p>

<p>ただ，カバレッジを参考にすることは有用だし，ユニットテストは基本的に書くべきです．
Pull Request などではカバーすべきところをしっかりカバーしたテストを期待したいし，，
レビュー時にもそのあたりが可視化されると大変便利です．</p>

<p>実際僕は Go のレビューするときに手元でテストまわしてcoverageみて，ここテストそもそも無いから足して欲しいだとか，
この行はカバーされてないけど，カバーすべき部分なのでテストケース足して欲しいとか言ったりするんですが，
codecov を使うとこのフローがやりやすいし，レビュイーもPull Request を出した時点で自分で気付いて
テスト足したりできると思います．</p>

<p>実は codecov 使い始めたのは最近で，僕自身がチーム開発として使った経験はまだないのですが，
coverall よりも codecov 使うとこの辺いい感じに可視化されて人間が指摘しなくてもよくなったり，
レビュワーとして指摘しやすくなったりすると思います．</p>

<p>せっかく Go という言語は標準でテストが書きやすく，カバレッジ計測もしやすいので，ぜひ皆さんもカバレッジを計測して，codecov 使ってみてはいかがでしょうか?</p>

<h3>まとめ</h3>

<p>Go のCIでまわすと便利なlintツールを紹介したり，テストカバレッジの取得方や codecov のオススメなどをしました．
Go は <code>go/ast</code>, <code>go/types</code> など <code>go/</code> 下の標準パッケージを使ってコードをパースしてASTを取得したり，型情報を取得したりなど
するライブラリが用意されているので，必要に応じて自前でチェックツールを作ったりもしやすく面白いです．</p>

<p>この記事で紹介したものは，一般的に多く使われているみなさんが知っているようなものから，あまり知られてないものまであるかと思いますが，
すべて少なくとも僕が使っていて便利だなぁ〜，と思ったものを紹介してみました．
他に便利なオススメツールなどがあれば教えてください！</p>

<p>個人OSSプロジェクトではレビュワー最初はいない問題などがあり，最近はPull Requestを開いてlint チェックさせたり，カバレッジみたり，
改めてブラウザ画面上でセルフレビューするなどしていて，まぁちょっと面倒もあるけど良い感じです．
あとは設計レビューとかもしてくれるGoのツールがあればカンペキですね〜〜〜！！！１</p>

<p>もちろんチーム開発でのレビューでも，消耗しがちな非人間的な指摘は機械にやってもらって，
もっと大事な観点をレビューするために，この記事で各種紹介した手法は役に立つかなと思います．</p>

<p>来年も Go 書いていくぞ!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go で Vim プラグインを書く]]></title>
    <link href="http://haya14busa.com/vim-go-client/"/>
    <updated>2016-12-21T18:14:54+09:00</updated>
    <id>http://haya14busa.com/vim-go-client</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://qiita.com/advent-calendar/2016/vim">Vim アドベントカレンダー 2016</a> の21日目の記事です．</p>

<p>最近は Go 言語が大好きすぎて，Vim plugin も Go で書きたい!!! という欲が出てきたので，
Vim plugin を Go で書く方法について紹介します．</p>

<h2>Go で Vim plugin を書くとは?</h2>

<p>一口に Go で Vim plugin を書くといっても</p>

<ol>
<li>Go で書いたバイナリがメインで Vim script の autoload 関数などから呼ぶ．例: <a href="https://github.com/mattn/vim-filewatcher">https://github.com/mattn/vim-filewatcher</a></li>
<li>Go 側からも Vim script を呼ぶ，つまり Vim script で Vim の情報を取得するところなど含めて，ほぼ全部 Go で書く．</li>
</ol>


<p>という 2 段階があると思います．本記事では2の方法も含めて紹介しますがまずは1から行きましょう．</p>

<h2>1. Go で書いたバイナリをつかった Vim plugin の作り方</h2>

<p>これは先程例にあげた <a href="https://github.com/mattn/vim-filewatcher">https://github.com/mattn/vim-filewatcher</a> がシンプルでわかりやすいです．</p>

<p><a href="https://github.com/mattn/vim-filewatcher/blob/22594895e16cb4de11afa37f04d88a996f48da58/filewatcher/filewatcher.go">filewatcher/filewatcher.go</a>
で書いた Go をインストール時に <code>cd filewatcher &amp;&amp; go get -d &amp;&amp; go build</code> でビルドし，
<a href="https://github.com/mattn/vim-filewatcher/blob/22594895e16cb4de11afa37f04d88a996f48da58/autoload/filewatcher.vim">autoload/filewatcher.vim</a>
でこのバイナリを <code>job</code> をつかって呼んでいます．</p>

<p><code>go get -d</code> を呼ぶことで依存するパッケージをダウンロードし，<code>go build</code> することで <code>$GOBIN</code> などを汚さずにプラグインディレクトリにバイナリを配置できます．</p>

<h4><a href="https://github.com/mattn/vim-filewatcher/blob/22594895e16cb4de11afa37f04d88a996f48da58/autoload/filewatcher.vim">autoload/filewatcher.vim</a></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let s:cmd = expand('&lt;sfile&gt;:h:h:gs!\\!/!') . '/filewatcher/filewatcher' . (has('win32') ? '.exe' : '')
</span><span class='line'>if !filereadable(s:cmd)
</span><span class='line'>  finish
</span><span class='line'>endif
</span><span class='line'>
</span><span class='line'>function! filewatcher#watch(dir, cb)
</span><span class='line'>  return {'dir': a:dir, 'job': job_start([s:cmd, a:dir], { 'out_cb': a:cb, 'out_mode': 'nl' })}
</span><span class='line'>endfunction</span></code></pre></td></tr></table></div></figure>


<p>バイナリを呼んでいるVim script もとてもシンプルで， windows かどうか見ながらバイナリのパスを取得し，
それを <code>job</code> で呼ぶだけです．簡単．プラグインの性質によっては <code>job</code> ではなく <code>system()</code> などを使ってもよいでしょう．</p>

<p>また，開発時には <code>g:plugin_name#debug</code> などを作ってそれを見て <code>go run</code> を呼ぶというふうに変えることもできます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function! s:separator() abort
</span><span class='line'>  return fnamemodify('.', ':p')[-1 :]
</span><span class='line'>endfunction
</span><span class='line'>
</span><span class='line'>let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')
</span><span class='line'>
</span><span class='line'>let s:base = expand('&lt;sfile&gt;:p:h:h')
</span><span class='line'>let s:basecmd = s:base . s:separator() . fnamemodify(s:base, ':t')
</span><span class='line'>let s:cmd = s:basecmd . (s:is_windows ? '.exe' : '')
</span><span class='line'>
</span><span class='line'>if g:plugin_name#debug
</span><span class='line'>  let s:cmd = ['go', 'run', s:basecmd . '.go']
</span><span class='line'>elseif !filereadable(s:cmd)
</span><span class='line'>  call system(printf('cd %s && go get -d && go build', s:base))
</span><span class='line'>endif</span></code></pre></td></tr></table></div></figure>


<p>僕が作ったプラグインから引っ張ってきた例で autoload/filewatcher.vim ほどシンプルではないですが，もうちょっとなんとか出来るかもしれないですね．
main パッケージのファイル (<code>s:basecmd . '.go'</code>) を1ファイルにすると<code>go run</code>で呼びやすいです．</p>

<h2>2. Go 側からも Vim script を呼ぶ必要があるようなプラグインの作り方</h2>

<p>mattn/filewatcher ではファイルの変更を検知してstdout にJSONを吐いて，それが job の callback に渡されるという形式で単体で簡潔してましたが，
場合によっては Go 側から Vim の状態を取得したり，Vim script を呼んだりしたい場合もあります．
そういうプラグインを作るには，job を JSON モードで起動し， <a href="http://vim-jp.org/vimdoc-ja/channel.html#channel-commands">:h channel-commands</a>
を使うことによって実現できます．</p>

<h4><a href="http://vim-jp.org/vimdoc-ja/channel.html#channel-commands">:h channel-commands</a></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>JSON チャンネルを使用すると、サーバープロセス側はVimへコマンドを送信できます。
</span><span class='line'>そのコマンドはチャンネルのハンドラーを介さずに、Vimの内部で実行されます。
</span><span class='line'>
</span><span class='line'>実行可能なコマンドは以下のとおりです:           *E903* *E904* *E905*
</span><span class='line'>    ["redraw", {forced}]
</span><span class='line'>    ["ex",     {Ex コマンド}]
</span><span class='line'>    ["normal", {ノーマルモードコマンド}]
</span><span class='line'>    ["eval",   {式}, {数値}]
</span><span class='line'>    ["expr",   {式}]
</span><span class='line'>    ["call",   {func name}, {argument list}, {number}]
</span><span class='line'>    ["call",   {func name}, {argument list}]</span></code></pre></td></tr></table></div></figure>


<p><code>{数値}</code>(<code>{number}</code>) は id で，job -> Vim に渡すさいはマイナスを指定する必要があり，
その渡した id と共に評価された値が返ってきます．</p>

<p>例えば Go 側で stdout に <code>["expr","line('$')", -2]</code> を書き込むと， Vim
が<code>line('$')</code> を評価してその結果が stdin に <code>[-2, "last line"]</code>
といった結果が返ってきます．</p>

<p>便利すぎる&hellip;</p>

<p>ということでidの取扱などこのあたりの処理を毎回丁寧にやるのは面倒くさいので，
<a href="https://github.com/haya14busa/vim-go-client">https://github.com/haya14busa/vim-go-client</a> というラッパーを作りました．
ドキュメント: <a href="https://godoc.org/github.com/haya14busa/vim-go-client#Client">https://godoc.org/github.com/haya14busa/vim-go-client#Client</a></p>

<p><a href="https://godoc.org/github.com/haya14busa/vim-go-client#Client"><code>type Client</code></a> が上記の channel-commands などのに相当するメソッドを持っており，
<a href="https://godoc.org/github.com/haya14busa/vim-go-client#Handler"><code>type Handler</code></a> がメッセージの受け渡しを担当します．</p>

<p>サンプル: <a href="https://github.com/haya14busa/vim-go-client/blob/32a96bf256fabc81dff549a70328a6bb3f24e9b5/_example/dev/job/job.go"><code>_example/dev/job/job.go</code></a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>  "fmt"
</span><span class='line'>  "log"
</span><span class='line'>  "os"
</span><span class='line'>  "time"
</span><span class='line'>
</span><span class='line'>  vim "github.com/haya14busa/vim-go-client"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>type myHandler struct{}
</span><span class='line'>
</span><span class='line'>func (h *myHandler) Serve(cli *vim.Client, msg *vim.Message) {
</span><span class='line'>  log.Printf("receive: %#v", msg)
</span><span class='line'>  if msg.MsgID &gt; 0 {
</span><span class='line'>
</span><span class='line'>      if msg.Body == "hi" {
</span><span class='line'>          cli.Send(&vim.Message{
</span><span class='line'>              MsgID: msg.MsgID,
</span><span class='line'>              Body:  "hi how are you?",
</span><span class='line'>          })
</span><span class='line'>      } else {
</span><span class='line'>          start := time.Now()
</span><span class='line'>          log.Println(cli.Expr("eval(join(range(10), '+'))"))
</span><span class='line'>          log.Printf("cli.Expr: finished in %v", time.Now().Sub(start))
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func main() {
</span><span class='line'>  handler := &myHandler{}
</span><span class='line'>  cli := vim.NewClient(vim.NewReadWriter(os.Stdin, os.Stdout), handler)
</span><span class='line'>  done := make(chan error, 1)
</span><span class='line'>  go func() {
</span><span class='line'>      done &lt;- cli.Start()
</span><span class='line'>  }()
</span><span class='line'>
</span><span class='line'>  cli.Ex("echom 'hi'")
</span><span class='line'>  log.Println(cli.Expr("1+1"))
</span><span class='line'>
</span><span class='line'>  select {
</span><span class='line'>  case err := &lt;-done:
</span><span class='line'>      fmt.Printf("exit with error: %v\n", err)
</span><span class='line'>      fmt.Println("bye;)")
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>handler := &amp;myHandler{}</code> でハンドラを作って <code>cli := vim.NewClient(vim.NewReadWriter(os.Stdin, os.Stdout), handler)</code>
で stdin/stdout を介してVim と通信できるclientを作成しています．
あとはこいつを <code>cli.Start()</code> しておけば Vim から <code>ch_sendexpr()</code> などが呼ばれると handler に中身が渡されるし，
<code>cli.Ex("echom 'hi'")</code> などを呼ぶと Vim 側で <code>echom 'hi'</code> が実行されます．</p>

<h2>実例: vim-stacktrace</h2>

<p>実際に vim-go-client を使ってひとつプラグインを書いてみました．</p>

<p><a href="https://github.com/haya14busa/vim-stacktrace">haya14busa/vim-stacktrace</a></p>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/e7ef65e590e850ea37425c6ebf4479c1422ef8c8/vim-stacktrace/stacktracefromhist.gif" alt="stacktracefromhist.gif (1287×800)" /></p>

<p>Vim のスタックトレースをquickfix に流し込むプラグインでやっていることとしては6日目の記事の <a href="http://qiita.com/tmsanrinsha/items/0787352360997c387e84">Vim scriptのエラーメッセージをパースしてquickfixに表示する - Qiita</a>
と近いです．</p>

<p>autoload 関数からjobに <code>ch_evalexpr</code>
する部分([link]<a href="https://github.com/haya14busa/vim-stacktrace/blob/933f9d10c7ef99467c27609fcdd80be37c0712e8/autoload/stacktrace.vim#L12-L30">https://github.com/haya14busa/vim-stacktrace/blob/933f9d10c7ef99467c27609fcdd80be37c0712e8/autoload/stacktrace.vim#L12-L30</a>())
を除いてほぼ全てがGoで実装されていて，現時点で Go の割合が 87.8 % です．</p>

<p><img src="https://cloud.githubusercontent.com/assets/3797062/21386073/5e56a5aa-c7b4-11e6-9cac-869cbb8ffe8d.png" alt="image" /></p>

<p>実装の中身としても，Vim のスタックトレースからは関数内における行番号しかとれず，ファイルの行番号が取得できない問題があるのですが，
それをGoで実装したVim script parser (<a href="https://github.com/haya14busa/go-vimlparser">https://github.com/haya14busa/go-vimlparser</a>) を使ってファイルをパースし，行番号を取得することができています．
また，<code>:CStacktraceFromhist</code> などは Vim script の <code>inputlist</code> をGo側から呼んでいてインテラクティブにVimと協調して動作できることも示せました．</p>

<h2>Go で書くよさ</h2>

<p>実際に Vim script でやっているひともいたように，vim-stacktrace は Go
が無いとかけなかったといった類のものではないですが，Goで書くといいことがたくさんありました．</p>

<ul>
<li>型がある安心感</li>
<li>テストが標準に備わっていて書きやすい (go test)</li>
<li>カバレッジも取れる! (go test -coverprofile)</li>
<li>Go のパッケージが使える (go-vimlparser, etc&hellip;)</li>
<li>etc&hellip;</li>
</ul>


<p>カバレッジなどは現在Vim scriptのテスティングフレームワークではサポートされていないし，なかなか実装しようとしてもムズカシそうなのですが，
Goでかけば標準でついてきます．とても便利．</p>

<p>coverall も使えます: <a href="https://coveralls.io/github/haya14busa/vim-stacktrace?branch=master"><img src="https://coveralls.io/repos/github/haya14busa/vim-stacktrace/badge.svg?branch=master" alt="Coverage Status" /></a></p>

<p>逆にPure Vim script と比較して悪いところや注意点があるとすれば</p>

<ul>
<li>vim-go-client がまだ安定してない</li>
<li>channel-commands がエラーをちゃんと返してくれない(エラーがあれば &ldquo;ERROR&rdquo; とだけ返ってくる)</li>
<li>チャンネルの通信で少しだけオーバーヘッドがある</li>
<li>現状vim/neovimに両対応できない</li>
</ul>


<p>といった感じでしょうか．もうちょっとvim-go-client精錬させたいですね&hellip;頑張ります&hellip;</p>

<h2>NeoVim のリモートプラグイン</h2>

<p>neovim 向けには実は <a href="https://github.com/neovim/go-client">neovim/go-client</a> というものが存在し，リモートプラグインをGoで書くことが出来るようです．</p>

<p><a href="http://vimconf.vim-jp.org/2016/">Vimconf 2016</a> で <a href="https://github.com/zchee">zchee</a> さんが発表していた nvim-go はこれが使われています．</p>

<p>スライド該当部分: <a href="http://go-talks.appspot.com/github.com/zchee/talks/vimconf2016.slide#33">http://go-talks.appspot.com/github.com/zchee/talks/vimconf2016.slide#33</a></p>

<p>正直なところ neovim のリモートプラグインの先行アドバンテージ(?)は大きく，vim-go-client と比較してかなり高機能になってます．
理想としては Vim 8 でも neovim でも使えるものをかけるようにしたいのですが， neovimのリモートプラグインが高機能であることや，
msgpack 依存であることからなかなか両方に対応することはムズカシイです&hellip;</p>

<p>うまく抽象化してロジックの部分だけ共通化して，vim8用/neovim用にメッセージのハンドラを管理してうんたん&hellip;みたいなことは出来るかも知れないので，
今後の研究課題という感じですね．あと僕がほとんどneovim使わないので nvim-go の仕様感とか知っている方はお話してくれると嬉しいです．
(Vimconf で zchee さんとその話ができたのは便利だった&hellip;)</p>

<h2>おわりに</h2>

<p>正直まだまだGoで書かれたVim plugin は少なく発展途上ですが，実用的なプラグインを作成することもできたので，可能性を感じます．
Go でかけばマルチプラットフォームに対応できるし，ライブラリがどうとか環境がどうとか気にすることなく動かせるので，Vim との親和性はかなり高いと思っています．</p>

<p>何よりGoはかわいい!書いていて楽しい!</p>

<p>まだまだ発展途上ですが，ぜひ皆さんもGoでVim プラグインを作ってみてください．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golangにおけるinterfaceをつかったテストで mock を書く技法]]></title>
    <link href="http://haya14busa.com/golang-how-to-write-mock-of-interface-for-testing/"/>
    <updated>2016-11-02T07:19:14+09:00</updated>
    <id>http://haya14busa.com/golang-how-to-write-mock-of-interface-for-testing</id>
    <content type="html"><![CDATA[<p>いい記事に感化されて僕も何か書きたくなった。</p>

<p><a href="http://deeeet.com/writing/2016/10/25/go-interface-testing/">Golangにおけるinterfaceをつかったテスト技法 | SOTA</a></p>

<p>リスペクト:</p>

<ul>
<li><a href="http://mattn.kaoriya.net/software/lang/go/20161025113154.htm">Big Sky :: golang で終了を確認するテストの書き方</a></li>
<li><a href="http://deeeet.com/writing/2016/11/01/go-api-client/">GolangでAPI Clientを実装する | SOTA</a></li>
<li><a href="http://mattn.kaoriya.net/software/lang/go/20161101151118.htm">Big Sky :: GolangでAPI Clientを実装する、の続き</a></li>
</ul>


<p>今週のやつではなく先週のです．今週のは特に知見がなかった&hellip;<a href="https://github.com/grpc/grpc-go">grpc-go</a>とか使えたらクライアント勝手に生成されるしいいよねgrpc流行ると便利そう(感想) くらい</p>

<p><a href="http://deeeet.com/writing/2016/10/25/go-interface-testing/">Golangにおけるinterfaceをつかったテスト技法 | SOTA</a>
めっちゃいいなーと思ったんですが，テスト用 の mock を気軽に作るテクニックはあまり詳しく紹介されてなかったのでそのあたりの１つのテクニックを書きたい．</p>

<h2>前提</h2>

<p>僕もテストフレームワークや外部ツールは全く使わない．標準のtestingパッケージのみを使う．
<a href="https://github.com/stretchr/testify">testify</a> もいらないし， mock するために <a href="https://github.com/golang/mock">gomock</a> も基本はいらない．</p>

<p>とにかくGolangだけで書くのが気持ちがいい，に尽きる．</p>

<h2>テスト用 fake client をつくる</h2>

<p>全体の動くはずのgist: <a href="https://gist.github.com/haya14busa/27a12284ad74477a6fd6ed66d0d153ee">https://gist.github.com/haya14busa/27a12284ad74477a6fd6ed66d0d153ee</a></p>

<p>例えばこういう実装のテストを書くときのことを考えます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>  "context"
</span><span class='line'>  "fmt"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>type GitHub interface {
</span><span class='line'>  CreateRelease(ctx context.Context, opt *Option) (string, error)
</span><span class='line'>  GetRelease(ctx context.Context, tag string) (string, error)
</span><span class='line'>  DeleteRelease(ctx context.Context, releaseID int) error
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type GhRelease struct {
</span><span class='line'>  c GitHub
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func (ghr *GhRelease) CreateNewRelease(ctx context.Context) (*Release, error) {
</span><span class='line'>  tag, err := ghr.c.CreateRelease(ctx, nil)
</span><span class='line'>  if err != nil {
</span><span class='line'>      return nil, fmt.Errorf("failed to create release: %v", err)
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  // check created release
</span><span class='line'>  if _, err := ghr.c.GetRelease(ctx, tag); err != nil {
</span><span class='line'>      return nil, fmt.Errorf("failed to get created release: %v", err)
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  // ...
</span><span class='line'>  return &Release{}, nil
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>type Option struct{}
</span><span class='line'>type Release struct{}</span></code></pre></td></tr></table></div></figure>


<p>GitHub interface をテストでは mock したものを使いたい．そういうときには以下のように mock を作ると便利です．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type fakeGitHub struct {
</span><span class='line'>  // インターフェース埋め込み
</span><span class='line'>  GitHub
</span><span class='line'>  FakeCreateRelease func(ctx context.Context, opt *Option) (string, error)
</span><span class='line'>  FakeGetRelease    func(ctx context.Context, tag string) (string, error)
</span><span class='line'>  // 埋め込みを使うので，例えば DeleteRelease はまだテストしないので mock
</span><span class='line'>  // しない... いうことができる．
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func (c *fakeGitHub) CreateRelease(ctx context.Context, opt *Option) (string, error) {
</span><span class='line'>  return c.FakeCreateRelease(ctx, opt)
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func (c *fakeGitHub) GetRelease(ctx context.Context, tag string) (string, error) {
</span><span class='line'>  return c.FakeGetRelease(ctx, tag)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>fakeGitHub</code> という struct を作成し，インターフェースをとにかく満たすために <code>GitHub</code>
interface を埋め込みます．</p>

<p>そして mock したいメソッドは新たに <code>func (c *fakeGitHub) CreateRelease(...) (...)</code> と
定義しなおし，実装の中身は <code>fakeGitHub</code> に持たせた <code>FakeCreateRelease</code> field に丸投げします．</p>

<p>このようにしてテスト用 mock を作るとそれぞれのテストで簡単に中身の実装を変えられるので大変便利です．</p>

<p>実際にテストしてみる例</p>

<h4>main_test.go</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package main
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>  "context"
</span><span class='line'>  "fmt"
</span><span class='line'>  "testing"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>type fakeGitHub struct {
</span><span class='line'>  // インターフェース埋め込み
</span><span class='line'>  GitHub
</span><span class='line'>  FakeCreateRelease func(ctx context.Context, opt *Option) (string, error)
</span><span class='line'>  FakeGetRelease    func(ctx context.Context, tag string) (string, error)
</span><span class='line'>  // 埋め込みを使うので，例えば DeleteRelease はまだテストしないので mock
</span><span class='line'>  // しない... いうことができる．
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func (c *fakeGitHub) CreateRelease(ctx context.Context, opt *Option) (string, error) {
</span><span class='line'>  return c.FakeCreateRelease(ctx, opt)
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func (c *fakeGitHub) GetRelease(ctx context.Context, tag string) (string, error) {
</span><span class='line'>  return c.FakeGetRelease(ctx, tag)
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func TestGhRelease_CreateNewRelease(t *testing.T) {
</span><span class='line'>  fakeclient := &fakeGitHub{
</span><span class='line'>      FakeCreateRelease: func(ctx context.Context, opt *Option) (string, error) {
</span><span class='line'>          return "v1.0", nil
</span><span class='line'>      },
</span><span class='line'>      FakeGetRelease: func(ctx context.Context, tag string) (string, error) {
</span><span class='line'>          return "", fmt.Errorf("failed to get %v release!", tag)
</span><span class='line'>      },
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  ghr := &GhRelease{c: fakeclient}
</span><span class='line'>
</span><span class='line'>  release, err := ghr.CreateNewRelease(context.Background())
</span><span class='line'>  if err != nil {
</span><span class='line'>      t.Error(err)
</span><span class='line'>      // =&gt; failed to get created release: failed to get v1.0 release!
</span><span class='line'>  }
</span><span class='line'>  _ = release
</span><span class='line'>  // ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以下のような感じで，簡単にテスト用mockの実装を書いて，テストすることができます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fakeclient := &fakeGitHub{
</span><span class='line'>  FakeCreateRelease: func(ctx context.Context, opt *Option) (string, error) {
</span><span class='line'>      return "v1.0", nil
</span><span class='line'>  },
</span><span class='line'>  FakeGetRelease: func(ctx context.Context, tag string) (string, error) {
</span><span class='line'>      return "", fmt.Errorf("failed to get %v release!", tag)
</span><span class='line'>  },
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上記の例では1種類の実装しかテストしてないのであまり恩恵がわかりづらいかも知れないですが，
例えば error が帰ってきたときに正しくエラーハンドリングできてるかとか，
返り値をいろいろ変えたものをいくつか作ってテストする&hellip;といったことが上記のパターンを
使うことによって簡単にできます．Table Testing することも可能．</p>

<p>普通にわざわざstructごと作っていると，例えばテストの関数ないでは struct の method (e.g. <code>func (c *client) Func()</code>)
を定義することができません．</p>

<p>そこで <code>FakeFunc func()</code> というfield を持たせて実装を丸投げすることによって，
簡単にいろんな実装のテスト用 mock を作成してテストができるということの紹介でした．</p>

<h2>まとめ</h2>

<p>僕は最初にこのパターンを教わってなるほどなぁ&hellip;と思ったんですが，いざ世にでてみると(?)
ぜんぜんこのパターンを紹介しているものが見つからなかったので紹介してみました．
(一応どっかの medium の英語記事にこれに似たパターンが紹介されてたのを見た気もする&hellip;)</p>

<p>ぜひ使ってみてください．</p>

<h2>あまり関係ない追記</h2>

<p>この記事の主旨とは関係ないけど，基本的にテスト用ライブラリは使わないとはいえ，
たまににヘルパー関数ほしいなーというケースがあります．</p>

<p>でかい struct をテストで比較するときに，比較自体は <code>reflect.DeepEqual</code> で出来るのだけど，
もし違っていたときにどこが違うかを表示するのが面倒くさいのでヘルパー関数提供してくれるライブラリがほしい&hellip;</p>

<p>某社でgoのテスト書いてたときもこういう大きめのstruct比較するケースでは便利diff表示用ライブラリを
使っていた気がしたんだけど，なんかOSSで見つからない気がする&hellip; prettycmp みたいな名前だった気がするが
どうだったか&hellip; そもそも記憶違いな気もする&hellip;</p>

<p>追記: twitter で教えてもらいましたが <a href="https://github.com/kylelemons/godebug">https://github.com/kylelemons/godebug</a> っぽいです．
便利. <a href="https://godoc.org/github.com/kylelemons/godebug/pretty#Compare">https://godoc.org/github.com/kylelemons/godebug/pretty#Compare</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[reviewdog を飼ってコードレビューや開発を改善しませんか]]></title>
    <link href="http://haya14busa.com/reviewdog/"/>
    <updated>2016-10-24T07:44:34+09:00</updated>
    <id>http://haya14busa.com/reviewdog</id>
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/haya14busa/i/d598ed7dc49fefb0018e422e4c43e5ab8f207a6b/reviewdog/reviewdog.logo.png" alt="reviewdog logo" /></p>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/dc0ccb1e110515ea407c146d99b749018db05c45/reviewdog/sample-comment.png" alt="" /></p>

<p>GitHub: <a href="https://github.com/haya14busa/reviewdog">haya14busa/reviewdog: A code review dog who keeps your codebase healthy</a></p>

<p>英語記事: <a href="https://medium.com/@haya14busa/reviewdog-a-code-review-dog-who-keeps-your-codebase-healthy-d957c471938b#.r3hb734et">reviewdog — A code review dog who keeps your codebase healthy – Medium</a></p>

<p>reviewdog というlinter などのチェックツールの結果を自動で GitHub の Pull Request にコメントしたり，
ローカルでも diff の結果から新たに導入されたエラーだけを表示するようにフィルタリングできるツールを作りました．</p>

<p><a href="https://medium.com/@haya14busa/reviewdog-a-code-review-dog-who-keeps-your-codebase-healthy-d957c471938b#.r3hb734et">英語記事</a> を Medium に書いたし，README も書いたので
日本語記事はまぁいらないかなぁと思ったけど，柄にもなく Vim 関連以外で普通に便利ツールを書いてしまって，これは日本語でも簡単に共有しようかなぁと思いこの記事を書いています．
(とはいえ機能の実現方法として Vim は関係はしてるんですけどね.)</p>

<p>特に和訳とかではなく，英語ではなかなか文章に落としづらかったことをだらだら書こうかと思います．英語は難しい&hellip;
(だらだらと日本語を書いてるので日本語ができてるとは言ってない)</p>

<h2>背景とかきっかけ</h2>

<p>compiler や lint といったコードをチェックするツールはものによっては直さなくてもいいものをレポートすることがありますよね．
例えば Scala の compiler はオプションを与えたらかなりいろんな警告を出してくれますが，
別に直さなくてもいいケースがあるものがあったり， Play framework
で使ってると ルーティングファイルやテンプレートファイルに対して，こちらが直せない警告を
バンバンだしてきたりします．(これはバージョンを上げると直るっぽい?)</p>

<p><a href="https://github.com/golang/lint">golint</a> は <code>-set_exit_status</code> を付けないと問題を見つけても exit status が 1 になりませんが，
これはもともとあくまで コーディングスタイル の問題を見つけるものだという思想からでしょう．</p>

<blockquote><p>Golint differs from govet. Govet is concerned with correctness, whereas golint is concerned with coding style.</p></blockquote>

<p>Go の OSS プロジェクトでは CI で golint の問題があればビルドをFAILにすることが結構多いと思いますが，
本来直さなくてもいいところまで直さなくてはいけなくて消耗したりしていませんか?</p>

<p>去年 Google のインターンで Go 書いてたときは，実際 golint のエラーでテストがfail するとかではなく，
bot が自動でコメントしてくれてあとは勝手に直せという感じで便利でした．</p>

<p>まぁ直さなくてもいい結果は少なくて大抵は直すのですが，直さなくてもいいものはゼロではないです．
コメントで bot に直さなくてもいいものを指摘されたら単に無視してcloseすればいいので無駄に消耗せずにすんで便利．</p>

<p>また CI で落とすために指摘してくれると便利なことは多いけど設定で off にしてしまうケースもあるかなーと思います．
例えば JavaScript で関数の引数に使ってないものがあったら警告してくれると便利なケースもあるかなぁーという反面，
コールバック用関数などでは渡ってくるのがわかってるからいいんだよ！というケースとか．</p>

<p>あとは既存のコードベースに新しく linter を導入しようとすると，既存のコードに対してエラー
出まくって導入するために直していくのが面倒だなぁ&hellip; 放置していると新しいコードに対しても
lint が走らないので消耗する&hellip;ということもあるかと思います．</p>

<p>上記の問題を解決する1つの方法としては，とりあえずPull Request の差分に関して lint をかけたり
して自動でbotがコメントしてくれる仕組みがあれば，100% 円満解決ではなくともかなりつらみが
解消されるかと思います．</p>

<p>世の中にはすでにそういうサービスは一応あって <a href="https://houndci.com/">Hound CI</a>
とか <a href="https://sideci.com/">SideCI</a> がそうなんですが，使える言語やツールは限られています．
たとえば Vim の linter を Vim プラグインのレポジトリに対して使えるようになることはないでしょう.</p>

<p>また，ローカルでも(差分に対して lint などを書けるという意味で)実行できないと Pull Request 出さないとチェックできないので不便です．</p>

<p>ということで作ったのが <a href="https://github.com/haya14busa/reviewdog">reviewdog</a> になります．</p>

<p>あんまり技術的に面白いことがあったというよりは，本来あるべきものなのになかったので作ったという感じ．
汎用的に lint の結果をパースする手段をどのツールも提供してるものがないのが問題で，
reviewdog は Vim の Quickfix 用の &lsquo;errorformat&rsquo; という機能を Go で port することによって実現しました．</p>

<p>GitHub: <a href="https://github.com/haya14busa/errorformat">haya14busa/errorformat: Vim&rsquo;s quickfix errorformat implementation in Go</a></p>

<p>&lsquo;errorformat&rsquo; 形式を採用したのは僕が単に Vimmer だから&hellip; というのももちろんあるんですが，
仕様の全体を理解するのは結構大変とはいえ，簡単なerrorformatを書くのは簡単だし，それでいて
難しい複数行のエラーメッセージをパースできる利点があります．</p>

<p>emacs では compilation モードが Vim の quickfix に対応するようで，errorformat に対応するものは
正規表現とサブマッチのインデックスっぽいのですが，簡単な複数行エラーには対応してそうですが，
Vim の &lsquo;errorformat&rsquo; のほうが汎用的っぽいなーと思いました(詳しく見れてません)</p>

<p>&lsquo;errorformat&rsquo;, 実装ポーティングして仕様を理解していくと，かなりよくできているなーという印象で
Vim は時代の先を走ってると思いました．</p>

<p>また reviewdog 以外でも <a href="https://github.com/alecthomas/gometalinter">https://github.com/alecthomas/gometalinter</a> のもっと汎用的なバージョンを言語を問わず
errorformat を使って作るとかも可能なんじゃないかな〜と思います．(gometalinter 個人的にあんまり好きくないし)</p>

<h2>インストールとか使い方書こうかと思ったけど疲れたのでREADMEとか英語のpost読んでください</h2>

<ul>
<li><a href="https://github.com/haya14busa/reviewdog">haya14busa/reviewdog: A code review dog who keeps your codebase healthy</a></li>
<li><a href="https://medium.com/@haya14busa/reviewdog-a-code-review-dog-who-keeps-your-codebase-healthy-d957c471938b#.r3hb734et">reviewdog — A code review dog who keeps your codebase healthy – Medium</a></li>
</ul>


<p>あと雑だけど Google Doc の design doc な何かも一応ある <a href="https://docs.google.com/document/d/1mGOX19SSqRowWGbXieBfGPtLnM0BdTkIc9JelTiu6wA/edit#">reviewdog - Google Docs</a></p>

<h2>CI サービス連携問題</h2>

<p>reviewdog は Pull Request hook と実行環境さえあれば対応できてオープンなCIサービスの場合はGitHubへコメントするための
API トークンを安全に環境変数などで保存する方法があれば対応できます．</p>

<p>travis や circle ci といったメジャーなCIサービスは両方対応していて，最初は全然このあたりは問題ではないなーと思ってたのですが，
実はOSS用のリポジトリに対して使おうとすると fork レポジトリからの pull-request では暗号化された環境変数は使えない!
という問題があって，これどうすかなぁーということにかなり悩まされました．
考えてみれば当たり前で，<code>echo $SECRET_VAR</code> とかした悪意あるPull Request が開かれたら簡単に漏れちゃいます．</p>

<p>そこで，いろいろ CI サービスを探ってると <a href="https://drone.io/">https://drone.io/</a> の OSS バージョン
<a href="https://github.com/drone/drone">https://github.com/drone/drone</a> を見つけました．</p>

<p>help (<a href="http://readme.drone.io/usage/secrets/">Secrets · Drone</a>) を読むと，
yaml ファイルのチェックサムとセクション分けによって(完璧ではないものの)安全に
秘密の環境変数をforkからのプルリクでも使えるようになっているようです．
完全に便利なので travis とか circle ci でもこの機能ほしい&hellip;</p>

<p>drone.io OSS バージョンは <a href="https://drone.io/">https://drone.io/</a> とは別物という感じで環境変数の扱い以外も
結構便利っぽく，drone.io も reviewdog はデフォルトでサポートしました．</p>

<p>ただ OSS で雑にGitHubに上げたサービスに対して使うケースでも drone.io
をどこかにホスティングしなくてはならないのが不便なところです&hellip;
個人的にはreviewdogのために Degital Ocean に月500円で drone.io 用サーバを立ててみて，
今の所かなり便利感ありますが，ワガママをOSS用にどっかホスティングしてほしい.</p>

<p>で，じゃあ結局forkからのPull Requestも受け付けるOSS用リポジトリにreviewdog導入
したい場合どうすればいいかというと，現状は Circle CI の <a href="https://circleci.com/docs/fork-pr-builds/#unsafe-fork-pr-builds">Building Pull Requests from forks - CircleCI</a>
機能をセキュリティリスクと引き換えに ON にするしかないかなーという感じです．</p>

<p>GitHub の Personal Access Token, しかも scope を適切に <code>public_repo</code> とかに設定しておけば，
もし漏れても大したことはできないはずだし，rebokeもできるし，fork して悪意あるPull Request 作られたら流石に気付くし，
まぁそもそもそんなこと GitHub の 権限すくないPersonal Access Token 得るためにやる人は
少ないのでは&hellip; という感じですね．ただ使う場合はもちろん自己責任でお願いします．</p>

<p>Circle CI か travis あたりが drone.io みたいに yaml のチェックサム+環境変数が使えるスコープを制限する機能がもし実装されたらそれを使っていきたい</p>

<p>(ところで他のCIサービスとして wrecker 試したんですが，fork からの pull-request で普通に秘密の環境変数使えてしまった気がする&hellip;問題では&hellip;あとPull Request hook によるビルドがなさそうだった)</p>

<h3>終わりに</h3>

<p>reviewdog 完全に便利という感じなのでぜひ使ってみてください〜</p>

<p>CI 用環境変数とか設定すれば Jenkins とかいろんな環境で導入できるはずだし，
一度導入したら撤退しずらいとかもないので，ギョームとかでも使えるような気がしますが
リリース直後なのでいろいろ変わるかも知れないしそのへんはよしなにお願いします．
GitHub Enterprise とか BitBucket 対応は気が向いたらするかもしれない．
特にGitHub Enterprise はGitHub 用の base の url 変えるだけで対応できる&hellip;?</p>

<p>ちょくちょく気になるところはあるのでちまちま改善していこうかなーと思います</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はてな・ペパボ技術大会〜インフラ技術基盤〜@京都 行ってきたメモ]]></title>
    <link href="http://haya14busa.com/hatena-pepabo-kyoto/"/>
    <updated>2016-07-02T20:06:46+09:00</updated>
    <id>http://haya14busa.com/hatena-pepabo-kyoto</id>
    <content type="html"><![CDATA[<h2>はてな・ペパボ技術大会〜インフラ技術基盤〜@京都 7/2</h2>

<p><a href="http://hatena.connpass.com/event/33521/">はてな・ペパボ技術大会〜インフラ技術基盤〜@京都 - connpass</a></p>

<p>行ってきました．メモってたのでせっかくなので共有しておきます．
gistでいいかとおもったけどスライド埋め込みとか考えたらブログに雑に投げたほうが見なおしやすそうと思ったのでブログで．
自分で発表したわけでもないし，感想とか書いてるわけでもないけどまぁいいかってカンジ．</p>

<h2>注意</h2>

<p>わかってない人が書いたメモなのでいろいろわかってないメモが書かれてます．
理解度に関係なく聞き漏らしたところ雑に書いたりしてるので発表様がおっしゃってた話とちがうところもあるかもしれない．
特に座談会の内容とかは Twitterのハッシュタグみてたら <a href="https://twitter.com/matsumotory">@matsumotory</a> さんと <a href="https://twitter.com/yumu19">@yumu19</a> さんがまとめてたのでそっち見たほうがわかりやすいかも．</p>

<h3>Togetter</h3>

<p><del><a href="http://togetter.com/li/994969">http://togetter.com/li/994969</a></del></p>

<p><del>ということで雑にtogetterつくっておきました．#pepabohatena で検索したやつからスパム2-3個消しただけです．
そういえばtogetterだめな人とかいるかもじゃん&hellip;!ということに気づいたんですが全員に連絡するの流石につらいのでダメなひと
<a href="https://twitter.com/haya14busa">@haya14busa</a> まで連絡していただければ幸いです．勝手に使って申し訳ないでした :bow: </del></p>

<p>記事書いてる間に @yumu19 さんが作ってた -> <a href="http://togetter.com/li/994986">はてな・ペパボ技術大会〜インフラ技術基盤〜@京都 #pepabohatena ツイートまとめ - Togetterまとめ</a></p>

<h3>タイムテーブル</h3>

<table>
<thead>
<tr>
<th>time </th>
<th> 名前 </th>
<th> タイトル </th>
<th> 時間</th>
</tr>
</thead>
<tbody>
<tr>
<td>13:30 </td>
<td>  </td>
<td> 受付開始・開場 </td>
<td> 30分</td>
</tr>
<tr>
<td>14:00 </td>
<td> y_uuki(はてな) </td>
<td> 開会宣言・会場説明 </td>
<td> 5分</td>
</tr>
<tr>
<td>14:05 </td>
<td> y_uuki(はてな) </td>
<td> はてなにおけるLinuxネットワークスタックの性能改善 </td>
<td> 25分</td>
</tr>
<tr>
<td>14:30 </td>
<td> matsumotory(ペパボ) </td>
<td> Webサービス基盤の自律制御と動的平衡性 </td>
<td> 25分</td>
</tr>
<tr>
<td>14:55 </td>
<td>  </td>
<td> 休憩 </td>
<td> 5分</td>
</tr>
<tr>
<td>15:00 </td>
<td> ichirin2501(はてな) </td>
<td> 計算量と僕とWeb開発 </td>
<td> 25分</td>
</tr>
<tr>
<td>15:25 </td>
<td> pyama(ペパボ) </td>
<td> STNS 〜点と線を結び新しい何かを作るコト〜 </td>
<td> 25分</td>
</tr>
<tr>
<td>15:50 </td>
<td>  </td>
<td> 休憩 </td>
<td> 5分</td>
</tr>
<tr>
<td>15:55 </td>
<td> masayoshi(はてな) </td>
<td> 負荷分散技術を選ぶ時に考えること </td>
<td> 25分</td>
</tr>
<tr>
<td>16:20 </td>
<td> monochromegane(ペパボ) </td>
<td> サービスに寄り添うログ基盤 - ログ収集のその先に - </td>
<td> 25分</td>
</tr>
<tr>
<td>16:45 </td>
<td>  </td>
<td> 休憩 </td>
<td> 10分</td>
</tr>
<tr>
<td>16:55 </td>
<td> masayoshi(はてな) taketo957(はてな) alotofwe(ペパボ) hanazuki(ペパボ) モデレータ stanaka(はてな) </td>
<td> 若手インフラ座談会 </td>
<td> 40分</td>
</tr>
<tr>
<td>17:35 </td>
<td>  </td>
<td> 懇親会 軽食と飲み物を用意しています！ </td>
<td></td>
</tr>
<tr>
<td>19:00 </td>
<td>  </td>
<td> お開き</td>
<td></td>
</tr>
</tbody>
</table>


<h2>開会宣言・会場説明</h2>

<p>14:00 | y_uuki(はてな) | 開会宣言・会場説明 | 5分</p>

<ul>
<li>発表6本+座談会</li>
<li>アンケート</li>
</ul>


<h2>はてなにおけるLinuxネットワークスタックの性能改善</h2>

<p>14:05 | y_uuki(はてな) | はてなにおけるLinuxネットワークスタックの性能改善 | 25分</p>

<p><a href="https://speakerdeck.com/yuukit/linux-network-performance-improvement-at-hatena">はてなにおけるLinuxネットワークスタックパフォーマンス改善 / Linux network performance improvement at hatena // Speaker Deck</a></p>

<script async class="speakerdeck-embed" data-id="1c0ab465dca74bc7b0f955cb6955ba8a" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>はてなのウェブオペレーションエンジニア．新卒1年目の仕事</li>
<li>今は3年目</li>
<li>3層構成 LB <-> proxy <-> application <-> database</li>
<li>ボトルネックどこ?

<ul>
<li>CPU: %user/%sys/%iowait</li>
<li>Mem: used/cached/buffer</li>
<li>Disk: read/write</li>
<li>NW: tx/rx/tx</li>
</ul>
</li>
<li>ソフト割り込み(パケット受信)の負荷が高いときの話 (%soft)</li>
<li>ネットワークスタック

<ul>
<li>ネットワークi/oを実現するために必要な要素群．低レイヤより

<ul>
<li>NIC/パケット送受信/etc&hellip;</li>
</ul>
</li>
</ul>
</li>
<li>ネットワークI/O 高速化</li>
<li>パケット受信フロー  NIC -> Kernel -> Process

<ul>
<li>この辺の話かな? <a href="https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/6/html/Performance_Tuning_Guide/s-network-packet-reception.html">8.3. パケット受信の概要</a></li>
<li><img src="https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/6/html/Performance_Tuning_Guide/images/packet-reception.png" alt="" /></li>
<li>NIC: 物理デバイス</li>
<li><a href="https://ja.wikipedia.org/wiki/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%AB%E3%83%BC%E3%83%89">ネットワークカード - Wikipedia</a></li>
<li>NIC ->(ハード割り込み) -> パケット受信 -> プロトコル処理 -> データ受信処理 -> Process</li>
<li>割り込み2種類ある．なぜか?</li>
<li>ハード割り込みだけだとパケット受信のたびにプロトコル処理まで実行しちゃう</li>
<li>なので一旦バッファにいれる．ソフト割り込み</li>
</ul>
</li>
<li>NAPI (New API)

<ul>
<li>1パケットずつでなく複数パケットごとに割り込み</li>
<li>ポーリングによってとってくる．待ち時間発生するので負荷が高い時だけやるみたいに賢くなってる</li>
<li>ソフト割り込みを減らす</li>
</ul>
</li>
<li>HAProxy の台数増問題 (実際に取り組んだやつ)</li>
<li>割り込みが多い -> 割り込み減らしたい</li>
<li>HAProxy のネットワーク負荷が高いのでHAProxyを DNS RR で並べた</li>
<li>Interrupt Coalescing

<ul>
<li>ハード割り込みを減らす</li>
</ul>
</li>
<li>NICドライバのパラメータ検証した</li>
<li>RPS (Receive Packet Steering)

<ul>
<li>コア間割り込み</li>
</ul>
</li>
<li>RPS でRedisチューニング

<ul>
<li>Redisは1スレッド</li>
<li>カーネルのネットワークI/O処理するスレッドと Redisのスレッドは分散可能</li>
<li>-> CPU% 10% 減 (コンテキストスイッチが減ったり，キャッシュが効くようになったからっぽい)</li>
<li>redisの公式ページにやりかた書いてある <a href="http://redis.io/topics/benchmarks">http://redis.io/topics/benchmarks</a></li>
</ul>
</li>
<li>ユーザランドへゼロコピー

<ul>
<li>そもそもカーネルに処理しないという変態処理．</li>
<li>パケットを NIC -> ユーザランドへバイパス</li>
<li>実装: netmap</li>
<li>まだ実用ではなさそうだけど研究されてる</li>
<li>ソケットAPIの限界

<ul>
<li>ソケットAPIではゼロコピーできない</li>
</ul>
</li>
</ul>
</li>
<li>まとめ

<ul>
<li>OSの内部面白い．OS内部の技術の外出し</li>
<li>ソフト割り込みにより遅延処理</li>
<li>ジョブキューのような非同期処理</li>
<li>割り込みとポーリング</li>
<li>OSの技術をもうちょっと上のレイヤの技術に応用してやったりするのベンリ</li>
</ul>
</li>
</ul>


<h2>Webサービス基盤の自律制御と動的平衡性</h2>

<p>14:30 | matsumotory(ペパボ) | Webサービス基盤の自律制御と動的平衡性 | 25分</p>

<script async class="speakerdeck-embed" data-id="60124a9e42bf4939b3d64687ef266d5c" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>@matsumotory <a href="http://research.matsumoto-r.jp/">松本亮介の研究・開発業績ページ by matsumoto-r</a></li>
<li>技術基盤チームで研究開発してる</li>
<li>目次

<ul>
<li>なめらかなシステム</li>
<li>Webサービスの現状・課題</li>
<li>自立制御</li>
<li>動的平衡性</li>
</ul>
</li>
<li>なめらかなシステム

<ul>
<li>システムにとってのユーザ，システムを構成するサーバ等の要素のカテゴリや特徴を詳細に認識する</li>
<li>人間の労苦は避けたい</li>
</ul>
</li>
<li>Webサービスの現状・課題

<ul>
<li>bad UI / 遅い / etc&hellip; -> 快適に利用できるのが当たり前</li>
<li>サーバの運用大変

<ul>
<li>高負荷・障害対応</li>
<li>問い合わせ</li>
<li>バジョンアップ</li>
<li>監視</li>
<li>新規構築</li>
</ul>
</li>
</ul>
</li>
<li>監視に注目してみる

<ul>
<li>閾値設定はムズカシイ</li>
<li>1時的な高負荷は無視したい．すぐもどるならok</li>
<li>傾向が変わるならすぐ知りたい</li>
<li>正常にみえるけど異常っぽいものを検知したい</li>
<li>段階的な傾向の変化を検知したい．階段みたいな．でも1時的なものは無視</li>
</ul>
</li>
<li>詳細な変化と原因を知るには人の目が必要．でも自動で制御したい

<ul>
<li>人は何をみてるか? 対象の振る舞いをみてる</li>
<li>振る舞いを表す特徴が知りたい!</li>
<li>人工知能でやれるか</li>
</ul>
</li>
<li>考え方

<ul>
<li>特徴がある</li>
<li>通常の状態を学習</li>
<li>外れた状態を解析</li>
<li>連速的に外れた状態が異常のはじまり</li>
</ul>
</li>
<li>各種基盤技術

<ul>
<li>[x] 設定をプログラム化</li>
<li>[x] リソース制御連携</li>
<li>[ ] 特徴量定義と解析 &lt;- ここ</li>
</ul>
</li>
<li>特徴量解析

<ul>
<li>変化点検出やクラスタリングなど研究はされている</li>
<li>mruby-changefinder <a href="https://github.com/matsumoto-r/mruby-changefinder">matsumoto-r/mruby-changefinder: ChangeFinder class detect change points via continuous outlier and smoothing.</a></li>
<li>複数データの関係性を得る</li>
</ul>
</li>
<li>Webサーバの自律制御

<ul>
<li>特徴量抽出による検知できる点の増加</li>
<li>閾値以下でも傾向変化の細かい検知ができる</li>
</ul>
</li>
<li>細かい傾向変化した時点でどうするか?

<ul>
<li>異常検知．誤検知もある．false positive/negative?</li>
<li>すぐ制限とかは影響でかい</li>
<li>なんかアクションはとりたい</li>
<li>システムとしてバランスを取りたい条件ある

<ul>
<li>マルチテナント環境とする．</li>
<li>リソースが逼迫してきたのみ制限かけたい．自動で制限したい．</li>
<li>グラフなめらかにしたい．</li>
</ul>
</li>
<li>e.g.

<ul>
<li>どのホストが変化点スコアが高い?</li>
<li>重み付け (優先順位つける) example.com:95, matsumoto-r.jp:93, &hellip;</li>
<li>傾向変化ごとに重みつけリスト更新</li>
<li>全リソースが逼迫 -> リストを元に自動制御</li>
<li>逼迫してないなら重みつけリストをつくるところだけしとく</li>
</ul>
</li>
<li>時系列データの生成

<ul>
<li>相関関係の時系列データも作れる</li>
<li>全体の負荷とホストの負荷どっちか</li>
</ul>
</li>
</ul>
</li>
<li>要素技術

<ul>
<li>機能拡張 mod_mruby</li>
<li>mruby-resource</li>
<li>mruby-changefineder</li>
<li>etc&hellip;</li>
</ul>
</li>
<li>制限の実装方法

<ul>
<li>リクエスト単位でCPU/IOなどの割当を変更</li>
<li>cgroup/rlimit</li>
<li>e.g. 特定のcgroupにリクエストをアタッチしてCPUを20%に制限する．レスポンス返したらデタッチ</li>
</ul>
</li>
<li>ミドルウェアが特徴量抽出解析・制限行いたい</li>
<li>webサービスの動的平衡性

<ul>
<li>生命とは? 動的平衡にある流れ</li>
<li><blockquote><p>動的平衡（どうてきへいこう、英語：dynamic equilibrium）とは、物理学・化学などにおいて、互いに逆向きの過程が同じ速度で進行することにより、系全体としては時間変化せず平衡に達している状態を言う。
&ndash; <cite><a href="https://ja.wikipedia.org/wiki/%E5%8B%95%E7%9A%84%E5%B9%B3%E8%A1%A1">動的平衡 - Wikipedia</a></p></blockquote></li>
<li><a href="https://ja.wikipedia.org/wiki/%E7%B4%B0%E8%83%9E%E5%91%A8%E6%9C%9F%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88">細胞周期チェックポイント - Wikipedia</a>

<ul>
<li>細胞: さーば</li>
<li>動的平衡: サーバの構築と破壊</li>
<li>Web サービス基盤を生命のように扱う

<ul>
<li>異常・エントロピー増大からは逃れられない</li>
<li>自分で自らを破壊・増殖・再構築していく</li>
<li>一つ一つの細胞の調子わるいな?とかは僕らだってみてない．1部変でも全体としては大丈夫．</li>
</ul>
</li>
<li>詳しくは: <a href="https://speakerdeck.com/matsumoto_r/namerakad-idea-design">なめらかなシステムのアイデアと設計概要 / namerakad-idea-design // Speaker Deck</a>
<script async class="speakerdeck-embed" data-id="51e39a56e84e4b79a957f653b8c941d0" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script></li>
</ul>
</li>
</ul>
</li>
<li>今後: STNS/haconiwa, &hellip;</li>
<li>Q&amp;A:

<ul>
<li>フォールトトレランスとの違い?

<ul>
<li>現時点はそこまで．循環するパターン．状態を持つサーバと持たないサーバがある．この辺とかの落とし所を考えてる</li>
</ul>
</li>
<li>from yuuki: Docckerとかで動的にスケールしてるけど，違うアプローチっぽい．どう違う? キューバネティスとか?

<ul>
<li>こちらはサーバを積極的に，自主的に落として循環していくといった部分が違う．元気なサーバでも任意の時間経過で落としたり．</li>
</ul>
</li>
<li>from astj: バースト．イベントやyahoo砲とかのバズり，が怖い．これを異常検知するのはむずくてなかなか考えても答えが出ない．自律制御のスピード超えてバースト来たらどうする?

<ul>
<li>全体的にはバーストに対応したい．落とす条件．3時間で落ちそうなやつが1.5時間で落ちたなら1つではく2つのVMを再構築するといった方法あるかも．落としたときに条件によって10倍再構築するとか．</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>netflix とかも似たようなことやってる感じらしい?</p>

<p>mackerel で出来たりしたら最高だな〜と思った．</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">なめらかなシステムのシミュレーションはこれを見るとわかりやすいです <a href="https://t.co/PK3jn4cJvi">https://t.co/PK3jn4cJvi</a> <a href="https://twitter.com/hashtag/pepabohatena?src=hash">#pepabohatena</a></p>&mdash; 松本 亮介 / まつもとりー (@matsumotory) <a href="https://twitter.com/matsumotory/status/749135118095163394">July 2, 2016</a></blockquote>


<h2>計算量と僕とWeb開発</h2>

<p>15:00 | ichirin2501(はてな) | 計算量と僕とWeb開発 | 25分</p>

<ul>
<li>@ichirin2501 いちりんちゃんさん

<ul>
<li>アプリケーションエンジニア2年 ->(転職) web オペレーションエンジニア1年(hatena)</li>
<li>スピリチュアルな発表!</li>
</ul>
</li>
<li>もくじ

<ul>
<li>計算量について</li>
<li>mysql クエリ改善</li>
</ul>
</li>
<li>計算量とは?

<ul>
<li>大変さの指標．</li>
<li>係数無視 O(3n<sup>3</sup>) -> O(n<sup>3</sup>)</li>
<li>でかいやつだけ O(n<sup>3</sup> + n<sup>2</sup>) -> O(n<sup>3</sup>)</li>
</ul>
</li>
<li>計算量といちりんちゃん

<ul>
<li>競プロで向き合う．</li>
<li>計算量と時間の基準・感覚がある</li>
<li>O(10<sup>7</sup>) ~ O(10<sup>9</sup>) 0 -> 1s くらいじゃん?みたいな感じ</li>
<li>データサイズからの見積もり

<ul>
<li>1sec デッドラインの見積もりならこんな感じやろ的な．</li>
<li>n &lt;= 10<sup>6</sup> -> O(n)</li>
<li>n &lt;= 10<sup>5</sup> -> O(nlogn)</li>
<li>n &lt;= 3000 -> O(n<sup>2</sup>)</li>
<li>n &lt;= 100 -> O(n<sup>3</sup>)</li>
<li>n &lt;= 20 -> O(2<sup>n</sup>)</li>
</ul>
</li>
</ul>
</li>
<li>MySQL 改善のはなし

<ul>
<li>group by / distinct の迷い．どっちでも重複除外できるので実現可．

<ul>
<li>follow/followerテーブル的なものを想定</li>
<li>friend_id 重複なしで 1000件ほしい</li>
<li>結果を言うと group by だと遅いケースがあった</li>
<li>group_by で OR句のuser_idが多いと異常におそくなった</li>
<li>どう計算してるか知ればいいじゃん</li>
</ul>
</li>
<li>インデックス構造

<ul>
<li>インデックス B+tree</li>
<li>主キーのインデックス clustered index</li>
<li>主キー以外のインデックス secondary index (主キーがこれでわかる)</li>
<li>B+tree はleafが連結リスト．rangeで検索とかのときにベンリ</li>
<li>例とか．この辺発表の図をみるとわかりやすくてベンリ</li>
</ul>
</li>
<li>話をもどしてfriend_id. なぜ遅いのか?

<ul>
<li>オーダーが違うかも</li>
<li>意図してないインデックスで検索してるかも -> オーダー線形なってるかも</li>
</ul>
</li>
<li>結論そうだった

<ul>
<li>explainするとわかる</li>
<li>オプティマイザが間違った判断してた(あるある．経験則). distinct だと解決した</li>
<li>経験則やexplain使わなくても計算量と時間の感覚でどこがまずそうかわかることもあるよ!

<ul>
<li>ミドルウェアのどのへんが悪いかとか計算量の感覚やインデックスの使われ方を理解して推測したり出来るとベンリ</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Redis の話

<ul>
<li>redis とか

<ul>
<li>kvs nosql(ほかにもグラフデータベースとかあるよねー)</li>
<li>list/set/sorted sets(rankingの実装らくとか)/etc .. データ構造いっぱいあってベンリ</li>
<li>メモリ最適化 2.2 から入ってる．勝手に圧縮してもらえる

<ul>
<li>-> パラメータ眺めてオーダーとか変わったりするのでは?と推測</li>
</ul>
</li>
</ul>
</li>
<li>怪しいのでパラメータ変えて実際試す

<ul>
<li>データ数と実行時間からオーダーわかる</li>
<li>データ数10kで1 sec超えるのオカシイのではと気づく．</li>
</ul>
</li>
<li>やっぱり -> データ構造違ってた

<ul>
<li>ドキュメントに実は書かれてたりも．</li>
</ul>
</li>
</ul>
</li>
<li>まとめ

<ul>
<li>知識だけじゃなく感覚を身に着けてるとすぐわかったりしてベンリ．現場で検証しまくるとかできなかたったりするし．</li>
<li>まつもとりーさんも言ってたが快適にウェブサービス使えるのは当たり前だし，この辺にコミットするために計算量ベンリ</li>
</ul>
</li>
<li>Q&amp;A

<ul>
<li>from yuuki: このへんミスったりすると自律制御したりしても一瞬でリソース食いつぶしたりするし，このへん自律制御するのどうするかとかもおもしろそう</li>
</ul>
</li>
</ul>


<p>べんり <a href="http://gigamaker.jimdo.com/">ホーム - 鳥獣戯画制作キット</a></p>

<p>計算量の感覚大事．</p>

<h2>STNS 〜点と線を結び新しい何かを作るコト〜</h2>

<p>15:25 | pyama(ペパボ) | STNS 〜点と線を結び新しい何かを作るコト〜 | 25分</p>

<ul>
<li>やましたさん． @pyama86

<ul>
<li>ムームードメインやってる</li>
</ul>
</li>
<li>Linux のユーザ管理

<ul>
<li>いつから LDAP 主流だと錯覚してい(ry</li>
</ul>
</li>
<li>最近のユーザ管理

<ul>
<li>root おおい．</li>
</ul>
</li>
<li>rootは問題あるよね

<ul>
<li>セキュリティ事故の追跡</li>
<li>sudo権限の分離</li>
<li>userの追加削除管理困難．追加でポリシーのため他のサーバにも足す&hellip;とかやるとこまる．</li>
<li>rootはアブナイ!!!</li>
</ul>
</li>
<li>でもなぜやってしまうか

<ul>
<li>なにかあったときしか困らない</li>
<li>まぁLDAP構築たいへんだよねとかある．</li>
</ul>
</li>
<li>STNS で解決!

<ul>
<li><a href="https://github.com/STNS/STNS">STNS/STNS: Simple Toml Name Service</a></li>
<li>名前解決/公開鍵取得/アカウント認証のみを提供．LDAPはいろいろできすぎて困る．</li>
<li>ls -ltr の名前は実はid. pyama -> id:1000 ．これが名前解決</li>
</ul>
</li>
<li>デプロイユーザの管理できる

<ul>
<li>capistorano とか公開鍵たしてsshでやるよね．authorized_keys 管理だるくなるよね．</li>
<li>stnsだとスッキリ!誰がdeployできるか一目瞭然でよい．</li>
</ul>
</li>
<li>組織構造を表現できる

<ul>
<li>group</li>
</ul>
</li>
<li>シュッとインストールできるよ! 2.5min</li>
<li>事例

<ul>
<li>pepaboさん事例．ユーザ管理もgithub flowで. ghe でpr -> droneでテスト &amp; レビュー -> deploy</li>
<li>承認してマネージャーが承認して&hellip;とかめんどくてそれ解決できてベンリ．エンジニアで管理</li>
<li>ghe で全部管理できるので入退社管理とかも楽</li>
</ul>
</li>
<li>プロダクトを運用すること

<ul>
<li>ヒントとなった技術からアイデア得たり</li>
<li>mackerelのtomlとかgo使ってるやつ参考にしたり</li>
<li>linuxで利用可能な共通ライブラリがgo1.5から作れるようになってこれがでかい．Cを書かなくてもLinuxのシステムに手を入れられる</li>
<li>自分が開発者だし自分がSTNSを最高にできる!!!</li>
</ul>
</li>
</ul>


<p>LDAP とかユーザ管理あんまり関わってないけど便利そうだった．良い話きけて良い．</p>

<ul>
<li>Q&amp;A:

<ul>
<li>from yuuki: hatena は LDAP だけどSTNSよさそう!</li>
</ul>
</li>
</ul>


<h2>負荷分散技術を選ぶ時に考えること</h2>

<p>15:55 | masayoshi(はてな) | 負荷分散技術を選ぶ時に考えること | 25分</p>

<p><a href="https://speakerdeck.com/masayoshi/fu-he-fen-san-ji-shu-woxuan-butokinikao-erukoto-1">負荷分散技術を選ぶときに考えること // Speaker Deck</a></p>

<script async class="speakerdeck-embed" data-id="4069267887dd401c93e8fe6b1de08f34" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>masayoshi @yoyogidesaiz

<ul>
<li>新卒．めでたい．</li>
<li>SDN(Software-Defined Networking) 大学でやってた <a href="http://e-words.jp/w/SDN.html">SDNとは｜Software-Defined Networking - 意味/定義 ： IT用語辞典</a></li>
</ul>
</li>
<li>負荷分散技術の概要

<ul>
<li>データセンター分散したり</li>
<li>ロードバランサーでbackend web分散したり</li>
<li>サーバ内/ロールごと/サーバごと のだいたい3つの分散ある</li>
</ul>
</li>
<li>サーバ内リソースの負荷分散

<ul>
<li>ハードウェア機能: hyper-threading, raid0</li>
<li>ハードウェア意識のOSの負荷分散: numa, rss/rfs/rps</li>
<li>OS意識のアプリケーションの作り方: fork()/clone() などのシステムコール</li>
<li>Numa <a href="https://ja.wikipedia.org/wiki/NUMA">NUMA - Wikipedia</a>

<ul>
<li><blockquote><p>NUMA（Non-Uniform Memory Access、ヌマ）とは、共有メモリ型マルチプロセッサコンピュータシステムのアーキテクチャのひとつで、複数プロセッサが共有するメインメモリへのアクセスコストが、メモリ領域とプロセッサに依存して均一でないアーキテクチャである
&ndash; <cite><a href="https://ja.wikipedia.org/wiki/NUMA">NUMA - Wikipedia</a></p></blockquote></li>
</ul>
</li>
<li>application

<ul>
<li>fork() プロセス</li>
<li>clone() スレッド</li>
<li>select() プロセス &lt;- x (io多重化とかに影響するだけでCPUには影響しない?)</li>
<li>このへんいろいろ理解してアプリケーションコードかく! (なるほど)</li>
</ul>
</li>
</ul>
</li>
<li>ロールごとの分散

<ul>
<li>proxy/web/db などのロールの分散</li>
<li>proxyでキャッシュしたり，全部のリクエストがdbまで到達しないようにとか</li>
<li>キャッシュ

<ul>
<li>ユーザに近いところで返す</li>
<li>キャッシュヒットしなくて破綻とか実装に無理があったりとかもする．</li>
<li>-> 使いどころを見極める．キャッシュは麻薬</li>
</ul>
</li>
</ul>
</li>
<li>サーバごとの負荷分散

<ul>
<li>この辺がインフラエンジニアに特にやりがいあったり</li>
<li>拠点ごとに分散．</li>
<li>load balancerでパケットを分散</li>
<li>負荷分散技術を実現するために分散システムの考え方を参考にしたり</li>
<li>透過性: <a href="https://ja.wikipedia.org/wiki/%E9%80%8F%E9%81%8E%E6%80%A7_(%E6%83%85%E5%A0%B1%E5%B7%A5%E5%AD%A6">透過性 (情報工学) - Wikipedia</a>)</li>
<li>DNSラウンドロビン

<ul>
<li>位置透過性を実現</li>
</ul>
</li>
<li>ロードバランサ

<ul>
<li>位置透過性実現</li>
<li>ヘルスチェックできる</li>
<li>でもネットワークの制限受けたり</li>
</ul>
</li>
<li>Proxy

<ul>
<li>haproxy/nginxなど</li>
<li>ヘルスチェックできるし位置透過性も高い</li>
</ul>
</li>
<li>分散先ノードのヘルスチェック

<ul>
<li>監視: how?</li>
<li>異常(どんな?)のあるノードを削除</li>
</ul>
</li>
<li>ヘルスチェックむずい．

<ul>
<li>OK返してるの本当ok? 中身見たら実はngとか</li>
<li>ビザンチン将軍問題．<a href="https://ja.wikipedia.org/wiki/%E3%83%93%E3%82%B6%E3%83%B3%E3%83%81%E3%83%B3%E5%B0%86%E8%BB%8D%E5%95%8F%E9%A1%8C">ビザンチン将軍問題 - Wikipedia</a></li>
<li>Gossip protocol <a href="http://www.slideshare.net/winebarrel/ss-10433600">ゴシッププロトコルによる冗長化と負荷分散の検証</a></li>
<li><a href="http://qiita.com/hshimo/items/b7c0e0f12b7363e2e333">分散型コンセンサス・アルゴリズム プロトコル まとめ - Qiita</a></li>
</ul>
</li>
<li>ロードバランサの耐障害性

<ul>
<li>冗長化技術であって負荷分散技術ではない</li>
</ul>
</li>
</ul>
</li>
<li>まとめ

<ul>
<li>負荷分散の仕方まとめ</li>
<li>必要以上に複雑にしない．コスト増とかもある．simple is best</li>
<li>本当に必要なのか最高する</li>
<li>オープンソースカンファレンスはてなでブースだす． <a href="http://www.ospn.jp/osc2016-kyoto/">オープンソースカンファレンス2016 Kyoto - オープンソースの文化祭！</a></li>
</ul>
</li>
<li>Q&amp;A

<ul>
<li>どこが負荷おおいか?

<ul>
<li>disk がおおい．dbとか．ロールごとに分けておいてキャッシュ聞かせていく戦略おおい．(計算機の仕組み的にdiskがおそい from yuuki)．最近iodriveとかあって速くなってきてるのでスケールアップが多い．</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>サービスに寄り添うログ基盤 - ログ収集のその先に -</h2>

<p>16:20 | monochromegane(ペパボ) | サービスに寄り添うログ基盤 - ログ収集のその先に - | 25分</p>

<p><a href="https://speakerdeck.com/monochromegane/pepabo-log-infrastructure-bigfoot">サービスに寄り添うログ基盤/pepabo_log_infrastructure_bigfoot // Speaker Deck</a></p>

<script async class="speakerdeck-embed" data-id="5afe99df3d13476d8fd631d22d83d393" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<ul>
<li>monochromegane

<ul>
<li>minne</li>
<li>普段 rails 書いてる．最近ログ基盤の開発してる．</li>
</ul>
</li>
<li>ログはいいぞ!

<ul>
<li>ログはウェブサービスにおいて重要</li>
</ul>
</li>
<li>行動ログ

<ul>
<li>アプリケーション層で出力するログ(apacheのログとかではない)</li>
<li>いつ，だれが，なにをやったか特定できる</li>
<li>最終結果だけでなく，どこであきらめたか．どう迷ったかが分かる

<ul>
<li><blockquote><p>特にどこであきらめたか．どう迷ったかが分かるところにサービス改善のヒントが詰まってる!!!</p></blockquote></li>
</ul>
</li>
</ul>
</li>
<li>行動ログ活用段階

<ul>
<li>収集: とりあとめる</li>
<li>分析: 視覚化したり分析</li>
<li>活用: 分析結果を使って継続的なサービス改善</li>
<li>&ldquo;ログの活用&rdquo;

<ul>
<li>ログがたまるだけとか，グラフでてバンザイ！するだけではだめ!!</li>
</ul>
</li>
<li>-> ログの<strong>活用</strong>基盤をつくる!</li>
</ul>
</li>
<li>Bigfoot

<ul>
<li>ペパボの次世代ログ<strong>活用</strong>基盤</li>
<li>minnneのそれでもある．</li>
<li>UID 振る．アプリでログを吐いて集約基盤へ -> 分析 -> サービス改善など活用</li>
</ul>
</li>
<li>Bigfoot を支える技術

<ul>
<li>ログを送る

<ul>
<li>fluentd rack-bigfoot(rails) OSS的な感じではなさそうか&hellip;?</li>
</ul>
</li>
<li>集約基盤 Treasure Data

<ul>
<li>活用に力入れたかったので集約基盤はとりあえずTDに任せた．あとで自社のものにするかも</li>
<li>Hive QL. 行動ログをSQLライクに扱える</li>
</ul>
</li>
<li>ワークフロー

<ul>
<li>tdのスケジュールクエリを利用．これはwebのコンソールからorAPI.APIだと個々人が勝手にいろいろできたりしてこまる</li>
<li>-> クエリのコード管理にpendulum <a href="http://blog.monochromegane.com/blog/2016/03/21/pendulum/">Treasure Dataのスケジュールジョブをコードで管理するPendulumというgemをつくった · THINKING MEGANE</a></li>
<li>コードレビューとか管理できてよい</li>
<li>digdag というtd社公式のものがあるので移行中 <a href="https://github.com/treasure-data/digdag">treasure-data/digdag: Workload Automation System</a></li>
</ul>
</li>
<li>属性情報

<ul>
<li>行動ログのidから性別などなど属性情報を組み合わせると分析の幅が広がる</li>
</ul>
</li>
<li>名寄せ

<ul>
<li>サービスのアカウントと各クライアントをマッピング</li>
<li>未ログイン状態のアカウントも名寄せ後に過去に遡って紐付け</li>
<li>cookie syncと組み合わせてサービス間の紐付け</li>
</ul>
</li>
<li>Big Cube とCube

<ul>
<li>BigCube: 全サービスの行動ログを集約してる</li>
<li>切り口が確定したらCubeに切り出す(cubeに切り出されるとpostgresに入るので速く集計できたりする)</li>
</ul>
</li>
<li>視覚化と分析

<ul>
<li>pivot tableのすごいやつ． Tableau社のTableau Desktopを使う <a href="http://www.tableau.com/ja-jp/products/desktop">Tableau Desktop | Tableau Software</a></li>
<li>データソースとしてtdつかえる</li>
</ul>
</li>
<li>活用

<ul>
<li>画面デザインの変更．ステップ見直し</li>
<li>A/Bテスト</li>
<li>-> 静的なフィードバック．人が判断．固定化する．</li>
</ul>
</li>
<li>動的なフィードバックがよいのでは?

<ul>
<li>システムが行動ログを吐く -> 変換したものをシステムが受け取る -> 挙動を変える</li>
<li>バンディットアルゴリズム

<ul>
<li>いまやってみてる．</li>
<li>A/Bテストの機会損失減らしてる．</li>
<li><a href="https://www.oreilly.co.jp/books/9784873116273/">O&#8217;Reilly Japan - バンディットアルゴリズムによる最適化手法</a></li>
<li>強欲な感じで期間内の最良の手法を探す．最大はそれにbetする(活用)が他のものにもbet(探求)．</li>
</ul>
</li>
<li>リコメンド

<ul>
<li>matrix factorization</li>
<li>強調フィルタリングの一種</li>
<li>tdのなんかでできるらしい?</li>
</ul>
</li>
</ul>
</li>
<li>browse,card abondonment</li>
</ul>
</li>
<li>サービスに寄り添うログ基盤

<ul>
<li>単に集めるだけじゃなくて分析，活用の段階を補助する</li>
<li>静的フィードバックから動的フィードバックへ</li>
<li>行動ログの循環によって<strong>なめらかな世界</strong>へ．ということでログはいいぞ</li>
</ul>
</li>
<li>Q&amp;A

<ul>
<li>Q「送る側のサービスからログ基盤への負荷の問題はどうか」A「fluentdがよく出来ているから問題ない」 <a href="https://twitter.com/matsumotory/status/749151437850980352">https://twitter.com/matsumotory/status/749151437850980352</a></li>
<li>Q「fluentd自体の負荷はどうか」A「ない、今の設計規模では大丈夫」もともとfluentd自体はつかってて大丈夫ならしい</li>
<li>td負荷? ログを送りつけるぶんには負荷は気にしなくて良い．送ったあとにインデックス使わずに集計したりするとまずい．プランやすかったりすると特に．</li>
</ul>
</li>
</ul>


<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">これ、みやけさんほぼ一人でやってたからやばすごなんですよ… <a href="https://twitter.com/hashtag/pepabohatena?src=hash">#pepabohatena</a></p>&mdash; 松本 亮介 / まつもとりー (@matsumotory) <a href="https://twitter.com/matsumotory/status/749146241422860288">July 2, 2016</a></blockquote>


<p>まじか&hellip;</p>

<p>活用を重要視していてよさそう．おもしろい話だった．</p>

<p>「ログはいいぞ」．</p>

<h2>若手インフラ座談会</h2>

<p>16:55 | masayoshi(はてな) taketo957(はてな) alotofwe(ペパボ) hanazuki(ペパボ) モデレータ stanaka(はてな) | 若手インフラ座談会 | 40分</p>

<ul>
<li>新卒1,2年目の人達で座談会．stanakaさん仕切ってる</li>
<li>自己紹介

<ul>
<li>taketo957: hatena. 新卒．インフラしてる． <a href="https://twitter.com/taketo957">taketo957 (@taketo957) | Twitter</a></li>
<li>masayoshi: hatena. 新卒．さっき発表した <a href="https://twitter.com/yoyogidesaiz">まさよし (@yoyogidesaiz) | Twitter</a></li>
<li>hanazuki: pepabo. 大学京都．インフラしてる．渋谷．去年入社 <a href="https://github.com/hanazuki">hanazuki (Kasumi Hanazuki)</a></li>
<li>alotofwe: pepabo. 読み方:すずぴー．ねっとではれいか??? 去年入社．競プロ学生からやってる <a href="https://twitter.com/alotofwe">玲香@健康 (@alotofwe) | Twitter</a></li>
</ul>
</li>
<li>なんでインフラ?

<ul>
<li>masayoshi: ネットワーク系の研究してたり．かっこいいじゃん?</li>
<li>hanazuki: KMC入ってた．サーバーいじったりするの楽しかった．</li>
<li>taketo957: B3くらいでRailsやってたらブラックボックスおおくていろいろ調べてた．京都ならはてなでインフラできそうということでアルバイトしてisuconしたりなどなど．面白くてそういう形式で入社した．</li>
<li>alotofwe: 大学時代はそんなにインフラしてたわけじゃなかった．アプリは書いていたけど，やっていてアプリはもういいやという感じになった．インフラorセキュリティやろうとおもって，セキュリティ志望だけどセキュリティするためにはインフラ知らなきゃだめなので今インフラやってる

<ul>
<li><ol type="a">
<li>せきゅりてぃ専門のひとpepaboにいる?</li>
</ol>
</li>
<li><ol type="a">
<li>ちょっといる．matsumotoryさんとかも?</li>
</ol>
</li>
<li>はてなではセキュリティ専門はいない．みんなでやる．</li>
</ul>
</li>
</ul>
</li>
<li>アプリとインフラの境界? たとえばDBへのクエリ，スキーマあたりの責任や分担とかどう?

<ul>
<li>masayoshi: 監視業務のアルバイトしてその時はじめてインフラやった．そのときはコード書いてる人はいなかった．DBの設計まではしないけど性能のチェック，クエリのパフォーマンスチェックなどはしてた．はてなでは? -> だいたい一緒．</li>
<li>taketo957: 入社以前はもっとハッキリした境界あると思ってたけど，入ってみたらアプリ側が一緒にやってくれたりとか．インフラはmiddle wareより下はだいたいみてる．</li>
<li>hanazuki: パフォーマンスチューニングとかが境界．どっちからもみる．上からみるか下からみるかって感じ．境界がハッキリはしてない．</li>
<li>alotofwe: だいたいhanazukiさんと同じ．開発のひとからpull-reqが飛んできてレビューするとかまであるくらい境界は曖昧．ある程度権限はあるけどソレ以外はほとんど境界はない．</li>
</ul>
</li>
<li>インフラエンジニアになって1-2年，おもしろかったことや印象的なエピソードとかある?

<ul>
<li>masayoshi: はてなはオンプレ環境ある．ネットワーク機器をみてエラーパケットとかみたりした．そこで傾向とかがみれて面白い</li>
<li>hanazuki: プライベートクラウド使ってる．チョット前まではオンプレ．仮想環境を使う側．awsを使うのとは違ってどう動かすかとかツールとか作っていく．この辺が楽しい</li>
<li>taketo957: いろいろわかってきて嬉しい!</li>
<li>alotofwe: 推理小説がスキ．障害の何が原因か調べるのが探偵の推理っぽくて楽しい．</li>
</ul>
</li>
<li>研修でよかったこと

<ul>
<li>taketo957: 今年からインフラでも新卒研修．知識編と設計編．設計編がおもしろかった．実際に動いてるサービスにたいしてこのくらいのリクエストならどう設計するか．身になる部分でよかった．</li>
<li>hanazuki: 1ヶ月間くらい研修ある．内容自体はだいたい知ってたりもしたけど試行錯誤がおもしろかった．</li>
<li>alotofwe: 今年は研修作る側．内容: railsつくって運用基盤つくってmobileつくる．最低限の生き延びるための知識を得るようなもの．インフラのものはあまり知らなかったので特に勉強になった．</li>
<li>masayoshi: 全部taketoくんに言われた! ミドルウェアの組み合わせだけじゃなくて構築するとかコードを書いて作ってみるとどこがボトルネックになるのかとかわかったりする．作ったり構築・コード書くのも研修でやるとその辺に気づけて勉強になるのでベンリ．</li>
</ul>
</li>
<li>hatena は京都と東京．pepaboは福岡と東京にある．2拠点でやってることに関して感じることとか?

<ul>
<li>taketo957: 自分がやった話ではない．東京とのコミュニケーションコストを下げる．提示前15minのslack call雑談とかやってる．(yuukiさんが導入した)</li>
<li>masayoshi: taketoさんの続きってかんじ．今すぐ，まだまとまってないけど考えを話し合い，そういうときに音声チャットあってすぐに話せる環境があるとよい．ちょっと話したいけどいいですか?って聞いたらすぐ聞けるという環境が大事でベンリ．</li>
<li>taketo957: 補足．はてなは社内の文化的にこんなことも残すのか．というところまで残す．音声もベンリだけどチャットなどのテキストで何でも残すというところもよい．</li>
<li>hanazuki: みてるサービスが違うのでそこまでコミュニケーションをする必要はそもそもない．週1でビデオコールとかしてる．コミュニケーションとりたいけど取れないときもあるのでなんとかしたい．</li>
<li>alotofwe: slackべんり．アイコンが顔写真でよい．</li>
<li>masayoshi: アイコンもよいよね!</li>
<li>どうしても落ちがちな情報．手元で詰まってるけど大変とかいう情報とか．</li>
</ul>
</li>
<li>ロールモデル．将来どうなりたいとか．社内社外問わず目標としてる人とかいるか?

<ul>
<li>masayoshi: 具体的な人物とかはあんまりない．エンジニアとアカデミック系では本来あんまり境界はない．インフラのパフォーマンスチューニングとかは個人の技術という側面がおおいので体系化して学術分野にも広めたりアウトプットしたい．</li>
<li>taketo957: 入社したときはyuukiさんにあこがれてといった．ネットワーク周り喋ってるひとがおおい．アプリ観点から観てるひとはあんまりすくなさそう．研究室でやってきた人力でやる仕組みとか応用したりしていきたい．(クラウドソーシング?)</li>
<li>hanazuki: あんまり決まってない．人力の認知力でやったりするのはうっかりとかが発生して困るのでつらい．半分寝てても仕事できるようにしたい</li>
<li>alotofwe: よくばりさんなので側面によって尊敬してる人が異なる．つまみ食いしていきたい．食べてる最中なのであんまり決まってない．</li>
</ul>
</li>
<li>インフラエンジニアの醍醐味?．会社のいいところは?

<ul>
<li>taketo957: レイヤーが下がるにつれて相手にするものが多くなる．それにつれて自分の知識も増やす必要がある．いろんな知識を裏側まで見通してやっていったりするのは面白い．会社のよいところ．新しい技術・古い技術と幅がでていてよい．</li>
<li>masayoshi: 基盤をつくるのが面白い．大規模なものを支えるところが面白い．裏方だけど支えがないと動かない．このアラート放置していいんすか?とか聞くと先輩とかが話してくれて一緒に解決してくれたり．</li>
<li>hanazuki: インフラといってもハードウェアみたりチューニングしたりなどいろいろな分野・仕事がある．いろいろできるのよい．それぞれスキなレイヤで改善できるところとかよい．</li>
<li>alotofwe: アプリと比較．アプリ開発だと適当に書いても動いちゃう．インフラだと1行追加すると大きい影響があってじっくり考慮してかかなきゃだめだったりする．向上心強い人がおおい．よくしていきたいという気持ち．勉強しやすい会社．</li>
</ul>
</li>
</ul>


<h2>僕の(雑)まとめ感想とか</h2>

<p>インフラ系のことはほとんどできていなくて，知識も全然ないけど，どんな感じでやってるのかなぁと興味はあったので参加しました．
アプリケーション書くときもインフラ意識して書くとよかったりするのでインフラエンジニアとかウェブオペレーションエンジニアみたいな職種につかなくても知っておくと便利．
実際座談会の話では，はてなさんでもペパボさんでもアプリケーションエンジニアとインフラエンジニアの仕事の境界とかは曖昧で，上から見るか下から見るかの違い程度しかないみたいな話をしてた気がする．
僕も，もっとインフラ意識しながら開発していきたいなーという気持ち高まった．</p>

<p>ネットワーク周りだとシステムコールとかいろいろ正直よくわからんくて前提知識僕が持ってないんだなーという話は多かったけど，
わかんない話でもおもしろいなーと得られる部分あったり，割とまだ分かる話(相対的に)でも知らないことがたくさん学べたり，なるほどなーとかそうだよなーよいよい!という話ばかりで
どの発表もよくて来てよかった．</p>

<p>運営・発表者の皆さんありがとうございました．</p>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[6/2までKindle本50%オフセール!IT系の本で僕が欲しい本をまとめた!!!]]></title>
    <link href="http://haya14busa.com/amazon-kindle-sale-til-2016-06-02/"/>
    <updated>2016-05-30T22:41:43+09:00</updated>
    <id>http://haya14busa.com/amazon-kindle-sale-til-2016-06-02</id>
    <content type="html"><![CDATA[<p>2016年5月27日(金)00時00分～2016年6月2日(木)23時59分(日本時間)まで
<a href="http://www.amazon.co.jp/b/ref=s9_acss_bw_hsb_x_s1_s?_encoding=UTF8&amp;ie=UTF8&amp;node=4465565051&amp;pf_rd_m=AN1VRQENFRJN5&amp;pf_rd_s=merchandised-search-2&amp;pf_rd_r=1FY1PHQK4QC1KVKMZR6D&amp;pf_rd_t=101&amp;pf_rd_p=322009209&amp;pf_rd_i=2275256051">Kindle 50%OFF セール</a>
をやっているらしく，コンピュータ・IT系の本で僕が欲しい!!!よさそう!!!と思った本をまとめました．</p>

<p>先日 <a href="http://www.amazon.co.jp/gp/product/B00QJDQM9U/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=B00QJDQM9U&linkCode=as2&tag=haya14busa-22">Kindle Paperwhite Wi-Fi</a> を買った勢としてはこのKindle セールに乗るしかない!!!
積んでいた Soft skills の原著をKindle paperwhite で最近読んでますが，paperwhite かなり読みやすくて感動してます． いくつか固定レイアウト型の本がセールになってて， paperwhite で読むのはそこまでよさそうでもないけどそんなことは気にしない．</p>

<p>なおまとめてみると全部ポイント還元ではなく50%OFFセール本でした． 基本的にここから集めました． <a href="http://www.amazon.co.jp/gp/search/ref=sr_pg_1?rh=n%3A2250738051%2Cn%3A%212275265051%2Cn%3A%212275277051%2Cn%3A4469648051%2Cn%3A2275256051%2Cn%3A2291657051&amp;bbn=4469648051&amp;ie=UTF8&amp;qid=1464614758&amp;lo=digital-text">Amazon.co.jp: コンピュータ・IT - Kindle本: Kindleストア</a></p>

<h2>かなり欲しい!!!というか多分買う本</h2>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00CY9256C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41oruV%2BaJIL._SL160_.jpg" alt="プログラミングコンテストチャレンジブック [第2版]　～問題解決のアルゴリズム活用力とコーディングテクニックを鍛える～" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00CY9256C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">プログラミングコンテストチャレンジブック [第2版]　～問題解決のアルゴリズム活用力とコーディングテクニックを鍛える～</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2012-01-28)<br />売り上げランキング: 1,619<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00CY9256C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>昔，図書館で借りてたけど途中で返しちゃった．プロコンでオススメの本といえば蟻本が必ず上がるし欲しい! プロコン最近やってないけど時間とってやりたい&hellip;</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B017X3D3GE/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51OBAUr%2BcpL._SL160_.jpg" alt="セキュリティコンテストチャレンジブック　CTFで学ぼう！情報を守るための戦い方" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B017X3D3GE/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">セキュリティコンテストチャレンジブック　CTFで学ぼう！情報を守るための戦い方</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2015-09-30)<br />売り上げランキング: 553<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B017X3D3GE/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>(途中までしか読めてないけど)蟻本よかったしセキュリティコンテスト版もよいでしょ．という気持ち．CTFどんなもんか気になる．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HR19TSO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/416JLYmhVvL._SL160_.jpg" alt="世界で闘うプログラミング力を鍛える150問　トップIT企業のプログラマになるための本" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HR19TSO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">世界で闘うプログラミング力を鍛える150問　トップIT企業のプログラマになるための本</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2012-11-13)<br />売り上げランキング: 476<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HR19TSO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>去年インターンの面接の対策として物理本を借りて読んだ．コーディング面接&hellip;?なにそれ&hellip;?という状態の自分にとってめっちゃよかった．読んだことあるけど手元にKindle本としてあってもよいかも．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00MN5AO7E/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51TtVaDHjeL._SL160_.jpg" alt="世界で闘うプロダクトマネジャーになるための本　トップIT企業のPMとして就職する方法" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00MN5AO7E/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">世界で闘うプロダクトマネジャーになるための本　トップIT企業のPMとして就職する方法</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2014-08-22)<br />売り上げランキング: 560<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00MN5AO7E/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>「世界で闘うプログラミング力を鍛える150問　トップIT企業のプログラマになるための本」がよくて，プロジェクトマネージャー版がでるとの噂を聞いて本屋でちらっと立ち読みした．
全然内容覚えてないけどよさそうな雰囲気だったので欲しい．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GSHI04M/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51cCs-aJ6xL._SL160_.jpg" alt="闘うプログラマー［新装版］　ビル・ゲイツの野望を担った男達" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GSHI04M/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">闘うプログラマー［新装版］　ビル・ゲイツの野望を担った男達</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2013-11-20)<br />売り上げランキング: 299<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GSHI04M/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>名著感．確かちょっと読んだことがあるのは情熱プログラマーで，闘うプログラマーの方は読んだことなかった．よさそうなので欲しい．情熱プログラマーはKindle版がそもそもなかった&hellip;<a href="http://www.amazon.co.jp/gp/product/B00AYQNR5U/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00AYQNR5U&amp;linkCode=as2&amp;tag=haya14busa-22">洋書版</a>ならあるけど&hellip;洋書版セールじゃないけどほしいな．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01AN97W08/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51f-xfTWkkL._SL160_.jpg" alt="レガシーコード改善ガイド" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01AN97W08/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">レガシーコード改善ガイド</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">翔泳社 (2016-01-15)<br />売り上げランキング: 264<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01AN97W08/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>聞いたことある名著感．レガシーコード改善したいし，今回のセールで一番欲しいかも知れない．(上記に挙げてる本はほとんど固定レイアウトだし&hellip;)
レガシーコード改善ガイドを読んで <a href="https://github.com/easymotion/vim-easymotion">vim-easymotion</a> といった割とレガシーなメンテしてるプロダクトをリファクタリングするゾ!!!という気持ち．</p>

<h2>買うか迷ってるけど欲しい!!!本</h2>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00U5MVXZO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51GbST65OIL._SL160_.jpg" alt="プログラミングコンテスト攻略のためのアルゴリズムとデータ構造" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00U5MVXZO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">プログラミングコンテスト攻略のためのアルゴリズムとデータ構造</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2015-01-30)<br />売り上げランキング: 383<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00U5MVXZO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>プロコンとかアルゴリズム本の文脈でたまに聞く．ちらっと本屋で立ち読みしたことがあった気がするけどよさそうだった．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00L7FYBMK/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51onMQNa9sL._SL160_.jpg" alt="オンラインジャッジではじめるC/C++プログラミング入門" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00L7FYBMK/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">オンラインジャッジではじめるC/C++プログラミング入門</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2014-06-28)<br />売り上げランキング: 6,224<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00L7FYBMK/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>C/C++わかってなくて，オンラインジャッジでやれるところがよさそう．C言語学んで Vim のコードベースにコントリビュートするゾ!!!という気持ち．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HK6ZU0W/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51pJqy%2BHgzL._SL160_.jpg" alt="TCP/IP の基礎" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HK6ZU0W/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">TCP/IP の基礎</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2011-02-23)<br />売り上げランキング: 18,345<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HK6ZU0W/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>TCP/IP，よくみる有名な本ではないけど，評価も高そうだし基礎として読みたい．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B017SH8GZ8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51QVdlOsTiL._SL160_.jpg" alt="徳丸浩のWebセキュリティ教室（日経BP Next ICT選書）" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B017SH8GZ8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">徳丸浩のWebセキュリティ教室（日経BP Next ICT選書）</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2015-11-10)<br />売り上げランキング: 86<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B017SH8GZ8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>自分が書いたコードが知らないうちに脆弱性持ってたりすると怖いし，セキュリティ系は知識として知っておくと便利そう．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00FR78X64/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51bZA91ZWqL._SL160_.jpg" alt="世界でもっとも強力な9のアルゴリズム" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00FR78X64/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">世界でもっとも強力な9のアルゴリズム</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2013-10-10)<br />売り上げランキング: 246<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00FR78X64/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>聞いたことあるし読み物として面白そう?</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00SY2UKHY/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/5158xm%2BqWpL._SL160_.jpg" alt="Webエンジニアが知っておきたいインフラの基本" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00SY2UKHY/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Webエンジニアが知っておきたいインフラの基本</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2014-12-27)<br />売り上げランキング: 990<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00SY2UKHY/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>インフラ，わかってないので基本を知りたい!</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00UJ42A0K/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/61norbW9CfL._SL160_.jpg" alt="コンピュータの構成と設計 第5版 上" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00UJ42A0K/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">コンピュータの構成と設計 第5版 上</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2015-02-25)<br />売り上げランキング: 484<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00UJ42A0K/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>「パタ&amp;へネ」本．名著感．この辺の知識全然なさそうなので読むと便利そう．<a href="http://www.amazon.co.jp/gp/product/B00SF6JN7M/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00SF6JN7M&amp;linkCode=as2&amp;tag=haya14busa-22">「ヘネパタ」本</a>はセールじゃなかった&hellip;</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00UJ42A3C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/61BPSJwn03L._SL160_.jpg" alt="コンピュータの構成と設計 第5版 下" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00UJ42A3C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">コンピュータの構成と設計 第5版 下</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2015-02-25)<br />売り上げランキング: 475<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00UJ42A3C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G9QITO8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51yD4FCOXCL._SL160_.jpg" alt="OSの仕組みの絵本" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G9QITO8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">OSの仕組みの絵本</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">翔泳社 (2013-05-20)<br />売り上げランキング: 6,184<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G9QITO8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>OSの仕組みに関する知識も全然もってないのでよさそう．</p>

<h2>「なぜなのか」系</h2>

<p>コンピュータはなぜ動くのかは昔読んだことあってよかった．
なのでこの「なぜなのか」系統の本はよさそうというイメージ．
「なぜなのか」系は他にもセールだったけど気になるタイトルだけ抜粋．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GSHI02Y/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51lpK1KcNeL._SL160_.jpg" alt="コンピュータはなぜ動くのか　知っておきたいハードウエア＆ソフトウエアの基礎知識" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GSHI02Y/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">コンピュータはなぜ動くのか　知っておきたいハードウエア＆ソフトウエアの基礎知識</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2013-11-20)<br />売り上げランキング: 592<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GSHI02Y/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HRN7VK0/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51-RR1ZYgYL._SL160_.jpg" alt="プログラムはなぜ動くのか 第2版　　知っておきたいプログラムの基礎知識" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HRN7VK0/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">プログラムはなぜ動くのか 第2版　　知っておきたいプログラムの基礎知識</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2014-01-09)<br />売り上げランキング: 228<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HRN7VK0/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00ISP0QB2/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/518CYcUVM1L._SL160_.jpg" alt="オブジェクト指向でなぜつくるのか 第2版" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00ISP0QB2/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">オブジェクト指向でなぜつくるのか 第2版</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2014-03-05)<br />売り上げランキング: 114<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00ISP0QB2/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IYE80X8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51ipTmzh7AL._SL160_.jpg" alt="情報はなぜビットなのか　知っておきたいコンピュータと情報処理の基礎知識" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IYE80X8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">情報はなぜビットなのか　知っておきたいコンピュータと情報処理の基礎知識</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2014-03-12)<br />売り上げランキング: 3,404<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IYE80X8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IYE7ROQ/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51FblFsvHnL._SL160_.jpg" alt="検索エンジンはなぜ見つけるのか　知っておきたいウェブ情報検索の基礎知識" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IYE7ROQ/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">検索エンジンはなぜ見つけるのか　知っておきたいウェブ情報検索の基礎知識</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2014-03-12)<br />売り上げランキング: 10,078<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IYE7ROQ/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00ISP0OM8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/510OA1JQZtL._SL160_.jpg" alt="システムはなぜダウンするのか" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00ISP0OM8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">システムはなぜダウンするのか</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2014-03-05)<br />売り上げランキング: 493<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00ISP0OM8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<h2>ちょっと欲しい気もする</h2>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00I96CJWO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Dw%2BSbRbFL._SL160_.jpg" alt="ピープルウエア　第3版" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00I96CJWO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">ピープルウエア　第3版</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2014-02-05)<br />売り上げランキング: 339<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00I96CJWO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>聴いたことあるし名著っぽいので</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IE3B522/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Jx3FqHtwL._SL160_.jpg" alt="テストから見えてくるグーグルのソフトウェア開発" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IE3B522/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">テストから見えてくるグーグルのソフトウェア開発</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2014-02-12)<br />売り上げランキング: 5,657<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IE3B522/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GLFI5J6/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51jemnVucZL._SL160_.jpg" alt="Linuxサーバーセキュリティ徹底入門" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GLFI5J6/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Linuxサーバーセキュリティ徹底入門</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">翔泳社 (2013-11-12)<br />売り上げランキング: 4,856<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GLFI5J6/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>サーバのセキュリティ，ちょっとくらい知っておいても損はなさそう．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00VHW3PKW/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51cVluyW7XL._SL160_.jpg" alt="Linuxコンテナー最新ツール Dockerを支える技術（日経BP Next ICT選書） 日経Linux技術解説書" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00VHW3PKW/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Linuxコンテナー最新ツール Dockerを支える技術（日経BP Next ICT選書） 日経Linux技術解説書</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2015-03-25)<br />売り上げランキング: 9,511<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00VHW3PKW/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>Docker わかってないので知っておきたい．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EH93MOQ/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51CW4gupfKL._SL160_.jpg" alt="ソーシャル・エンジニアリング" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EH93MOQ/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">ソーシャル・エンジニアリング</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経ＢＰ社 (2013-08-28)<br />売り上げランキング: 4,286<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EH93MOQ/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>セキュリティ系は知っておいて損がなさそう．</p>

<h2>持ってるけどオススメ!本</h2>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01E5DYK1C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Sdan3jlwL._SL160_.jpg" alt="【電子合本版】Code Complete 第2版　完全なプログラミングを目指して" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01E5DYK1C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">【電子合本版】Code Complete 第2版　完全なプログラミングを目指して</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2016-04-14)<br />売り上げランキング: 658<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01E5DYK1C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>持ってるけどまだ読んだとは言ってない! 読みたい!!!</p>

<h2>技術書・ビジネス書 大賞 部門</h2>

<p><a href="https://www.shoeisha.co.jp/campaign/award/result">ITエンジニアに読んでほしい！技術書・ビジネス書 大賞 2016</a> に含まれている本．Kindle セールになってるの2つしかなかったけど．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00W535LOU/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41NEFDfkNAL._SL160_.jpg" alt="HARD THINGS　答えがない難問と困難にきみはどう立ち向かうか" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00W535LOU/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">HARD THINGS　答えがない難問と困難にきみはどう立ち向かうか</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2015-04-17)<br />売り上げランキング: 14<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00W535LOU/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>おすすめされた． 2015年の電子書籍で一番売れたとか評判よさそうだし読み物として買いたい．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B014UR9R3Y/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Z00YSPLcL._SL160_.jpg" alt="21世紀のビジネスにデザイン思考が必要な理由" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B014UR9R3Y/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">21世紀のビジネスにデザイン思考が必要な理由</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">クロスメディア・パブリッシング（インプレス） (2015-07-22)<br />売り上げランキング: 214<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B014UR9R3Y/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>55%なので6/2までのセール対象というわけではないかも．</p>

<h3>追記．記事書いた後に見つけた本</h3>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00F3UTIQY/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51EnYk6XEWL._SL160_.jpg" alt="リーン・スタートアップ　ムダのない起業プロセスでイノベーションを生みだす" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00F3UTIQY/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">リーン・スタートアップ　ムダのない起業プロセスでイノベーションを生みだす</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2013-09-11)<br />売り上げランキング: 343<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00F3UTIQY/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<h3>おわりに． テンプレ的な何か</h3>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B008H2USUK/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Aw8JRwqdL._SL160_.jpg" alt="Amazonギフト券- Eメールタイプ - Amazon Kindle" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B008H2USUK/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazonギフト券- Eメールタイプ - Amazon Kindle</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">Amazonギフト券 (2012-12-10)<br />売り上げランキング: 17<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B008H2USUK/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>Kindle 本は欲しいものリストでプレゼントできないらしいですが，Amazon ギフト券で<a href="https://twitter.com/haya14busa">僕</a> (hayabusa1419 at gmail.com) にプレゼントしてくれてもいいですよ???</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[revital.vim で vital.vim を爆速にしてお前らの Vim plugin を速くする]]></title>
    <link href="http://haya14busa.com/revital-vim-makes-vital-vim-a-lot-faster/"/>
    <updated>2016-03-23T04:45:43+09:00</updated>
    <id>http://haya14busa.com/revital-vim-makes-vital-vim-a-lot-faster</id>
    <content type="html"><![CDATA[<div class="github-card" data-github="haya14busa/revital.vim" data-width="500" data-height="150" data-theme="default"></div>


<p><a href="https://github.com/haya14busa/revital.vim">haya14busa/revital.vim</a></p>

<p>この度， revital.vim というプラグインを作って vital.vim のモジュールのローディングを爆速にしてお前らが使ってる Vim plugin を速くしました．</p>

<p>めでたい．</p>

<p>あと気づいたんですが今日は僕の誕生日のですね．これもまためでたい．</p>

<p>そして本当のところは vital.vim を使ってるプラグイン開発者が， revital.vim を使って初めて速くなるので実はまだ速くなってないものが多いです．
待ちきれない方はこの記事を読んで revital.vim の使い方を覚えてプルリクしていきましょう．
また爆速にはなったと思うんですが，体感には個人差・環境差があり，もともとほとんど速度が気にならない人も多いかと思うのでご注意ください．
Windows だか symlink だか virtualbox だか neovim だか何かはまだよくわかってませんが，特定の
環境が原因なのか vital.vim をヘビーに使用しているプラグインにまれによく「遅いぞ?」という issue が飛んできたりしていて，
そういった方には顕著に効果があると思います．(たぶん)</p>

<p>参考: <a href="https://github.com/easymotion/vim-easymotion/issues/242">遅いと</a>，<a href="https://github.com/easymotion/vim-easymotion/issues/136">言ってる</a>，<a href="https://github.com/haya14busa/incsearch.vim/issues/85">人たち</a>
(放置気味でｽｲﾏｾﾝ&hellip;いや workaround な修正なら前からできたんだけど手元でも再現しないものをその場対処はあんまりやりたくなくてやる気が&hellip;)</p>

<h2>vital.vim とは?</h2>

<p><a href="https://github.com/vim-jp/vital.vim">https://github.com/vim-jp/vital.vim</a></p>

<p>Vim script の最高のライブラリです．vital.vimのいいところとダメなところを個人的に上げるとこんな感じです．</p>

<h3>vital.vim のいいところ</h3>

<ol>
<li>組み込み式なので依存ライブラリがアップデートされても安心</li>
<li>プラグインのユーザはvital.vimを別途インストールする必要がない</li>
<li>めっちゃ気軽に外部ライブラリを作って使える</li>
<li>けっこういろんなものがそろっていて種類が豊富</li>
<li>日本人の凄腕 Vimmer 達が開発・メンテしているので品質も高い</li>
</ol>


<p><strong>とにかくベンリ</strong></p>

<h3>vital.vim のダメなところ</h3>

<ol>
<li>(ロードが) <strong>遅い</strong> (ケースがある)(基本的に気にならないけど)</li>
<li>ドキュメントがたぶん足りないので敷居が高い(ように見えるだけで使い方は簡単なんだけど&hellip;)</li>
<li>インストールやアップデートでハマることが多い印象</li>
</ol>


<p>他のところで，ファイルをコピーするのが無駄だとかキッチンシンクじゃない?みたいな
話を聞いたことがありますが，前者は全然気にする時代じゃないはずだし，後者は単なる勘違いで
vital.vim は使うライブラリのみ組み込めるので問題ないはずです．</p>

<p><a href="https://github.com/vim-jp/vital.vim">Githubのリポジトリ</a>では</p>

<blockquote><p>This is like a plugin which has both aspects of Bundler and jQuery at the same time.</p></blockquote>

<p>と(たぶん昔から)書いてあって，Bundler はともかく jQuery はちょっとあんまり良い印象ではないのかなぁと思う．
どちらかというと lodash とか Bundler に合わせるなら npm と言ってもいい気がする．</p>

<p>で，話が少々それていますが，今回 1つ目のモジュールの読み込みが<strong>遅い</strong>という部分を revital.vim で解決してみました．
2と3はドキュメントを拡充したり，<code>:Vitalizer</code>というコマンドをもうちょっとユーザフレンドリーにしてあげるといいのかなぁと個人的に思うのでなんとかしたいと思います．
(去年くらい前から思っているのでつらい)</p>

<p>とにかく <a href="https://github.com/vim-jp/vital.vim">vital.vim</a> 最高なので
<a href="https://github.com/haya14busa/revital.vim">revital.vim</a> と一緒に使っていきましょう．</p>

<h2>速くなったというならまずはベンチマークじゃん?(雑)</h2>

<h3>スクリプト</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>command<span class="p">!</span> <span class="p">-</span><span class="k">bar</span> TimerStart <span class="k">let</span> start_time <span class="p">=</span> reltime<span class="p">()</span>
</span><span class='line'>command<span class="p">!</span> <span class="p">-</span><span class="k">bar</span> TimerEnd echo reltimestr<span class="p">(</span>reltime<span class="p">(</span>start_time<span class="p">))</span> <span class="p">|</span> unlet start_time
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:_vital_of<span class="p">()</span> abort
</span><span class='line'>  <span class="k">let</span> V <span class="p">=</span> vital#of<span class="p">(</span><span class="s1">&#39;incsearch&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> V.<span class="k">load</span><span class="p">(</span><span class="s1">&#39;Data.List&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> V.unload<span class="p">()</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:_vital_incsearch_of<span class="p">()</span> abort
</span><span class='line'>  <span class="k">let</span> V <span class="p">=</span> vital#<span class="nb">incsearch</span>#of<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> V.<span class="k">load</span><span class="p">(</span><span class="s1">&#39;Data.List&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> V.unload<span class="p">()</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">s</span>:times <span class="p">=</span> <span class="m">100</span>
</span><span class='line'>
</span><span class='line'>TimerStart
</span><span class='line'><span class="k">for</span> _ <span class="k">in</span> range<span class="p">(</span><span class="k">s</span>:times<span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:_vital_of<span class="p">()</span>
</span><span class='line'><span class="k">endfor</span>
</span><span class='line'>TimerEnd
</span><span class='line'><span class="c">&quot; =&gt; 1.565324</span>
</span><span class='line'>
</span><span class='line'>TimerStart
</span><span class='line'><span class="k">for</span> _ <span class="k">in</span> range<span class="p">(</span><span class="k">s</span>:times<span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:_vital_incsearch_of<span class="p">()</span>
</span><span class='line'><span class="k">endfor</span>
</span><span class='line'>TimerEnd
</span><span class='line'><span class="c">&quot; =&gt; 0.028437</span>
</span></code></pre></td></tr></table></div></figure>


<h4>結果: vital#of() と V.import(&lsquo;Data.List&rsquo;) 相当を100回回したベンチマーク</h4>

<table>
<thead>
<tr>
<th>vital.vim (x 100) </th>
<th> revital.vim (x 100)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.565324 sec </td>
<td> <strong>0.028437 sec</strong></td>
</tr>
</tbody>
</table>


<p>ref: <a href="https://github.com/haya14busa/incsearch.vim/pull/112#issue-142680963">https://github.com/haya14busa/incsearch.vim/pull/112#issue-142680963</a></p>

<p><strong>速くなってますね!!!</strong></p>

<p>(まぁ僕の環境ではもともと1回分にすると0.01秒くらいで全然遅いと感じたことなかったのですが)</p>

<p>上記のベンチマークは <a href="https://github.com/haya14busa/incsearch.vim">https://github.com/haya14busa/incsearch.vim</a> のコードで回しましたが，<a href="https://github.com/easymotion/vim-easymotion">https://github.com/easymotion/vim-easymotion</a> や 手元でテスト用に作った全部のvital モジュールをインストールしたプラグインでも同じような結果になりました．</p>

<h2>revital.vim の使い方</h2>

<p>さぁこれだけ速くなってるならvital.vimを既に使ってる人なんかは特に revital.vim を使ってみたくなりましたよね?
使い方は簡単です．</p>

<h3>わかってる人向けの簡単説明</h3>

<ol>
<li>vital.vim で :Vitalize しておく</li>
<li>revital.vim の :Revitalize コマンドを実行</li>
<li><code>vital#of('{plugin-name}')</code> の変わりに <code>vital#{plugin-name}#of()</code>を使う．</li>
</ol>


<p>これだけです．インターフェースは vital.vim をそのまま使う場合とほとんど変わりません．</p>

<h3>ちょっと丁寧な説明</h3>

<h4>a) モジュールをインストール</h4>

<p><code>{pluginname}</code> をあなたかが開発しているプラグインの名前に置き換えましょう．</p>

<ol>
<li><code>:cd /path/to/your/plugin</code> プラグインのディレクトリに移動．もちろん shell で移動してから Vim を起動するとかコマンドで指定してもOK.</li>
<li><code>:Vitalize --name={pluginname} . +Data.List</code> <code>Data.List</code> モジュールを組み込んでみる</li>
<li>※  <code>--name</code>には<code>.</code>や<code>-</code>が使えないので適宜<code>vim-</code>とか<code>.vim</code>とかいらない部分は削る．</li>
<li><code>:Revitalize .</code> Revitalize 実行!</li>
</ol>


<h4>b) モジュールの使い方</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">s</span>:V <span class="p">=</span> vital#{pluginname}#of<span class="p">()</span>
</span><span class='line'><span class="k">let</span> <span class="k">s</span>:List <span class="p">=</span> <span class="k">s</span>:V.import<span class="p">(</span><span class="s1">&#39;Data.List&#39;</span><span class="p">)</span>
</span><span class='line'>echo <span class="k">s</span>:List.uniq<span class="p">(</span>[<span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span>]<span class="p">)</span>
</span><span class='line'><span class="c">&quot; =&gt; [1, 2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>簡単で vital.vim のみで使うケースとほとんど変わりません．</p>

<h4>c) モジュールのアップデート</h4>

<p><code>:Vitalize</code>でアップデートしたあとにもう一度 <code>:Revitalize</code> する必要があります．</p>

<ol>
<li><code>:cd /path/to/your/plugin</code> プラグインのディレクトリに移動．</li>
<li><code>:Vitalize .</code> アップデートするときはこれだけ．</li>
<li><code>:Revitalize .</code> Revitalize 実行</li>
</ol>


<h2>どうして revitalize.vim は速いのか?</h2>

<p>vital.vim はモジュールをロードする際(<code>s:V.import('Module.Name')</code>)に</p>

<ol>
<li>モジュール名から目的のファイルを探す</li>
<li>そのファイルからモジュール用のオブジェクトを作る</li>
</ol>


<p>というざっくり2段階が必要です．このうち1などはsimlinkをたどるといった関数が遅
いせいで結構な時間が環境によってはかかっていますし，2はそこまで遅くはない気もし
ますがいろいろ内部でやっています．(ちゃんとprofileはしてない．)
vital.vim の組み込みライブラリであるという性質上，普通にやるなら上記の段階が必要です．
また歴史的経緯も含まれているかもしれないですが上記の2段階の前にはライブラリを
ロードするためのローダーを同じような手順で作成する必要があります(<code>vital#of({plugin-name})</code>)．</p>

<p>速くする方法はないものかなぁと考えると1つ思い当たります．</p>

<p>モジュール名から目的のファイルを Vim script で素早く探すのにはなかなか骨が折れますが，Vim script には
autoload function という機能があり，autoload 関数をいい感じに定義しいい感じに呼
べば(<code>path#to#module#file</code>)，対応したファイルを勝手に内部で見つけてきて関数を呼
んでくれるという仕組みが存在します．Vim script で頑張るよりも組み込み機能を
使ったほうが速いはずです!! autoload 関数使いたい!!!</p>

<p>しかし，autoload 関数をいい感じに定義する際にはファイルのパス情報が必要になります．
ここでvital.vim は別のプラグインに組み込まれることが前提のライブラリなのでパスが定まっていません．
よって autoload はそのままでは使えませんでした&hellip;</p>

<p>うーん．困ったな&hellip;</p>

<p>でもでも，よくよく考えてみると最初からパスが定まっていなくても，モジュールをプラグインに組み込んだあとのパスは決定しています．
つまり，<code>:Vitalize</code> でモジュールをプラグインに組み込んだあとにモジュールのファイルに適切な autoload 関数を追加してしまえばいいのです．</p>

<p>もうわかったでしょか?</p>

<p>revital.vim が提供する <code>:Revitalize</code> コマンドは組み込んだモジュールのファイルに
適切なautoload関数を追加し， <code>s:V.import('Module.Name')</code> の内部では追加した autoload 関数を呼ぶようになっているのです．
また，autoload関数を追加する際にモジュールのオブジェクトの雛形となるようなオブジェクトをついでに生成してやっているので，
そのオブジェクトの生成するプロセス分も速くなっています．</p>

<p>最後にファイルを探したりといろいろと大変な <code>vital#of({plugin-name})</code> の代わりに
直接 vital のローダーオブジェクトを返す <code>vital#{plugin-name}#of()</code> を作って revital.vim の仕事は終了です．</p>

<p>モジュールのファイルに autoload 関数を追加するというちょっと刺激的なハックをすることによって vital.vim のロードを爆速化することができました．
ただモジュールのファイルといっても組み込んだあとのモジュールのファイルを書き換
えるだけなのでオリジナルのファイルは書き換えないし，これくらいのハックは別に問題ないかなと思います．
一応vitalモジュールのファイルの途中で <code>:finish</code> されると使えなくなるという問題がありますが，まずそんなケースはないでしょう．</p>

<h2>本家に入れたいような気もするけど要相談?</h2>

<p>確実に速くなるし，本家ではテストされてないような部分もテストしているので，少々
ランニングして安定すれば本家にオプションかなにかで入れてもいいんじゃないかなぁと思います．</p>

<p>しかし，一応入り口のインターフェースが変わることと，ちょっと実装にハック感があ
ること，ドラスティックな変更なのでいろいろ待つよりもまずは実装して見てみるということで
revital.vim を作ってみました．</p>

<p>後方互換性は崩さないような仕組みになっているので時が来たらvital.vim 本家に同じ機能が実装されるとよさがありますね．</p>

<h2>おわり</h2>

<p><a href="https://github.com/haya14busa/revital.vim">haya14busa/revital.vim</a> で
vital.vim が爆速になるので vital.vim を使っている Vim プラグイン開発者各位や
これから <a href="https://github.com/vim-jp/vital.vim">vital.vim</a> を使ってみたいという
各位は是非お試しください!</p>

<p><strong>「爆ぜろリアル！ 弾けろシナプス！ Rev!talize Th!s World！」</strong></p>

<script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimのカーソル移動はもっともっと爆速になる! Vim-EasyMotion v3.0 をリリースしました]]></title>
    <link href="http://haya14busa.com/vim-easymotion-ver-3-dot-0-overwin-motions/"/>
    <updated>2016-01-19T03:14:43+09:00</updated>
    <id>http://haya14busa.com/vim-easymotion-ver-3-dot-0-overwin-motions</id>
    <content type="html"><![CDATA[<p>Vim-EasyMotion でウィンドウをまたいだ移動ができるようになりました!!!</p>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/2753bd4dd1dfdf5962dbdbffabf24244e4e14243/easymotion/overwin-motions.gif" alt="" /></p>

<div class="github-card" data-github="easymotion/vim-easymotion" data-width="500" data-height="150" data-theme="default"></div>


<p><a href="https://github.com/easymotion/vim-easymotion">easymotion/vim-easymotion</a></p>

<h3>過去の関連記事</h3>

<ul>
<li><a href="http://haya14busa.com/vim-lazymotion-on-speed/">Vim-Easymotionを拡張してカーソルを縦横無尽に楽々移動する - haya14busa</a>

<ul>
<li>まだ fork でやってた時代の記事． 自分のVim歴より始まりが古く，1年続いたという伝説のVim Advent Calendar 2012の363日目の記事で懐かしい．</li>
</ul>
</li>
<li><a href="http://haya14busa.com/mastering-vim-easymotion/">Vim-EasyMotionでカーソル移動を爆速にして生産性をもっと向上させる - haya14busa</a>

<ul>
<li>easymotionのメンテナになってからの便利機能まとめ的な記事.</li>
</ul>
</li>
</ul>


<p>そして今回の記事はvim-easymotionのリポジトリがorganization持ちになって<del>久々に</del>便利機能追加したという記事になります．</p>

<p>vim-easymotionとはVimのカーソル移動をブラウザでいうHit-A-Hint機能のように行うカーソル移動改善系プラグインです．
よく知らないよ〜という方は<a href="https://github.com/easymotion/vim-easymotion">README</a>眺めたり， 過去記事 (<a href="http://haya14busa.com/mastering-vim-easymotion/">Vim-EasyMotionでカーソル移動を爆速にして生産性をもっと向上させる - haya14busa</a> ) をさらっと読むと分かるかと思います．過去記事は<code>n-key Find Motion</code>の節以外はだいたい現役で使えると思います．</p>

<h2>vim-easymotion v3.0</h2>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/2753bd4dd1dfdf5962dbdbffabf24244e4e14243/easymotion/overwin-motions.gif" alt="" /></p>

<p><a href="https://github.com/easymotion/vim-easymotion/releases/tag/v3.0.0">Release EasyMotion now supports moving cursor over/across windows · easymotion/vim-easymotion</a></p>

<p>vim-easymotionではこれまでカーソルと同一ウィンドウ内にしか移動できなかったのですが，v3.0でとうとう他のウィンドウにも移動できるようになりました! めでたい．
実はv3.0 で追加するメイン機能はこれだけなんですが，個人的にかなり気に入ってしまい，「これはメジャーバージョンアップするしかない」と思い勢いだけでバージョンあげています．
他にはバグフィックスとか細かい修正で，とくに後方互換性は壊してないはずなので気軽にアップデートできると思います．</p>

<h3>追加したマッピング</h3>

<table>
<thead>
<tr>
<th> mapping </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;Plug&gt;(easymotion-overwin-f){char}</code> </td>
<td> <code>{char}</code> にマッチする位置を対象として移動 </td>
</tr>
<tr>
<td><code>&lt;Plug&gt;(easymotion-overwin-f2){char}{char}</code> </td>
<td> <code>{char}{char}</code> にマッチする位置を対象として移動 </td>
</tr>
<tr>
<td><code>&lt;Plug&gt;(easymotion-overwin-line)</code> </td>
<td> 行を対象として移動 </td>
</tr>
<tr>
<td><code>&lt;Plug&gt;(easymotion-overwin-w)</code> </td>
<td> 単語の先頭を対象として移動 </td>
</tr>
</tbody>
</table>


<h4>マッピング例</h4>

<p>ヴィジュアルモードやオペレータ待機モードで他のウィンドウに移動するというのは意味をなさないので，
他のウィンドウに移動する overwin モーションは <code>Normal</code> モードのマッピングのみ提供しています．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; &lt;Leader&gt;f{char} to move to {char}</span>
</span><span class='line'>map  <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">f</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">bd</span><span class="p">-</span><span class="k">f</span><span class="p">)</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">f</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>overwin<span class="p">-</span><span class="k">f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; s{char}{char} to move to {char}{char}</span>
</span><span class='line'>nmap <span class="k">s</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>overwin<span class="p">-</span>f2<span class="p">)</span>
</span><span class='line'>vmap <span class="k">s</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">bd</span><span class="p">-</span>f2<span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Move to line</span>
</span><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span>L <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">bd</span><span class="p">-</span>jk<span class="p">)</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>L <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>overwin<span class="p">-</span>line<span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Move to word</span>
</span><span class='line'>map  <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">w</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">bd</span><span class="p">-</span><span class="k">w</span><span class="p">)</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">w</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>overwin<span class="p">-</span><span class="k">w</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>EasyMotion触ったことなくてミニマムに始めたい場合は上記設定から気に入ったもの +
以下の設定でデフォルトマッピングをオフにするとよいかなと思います．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:EasyMotion_do_mapping <span class="p">=</span> <span class="m">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>もしひとつだけおすすめするなら<code>nmap s &lt;Plug&gt;(easymotion-overwin-f2)</code>がオススメです．
このマッピングだと画面上の見えているところへならどこへでも <code>s{char}{char}{hint}</code>の4 キーストロークで移動できます．
<code>&lt;Plug&gt;(easymotion-overwin-f)</code>や<code>&lt;Plug&gt;(easymotion-overwin-w)</code>だと候補が多すぎてヒントを2回以上打たないとダメなケースがよくあるのですが，
<code>{char}{char}</code>と2文字打つと候補が劇的に減ってヒントは大抵のケースで1文字入力するだけですみます．</p>

<h4>incsearch.vim との連携</h4>

<p>vim-easymotionには<code>&lt;Plug&gt;(easymotion-sn)</code>という <code>N</code> 文字入力してマッチした位置
を対象として移動するモーション，言わばeasymotionの検索(<code>/</code>)版マッピングを提供していたのですが，
今回，それのウィンドウ間移動できるマッピングは提供していません．</p>

<p>というのも，<code>&lt;Plug&gt;(easymotion-sn)</code>はVimデフォルトの検索との互換性が甘いところがあり，
<a href="http://haya14busa.com/incsearch-dot-vim-ver-2/">Vimの検索はもっともっと便利になる! incsearch.vim v2.0 をリリースしました - haya14busa</a>
の記事で紹介した incsearch.vim と vim-easymotion を連携させたほうが基本的に便利になっていて，
こちらを推奨したいなという訳です．</p>

<h4>必要なもの</h4>

<ul>
<li><a href="https://github.com/easymotion/vim-easymotion">easymotion/vim-easymotion</a></li>
<li><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></li>
<li><a href="https://github.com/haya14busa/incsearch-easymotion.vim">haya14busa/incsearch-easymotion.vim</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; You can use other keymappings like &lt;C-l&gt; instead of &lt;CR&gt; if you want to</span>
</span><span class='line'><span class="c">&quot; use these mappings as default search and somtimes want to move cursor with</span>
</span><span class='line'><span class="c">&quot; EasyMotion.</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:incsearch_config<span class="p">(</span>...<span class="p">)</span> abort
</span><span class='line'>  <span class="k">return</span> <span class="nb">incsearch</span>#util#deepextend<span class="p">(</span>deepcopy<span class="p">(</span>{
</span><span class='line'>  \   <span class="s1">&#39;modules&#39;</span>: [<span class="nb">incsearch</span>#config#easymotion#module<span class="p">(</span>{<span class="s1">&#39;overwin&#39;</span>: <span class="m">1</span>}<span class="p">)</span>]<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;keymap&#39;</span>: {
</span><span class='line'>  \     <span class="s2">&quot;\&lt;CR&gt;&quot;</span>: <span class="s1">&#39;&lt;Over&gt;(easymotion)&#39;</span>
</span><span class='line'>  \   }<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;is_expr&#39;</span>: <span class="m">0</span>
</span><span class='line'>  \ }<span class="p">),</span> <span class="k">get</span><span class="p">(</span><span class="k">a</span>:<span class="p">,</span> <span class="m">1</span><span class="p">,</span> {}<span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> /  <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>incsearch_config<span class="p">())</span>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> ?  <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>incsearch_config<span class="p">(</span>{<span class="s1">&#39;command&#39;</span>: <span class="s1">&#39;?&#39;</span>}<span class="p">))</span>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> <span class="k">g</span>/ <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>incsearch_config<span class="p">(</span>{<span class="s1">&#39;is_stay&#39;</span>: <span class="m">1</span>}<span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>&lt;CR&gt;</code> を <code>&lt;C-l&gt;</code>とかにすることで普段は普通の incsearch.vim, <code>&lt;C-l&gt;</code>押した時に
easymotion発動といったことができたりします．僕はそういう設定にしていて，便利につかえてます．</p>

<h2>おまけ</h2>

<h3>incsearch-migemo 連携</h3>

<p><a href="https://github.com/haya14busa/incsearch-migemo.vim">haya14busa/incsearch-migemo.vim</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:config_migemo<span class="p">(</span>...<span class="p">)</span> abort
</span><span class='line'>  <span class="k">return</span> extend<span class="p">(</span>copy<span class="p">(</span>{
</span><span class='line'>  \   <span class="s1">&#39;converters&#39;</span>: [
</span><span class='line'>  \     <span class="nb">incsearch</span>#config#migemo#converter<span class="p">(),</span>
</span><span class='line'>  \   ]<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;modules&#39;</span>: [<span class="nb">incsearch</span>#config#easymotion#module<span class="p">(</span>{<span class="s1">&#39;overwin&#39;</span>: <span class="m">1</span>}<span class="p">)</span>]<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;keymap&#39;</span>: {<span class="s2">&quot;\&lt;C-l&gt;&quot;</span>: <span class="s1">&#39;&lt;Over&gt;(easymotion)&#39;</span>}<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;is_expr&#39;</span>: <span class="m">0</span><span class="p">,</span>
</span><span class='line'>  \ }<span class="p">),</span> <span class="k">get</span><span class="p">(</span><span class="k">a</span>:<span class="p">,</span> <span class="m">1</span><span class="p">,</span> {}<span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> <span class="k">m</span>/ <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>config_migemo<span class="p">())</span>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> <span class="k">m</span>? <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>config_migemo<span class="p">(</span>{<span class="s1">&#39;command&#39;</span>: <span class="s1">&#39;?&#39;</span>}<span class="p">))</span>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> mg/ <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>config_migemo<span class="p">(</span>{<span class="s1">&#39;is_stay&#39;</span>: <span class="m">1</span>}<span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>fuzzy search で easymotion</h3>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/eab1d12a8bd322223d551956a4fd8a21d5c4bfe9/easymotion/fuzzy-incsearch-easymotion.gif" alt="" /></p>

<ul>
<li><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></li>
<li><a href="https://github.com/haya14busa/incsearch-fuzzy.vim">haya14busa/incsearch-fuzzy.vim</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:config_easyfuzzymotion<span class="p">(</span>...<span class="p">)</span> abort
</span><span class='line'>  <span class="k">return</span> extend<span class="p">(</span>copy<span class="p">(</span>{
</span><span class='line'>  \   <span class="s1">&#39;converters&#39;</span>: [<span class="nb">incsearch</span>#config#fuzzyword#converter<span class="p">()</span>]<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;modules&#39;</span>: [<span class="nb">incsearch</span>#config#easymotion#module<span class="p">(</span>{<span class="s1">&#39;overwin&#39;</span>: <span class="m">1</span>}<span class="p">)</span>]<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;keymap&#39;</span>: {<span class="s2">&quot;\&lt;CR&gt;&quot;</span>: <span class="s1">&#39;&lt;Over&gt;(easymotion)&#39;</span>}<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;is_expr&#39;</span>: <span class="m">0</span><span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;is_stay&#39;</span>: <span class="m">1</span>
</span><span class='line'>  \ }<span class="p">),</span> <span class="k">get</span><span class="p">(</span><span class="k">a</span>:<span class="p">,</span> <span class="m">1</span><span class="p">,</span> {}<span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> <span class="p">&lt;</span>Space<span class="p">&gt;</span>/ <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>config_easyfuzzymotion<span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h2>実装とか背景の話</h2>

<p>実はこのウィンドウをまたいだ移動についてはvim-easymotionの開発を引き継いだころからずっと欲しいなぁ〜やりたいな〜と思っていた待望の機能でした．
emacs版easymotionである <a href="https://github.com/winterTTr/ace-jump-mode">winterTTr/ace-jump-mode</a> や atomのsmalls (<a href="http://qiita.com/t9md/items/bca96d45af1a5244b5d1">ATOM - smalls つくった - Qiita</a>)ではラベルジャンプでウィンドウ移動ができています．</p>

<p>どの拡張も，もともとはEasyMotion にインスパイアされて作ったもので，他の機能はともかく少なくともウィンドウ間をまたげるという一点ではvim-easymotionを上回っていました．
ではなぜ，vim-easymotionでもやりたいなぁと思っていたのに，これまで実装できていなかったかというと，
これは<strong>「vim-easymotionのコードがちょっと闇でつらかった&hellip;」</strong>というわけではなく Vim の機能でやるのがきつかったことに起因します．
Vimにはオーバーレイで文字を表示するといった機能がないのでvim-easymotionでは一旦バッファの文字を書き換えて戻すという実装になっていました．
この実装だと同じバッファを別ウィンドウに表示している場合にラベルがバッティングしてしまいます．</p>

<p>では今回どうしたかというと Vim の conceal 機能, <a href="http://vim-jp.org/vimdoc-ja/syntax.html#%3Asyn-cchar">:h syn-cchar</a> を使っています．
この機能を使えば直接バッファを書き換えずにラベルを表示できるので，同じバッファが別ウィンドウにあっても違ったラベルを表示することが可能です．</p>

<h3>Conceal の syn-cchar つらい問題</h3>

<p>しかし，このconcealでラベルを表示するというアイデア自体は以前からあって <a href="https://github.com/justinmk/vim-sneak">justinmk/vim-sneak</a>
がこのスタイルで表示しています(カーソルと同一ウィンドウだけですが)．
前からアイデアを知っていたのにやれなかったのは，決して<strong>「vim-easymotionのコードがちょっと闇でつらかった&hellip;」</strong>というわけではなく
conceal機能はかなり制限があってやりたいことができなさそうだなぁと長らく思っていたからです．
というも，syn-ccharでは1文字しか表示できないし，空白行といった無の部分に文字を表示することができません．
この制限からラベルが2文字以上の時でも1文字しか表示できなかったり，
Tab文字や文字幅が2以上のマルチバイトの文字をラベルに置き換えるとラベル表示時に表示にズレが生じてしまいます．</p>

<h3>結局<strong>「vim-easymotionのコードがちょっと闇でつらかった&hellip;」</strong></h3>

<p>じゃあどうすればいいかというと，ここまでの話・実装を組み合わせると実は答えは出ています．
ラベルを表示するさいに対象が空白行や行末，マルチバイト文字であれば一旦スペースを追加またはスペースに置き換えてしまう前処理をすればOKです．
そうすれば空白行や行末を対象とできるし，2文字のラベルも表示できるし，ラベルを表示した際に表示のズレが生じません!
やったぜこれで理論上実装可能じゃん!</p>

<p>なぜこれに気づくのに時間がかかったのかというと結局<strong>「vim-easymotionのコードがちょっと闇でつらかった&hellip;」</strong>
のでしばらくeasymotionにまともに向き合ってなかったからでした．
vim-easymotionはforkする前のもともとコードがそんなに綺麗じゃなかった上に，
プログラミング自体ほとんど初心者だった僕が以前に便利な機能を追加したりVimとの互換性を保ったりすることと引き換えに，
コードは比較的カオス状態になっていました．
僕の実装力ではこれを互換性を保った状態でリファクタして他のウィンドウへ移動する抜本的な機能改善なんて無理や&hellip;
と内心思っていましたし，実際無理感あります．
こういった理由でウィンドウ間移動という待望の機能は2年間ほど待望の機能であり続けました．</p>

<h3>1から作って互換性意識すればいいんじゃん?</h3>

<p>互換性保ちながらリファクタしていくのがつらいなら1から作って，インターフェースを既存のeasymotionと合わせればいいんじゃないか?
と気付き，今回の機能は実装されました．</p>

<p>「パンがなければお菓子を食べればいいじゃない」に通ずるものがあります(ない)</p>

<p>これに気づいてやってみると，一旦動くところまで実装する程度なら1日程度で待望の機能が実装できました．
やってみるものですね．</p>

<p>しかし，vim-easymotionを活発に開発していた2年前の僕にはできなかったかなぁと感じていて，
これまでに incsearch.vim といった他のプラグインを作った知見や，他の Vim プラグイン開発者から得た知見，
そして2年間でちょっと基本的な開発力があがったおかげで開発できたなぁと思います．
みなさまありがとうございました．そして自分，まだまだですがちょっと頑張ったなって思いました．</p>

<p>開発の実装や背景の話と2年前に熱を入れて取り組んでいたvim-easymotionに今の自分が取り組んでみたらちょっと感慨深かったなという話でした．</p>

<h2>おわりに</h2>

<p><a href="https://github.com/easymotion/vim-easymotion">vim-easymotion</a>, また一段と便利になったので是非使ってみてください!</p>

<p>僕はもうこの機能なしでは生きていけなさそうです．</p>

<p><strong>あぁ〜カーソルがぴょんぴょんするんじゃぁ〜</strong></p>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">vim-easymotion, あぁ〜カーソルがぴょんぴょんするんじゃぁ〜 って感じだ</p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/687679866175500288">January 14, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<script src="http://lab.lepture.com/github-cards/widget.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年夏，はてなインターンでMackerelをとにかく便利にして優勝してきた]]></title>
    <link href="http://haya14busa.com/hatena-intern-2015/"/>
    <updated>2015-12-31T22:15:00+09:00</updated>
    <id>http://haya14busa.com/hatena-intern-2015</id>
    <content type="html"><![CDATA[<p>インターン終わったときに書きたかったのですが，バタバタしていたのと，イカ
(<a href="https://www.nintendo.co.jp/wiiu/agmj/">Splatoon</a>)という麻薬に犯されたので2015
年の振り返りとして書いています． 乗り遅れた感しかないけど記録として残しておきま
す！
2015年全体の振り返りはこちら -> <a href="http://haya14busa.com/look-back-2015/">はてな，Googleインターン行ってイカやりすぎたイカVimmerの2015年の振り返り - haya14busa</a></p>

<p>今年の夏はどこかインターン行きたいなぁ〜，最高の夏を過ごしたいなぁ〜と思っていました．
そんな時に <a href="http://hatenacorp.jp/recruit/intern2015/">はてなサマーインターン2015</a> 情報，
特に今年は<a href="http://developer.hatenastaff.com/entry/2015/04/08/124053"> <strong>Scala</strong> や swift が書けるコースもある</a>
という話を聞いてこれは行きたい! と応募しました．
その結果幸運なことに選考に受かったので8月10日から9月4日まで最高の夏を過ごしにはてなインターンに行ってきました．</p>

<h3>はてなインターン TL;DR</h3>

<ul>
<li><del>噂の(?)今年のインターン生の Emacs 率が0だった</del>

<ul>
<li><blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">【速報】今年のはてなインターン参加者のEmacs率はなんと 0 とのこと</p>&mdash; Shinji Tanaka (@stanaka) <a href="https://twitter.com/stanaka/status/630582977349595136">August 10, 2015</a></blockquote></li>
</ul>
</li>
<li>僕は言語がScalaのMackerelコースで， <a href="http://blog.hatena.ne.jp/tyage/">id:tyage</a> くんさんと一緒に Mackerel を便利にして優勝してきましたっ! めでたいっ 🎉🎉🎉</li>
<li>はてなインターンで優秀なはてなの社員さんや他のインターン生の仲間と開発できたのは最高の体験でした．もっかい体験したい．</li>
</ul>


<h3>参考情報</h3>

<ul>
<li>公式サイト <a href="http://hatenacorp.jp/recruit/intern2015/">はてなサマーインターン2015</a></li>
<li>公式レポート <a href="http://hatenacorp.jp/intern2015/">はてなサマーインターン2015 レポートサイト</a></li>
<li>GitHub

<ul>
<li>最高の教科書 <a href="https://github.com/hatena/Hatena-Textbook">hatena/Hatena-Textbook</a></li>
<li>最高のサンプルアプリ <a href="https://github.com/hatena/scala-Intern-Bookmark">hatena/scala-Intern-Bookmark</a></li>
<li>最高の事前課題 <a href="https://github.com/hatena/Hatena-Intern-Exercise2015">hatena/Hatena-Intern-Exercise2015</a></li>
<li>僕の事前課題回答 <a href="https://github.com/haya14busa/Hatena-Intern-Exercise2015">haya14busa/Hatena-Intern-Exercise2015</a></li>
</ul>
</li>
</ul>


<h3>はてなインターン応募と参加</h3>

<p>一昨年の2013年夏にインターン探していたときも，はてなインターン卒業生のブログな
どを読んで， はてなインターンよさそうだなぁ〜と思ってました．その時は能力たりな
さすぎて無理だろう&hellip;<del>というのと perl かぁ〜</del> という思いで応募すら出来ていま
せんでした．</p>

<p>今年は言語が Scala (!)のコースができていたこともあったこと，一昨年よりはアルバイトでScala
書いたりとある程度経験値積んでいて，Vim でよければいくつかアピールできるようなものもあったので
えいやっと応募しました．はてなインターンの選考では基本的にポートフォリオを提出するのみ
だったのですが，ポートフォリオは8割 Vim でした．評価されてよかった&hellip;</p>

<p>ところで実際にインターンに参加してから思ったことは，もし仮に書く言語が perl
だったとしても来たほうが良かったなということでした． もし来年度以降のインターン
に応募しようと思っているけど perl がちょっとネック&hellip;  くらいで参加を迷ってるな
ら勢いで参加申し込んでもよいと思います．</p>

<p>結局僕は perl 1行も書きませんでしたが．Scala最高!!!(コンパイル爆速になればより&hellip;)</p>

<h3>事前課題がScalaを基礎から勉強するのに最高</h3>

<p>さて，晴れてはてなインターンに行けることになったらインターンまでの学習としてちょっとした事前課題が課されます．</p>

<ul>
<li><a href="https://github.com/hatena/Hatena-Intern-Exercise2015">hatena/Hatena-Intern-Exercise2015</a></li>
<li>僕の解答: <a href="https://github.com/haya14busa/Hatena-Intern-Exercise2015">haya14busa/Hatena-Intern-Exercise2015</a></li>
</ul>


<p>この事前課題では perl か scala, それに JavaScript でいくつか課題が与えられ，問題を解いてテストを通していく形式でした．
事前課題は全体，課題ごとに課題のねらいが書いてあり，言語の基本を学ぶのに最高だと思いました．</p>

<p><a href="https://github.com/hatena/Hatena-Intern-Exercise2015/tree/master/scala">Scala の課 題</a>
は 与えられたログ用に <a href="http://ltsv.org/">Labeled Tab-separated Values (LTSV)</a>
パーサを書くという課題だったのですが，言語の基本やテストの仕方，テストの追加の
仕方はもちろんのこと，問題の性質上 エラーハンドリングをどうするか，<code>Option</code>型を
使うか，<code>Either</code>型を使うか，パース失敗時に エラーの行を収集するために
<a href="https://github.com/scalaz/scalaz">scalaz</a> でいう <code>Validation</code> 型を使えばベンリ
なんじゃないか&hellip;!といろいろやりがいがありました． もっと言うと指定されたログの
モデル以外にも対応できるような汎用的なLTSVパーサにしたら便利そうと思ったんですが
そこまでは時間と実力が足りなくてできませんでした．残念．</p>

<p>LTSV パーサ，Scalaの課題としてよかったなぁと思います．</p>

<p>またこの事前課題は単にテストを通して提出すると終了&hellip;というわけではなくインターンの初日あたりに
講評が行われるのが最高でした．自分のコードはどう書けばよりよかったのか，他のインターン生は
どう書いていてどこがよかったのかといったことも知れて便利でした．この講評はインターンの前半課題
でも行われました．</p>

<h3>前半の講義がウェブ開発を基礎から勉強するのに最高</h3>

<ul>
<li><a href="http://hatenacorp.jp/intern2015/lecture/">講義パート - はてなサマーインターン2015 レポートサイト</a></li>
<li>教科書 <a href="https://github.com/hatena/Hatena-Textbook">hatena/Hatena-Textbook</a></li>
</ul>


<h4>スケジュール</h4>

<ul>
<li>1日目 Perl/Scalaによるプログラミングの基礎</li>
<li>2日目 Perl/Scalaによるデータベースプログラミング</li>
<li>3日目 Perl/ScalaによるWebアプリケーション開発</li>
<li>4日目 JavaScriptによるイベント・ドリブンプログラミング</li>
<li>5日目 自由課題</li>
<li>6日目 インフラ</li>
<li>7日目 SwiftでのiOSアプリ開発</li>
</ul>


<p>前半の講義パートは言語の基礎からWebアプリケーション，インフラ，それにSwift
コースや希望者はSwiftのiOSアプリ開発までを1週間で学べるようになっていました．
それぞれのコースのインターン生ごとにメンターさんがついてくれます．僕の場合は
<a href="http://sixeight.hatenablog.com/">id:sixeight</a> さん でした．</p>

<p>毎日課題が課されてそれをメンターさんに質問したり，レビューを受けたり，講評をも
らったりとﾋｲﾋｲこなして行くことで後半に向けて基礎力を向上できる仕組みになってい
ました．大変でしたが楽しかった&hellip;!</p>

<p>課題としては自由課題が最後で，その内容はそれまでに学んできた技術と課題で作って
きたブログシステムを活かして好きなWeb アプリケーションを作るというものでした．</p>

<p>ここで作ったサービスは社内で投票で順位もつく前半の集大成という課題で厳しくも楽
しい，燃える課題となっていました．僕はあんまり独創的なアイデアのなくこれがあれ
ばベンリやろ〜というノリでちょっとしたものしか作れなかったのですが，他のイン
ターン生のアプリケーションのクオリティが高くて刺激になりました．</p>

<p>完全に言い訳になるのですが僕は自由課題の日の前の土日で開催されたオープンイン
ターネッツに公開されてない，はてなで行われたもくもく回ハッカソンで途中まで
作ってた <a href="http://haya14busa.com/vim-vital-power-assert/">Vim script版 power-assert</a>
に夢中になってました．
他のインターン生のつくったサービスをみてもっと自由課題に力入れればよかった&hellip;と
思ったので来年度以降はてなインターンへの参加を考えている各位は前半最後の自由
課題はやりがいあってよいよ！と言っておきます．</p>

<h3>後半の実践パートでサービスにコミットしていく実践経験が得られて最高</h3>

<p><a href="http://hatenacorp.jp/intern2015/projects/">実践パート - はてなサマーインターン2015 レポートサイト</a></p>

<p>今年から前半/後半の比率が代わり前半が少し短く，その分後半の実践パートが長く
なったようです．開発に時間がとれてベンリ．</p>

<p>後半は僕は <a href="http://blog.hatena.ne.jp/tyage/">id:tyage</a> くんさんと一緒にMackerelコースに配属され，
ちょっとしたバグ修正によるインターン生最速リリース(ちょっとｽﾞﾙｲ)から始まり4つほ
ど多方面からMackerelの機能改善や新機能のリリースを行い，最終成果発表で1位を獲得できました!</p>

<p>だいたい <a href="http://blog.hatena.ne.jp/tyage/">id:tyage</a> くんやメンターの
<a href="http://sixeight.hatenablog.com/">id:sixeight</a>さんをはじめとするMackerelチーム
の皆さんのおかげでした．</p>

<p><a href="http://blog.hatena.ne.jp/tyage/">id:tyage</a> くんさんはインターンまでScalaほとんど書いてなかったらしいのに，
後半過程では1年くらいScala経験あった僕と同じかそれ以上のレベルでScalaかけちゃうし，
JavaScriptまわりでペアプロして相談しても的確に正しい方向に導いていってくれるし最強かよ〜という感じでした．
<a href="http://blog.hatena.ne.jp/tyage/">id:tyage</a> くんさんとのペアプロ，最高に便利体験でした.</p>

<p><a href="http://sixeight.hatenablog.com/">id:sixeight</a>さんやMackerelチームの方には
方針を一緒に考えてもらったり，ダメなところをダメと指摘してもらったり，実装・仕様の相談をさせてもらったりと，
最高の体験でした．</p>

<p><a href="http://blog.hatena.ne.jp/tyage/">id:tyage</a>くんや優秀なMackerelチームのメンバーと
少しの間とは言えチームとして働く経験ができて，しかも最後には優勝というおまけまでついてきて
最高の夏を過ごせました．ありがとうございました!</p>

<h3>はてなインターン最高でした</h3>

<p>上述したカリキュラム上の話だけじゃなく毎日おいしいはてなのまかないをはてなの社員さんと
お話しながら食べたり，他の優秀なインターン生の話を聞いたり，実力を垣間見たり，
インターン途中に参加したYAPCや社内TGIF，ごはん連れてってもらったりしたときにはてなの社員さんの
話を聞いたりなどなど，最高の夏を過ごせました．</p>

<p>逆に慣れなかったことといえばはてなの 「<a href="http://hitode909.hatenablog.com/entry/2014/12/02/205958">シュッと</a>」
っという言葉だけは いやいや「サッと」とかのほうが馴染むじゃん&hellip;?とあんまり慣れな
かったのですが， インターン終わってから「シュッと」，いいじゃん使いやすいじゃん&hellip;?
となぜかインターン終わってから馴染むようになってしまいました．不思議だ&hellip;</p>

<h3>他のインターン生の紹介</h3>

<p>イカしたやつらを紹介するぜ! ってやつ．終始凄い人多すぎてびびってました&hellip;
僕も頑張りたい．</p>

<ul>
<li><a href="http://blog.hatena.ne.jp/akiym/">id:akiym</a> perl, CTFのプロ</li>
<li><a href="http://blog.hatena.ne.jp/daiiz/">id:daiiz</a> インターン委員長のプロ! 同窓会すき焼き(?)おねがいします

<ul>
<li><a href="http://daiiz.hatenablog.com/entry/2015/09/11/101815">はてなサマーインターンが終わり、エンジニアへの道が始まった - daizの日記</a></li>
</ul>
</li>
<li><a href="http://blog.hatena.ne.jp/SWIMATH2/">id:SWIMATH2</a> idが定まらないプロ(?). いろいろつくっていて面白い

<ul>
<li><a href="http://swimath2.hatenablog.com/entry/2015/09/29/181805">中2の頃から大好きなはてなのインターンで最高の経験をした話 - クフでダローバルな日記</a></li>
</ul>
</li>
<li><a href="http://blog.hatena.ne.jp/hiroqn/">id:hiroqn</a> 常識人ミュージシャンのプロ</li>
<li><a href="http://blog.hatena.ne.jp/kakira96/">id:kakira96</a> 競プロとかWebGLとか多彩に出来るょぅじょのプロ．kakiraさんには関心しっぱなしだった&hellip;</li>
<li><a href="http://blog.hatena.ne.jp/karur4n/">id:karur4n</a> ポッドキャスト(<a href="http://kumocast.jp/">くもキャスト</a>)やってるプロ．Vimの回あれば呼んでください</li>
<li><a href="http://blog.hatena.ne.jp/Lepton/">id:Lepton</a> 競プロのプロ

<ul>
<li><a href="http://leptont.hatenablog.jp/entry/hatenaintern2015">最高のはてなサマーインターン - うに</a></li>
</ul>
</li>
<li><a href="http://blog.hatena.ne.jp/tom__bo/">id:tom__bo</a> インターン最終日に最高最高言うプロ

<ul>
<li><a href="http://tombo2.hatenablog.com/entry/2015/09/07/023655">はてなサマーインターン2015に参加してきた - tom__bo’s blog</a></li>
</ul>
</li>
<li><a href="http://blog.hatena.ne.jp/tyage/">id:tyage</a> 最高の相方プロ

<ul>
<li><a href="http://tyage.hatenablog.com/entry/2015/09/30/235943">Scalaの夏、はてなインターンの夏 - tyage&rsquo;s diary</a></li>
</ul>
</li>
<li><a href="http://blog.hatena.ne.jp/daguniko/">id:daguniko</a> eemonさん似のプロ</li>
<li><a href="http://blog.hatena.ne.jp/eemon18/">id:eemon18</a> dagunikoさん似のプロ

<ul>
<li><a href="http://emon18.hateblo.jp/entry/2015/09/30/222214">はてなサマーインターンシップ2015に行ってきました - e-mon</a></li>
</ul>
</li>
</ul>


<p><strong>最高の夏〜</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はてな，Googleインターン行ってイカやりすぎたイカVimmerの2015年の振り返り]]></title>
    <link href="http://haya14busa.com/look-back-2015/"/>
    <updated>2015-12-31T21:15:00+09:00</updated>
    <id>http://haya14busa.com/look-back-2015</id>
    <content type="html"><![CDATA[<p>今年は4月から大きく環境が変わったり，インターンに行ったりちょくちょくVim活したりイカ(<a href="https://www.nintendo.co.jp/wiiu/agmj/">Splatoon</a>)したりと振り返ってみる
と色んな事がありました．</p>

<p>最初にネタバレをすると最も進捗があったのは Splatoon で最高ウデマエS+90まで行ったことでした．</p>

<p><strong>マンメンミ!</strong></p>

<h2>去年や一昨年の</h2>

<ul>
<li>Vim歴換算1年目 -> <a href="http://haya14busa.com/vim_driven_learning/">1年間『Vim駆動学習』してきて最高に楽しかったのでオススメしたい - haya14busa</a></li>
<li>プログラミング2年目 -> <a href="http://haya14busa.com/haya14busa-s-happy-vimming-year-2014/">2014年の振り返り. またはプログラミング2年目をVimに捧げるとこうなるという話 - haya14busa</a></li>
</ul>


<p>今年はプログラミング初めてからだいたい3年目でした．もう初心者とか言ってられないようになって気がしますが，まだまだ勉強不足・力不足すぎるので精進したい.</p>

<h2>はてなサマーインターン</h2>

<p>長くなったので記事分けた -> <a href="http://haya14busa.com/hatena-intern-2015/">2015年夏，はてなインターンでMackerelをとにかく便利にして優勝してきた - haya14busa</a></p>

<p><strong>最高の夏〜</strong></p>

<h2>Google Japan Software Engineer インターン</h2>

<p>はてなインターンが終わった後，3ヶ月ほどGoogle Japanのインターンに行っていました．
Googleは内側ではオープンで全然違う国の違うチームの情報を見れたりするオープンさなのですが，
外側にはオープンではないので基本的にブログに書いたらだめっぽい，というか線引きがわ
からないので参加した内容に関する感想は書けません&hellip;残念&hellip;</p>

<p>Googleの優秀なエンジニアさんたちとGoogleという会社で開発できたのは学びもやりが
いもたくさんあって最高の体験でした．</p>

<h2>インターン対策とか競技プログラミング</h2>

<p>はてなとGoogle以外にもいくつか応募して受かったり落ちたりしたのですが，
そのうち1回ホワイトボードコーディング面接があり，超基本的なことを聞かれているの
にぜんぜん答えられない&hellip;という苦い経験がありました．</p>

<p>頭のどこかで僕は情報学部じゃなかったし，プログラミングも独学で好きなことやってる段階だし
基礎的も知らなくてもまだ仕方ない&hellip;と思ってた節があったりしました．
しかしこれは完全に言い訳です．
<strong>基礎</strong>は土台．最低限理解して説明できる程度にはなってないと面接とか関係なく
マズいな&hellip;と思いデータ構造，アルゴリズムなど勉強しなおしました．</p>

<p>その一環として前から興味はあったんだけどなかなか手がでなかった競技プログラミングにも今年はちょくちょく手をだしはじめました．
最近ちょっとイカしすぎておろそかになってますがやっていきたいです．</p>

<h3>面接対策でつかった本とか</h3>

<h4>世界で闘うプログラミング力を鍛える150問</h4>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=haya14busa-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00HR19TSO" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h4>The Joel on Software 採用面接ゲリラガイド</h4>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=haya14busa-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4274066304" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p><a href="http://local.joelonsoftware.com/wiki/%E6%8E%A1%E7%94%A8%E9%9D%A2%E6%8E%A5%E3%82%B2%E3%83%AA%E3%83%A9%E3%82%AC%E3%82%A4%E3%83%89(version_3.0">採用面接ゲリラガイド(version 3.0) - The Joel on Software Translation Project</a>)</p>

<h2>Vim 活</h2>

<h3>incsearch.vim v2.0</h3>

<ul>
<li><a href="https://github.com/haya14busa/incsearch.vim/releases/tag/v2.0.0">Release Version 2.0 · haya14busa/incsearch.vim</a></li>
<li><a href="http://haya14busa.com/incsearch-dot-vim-ver-2/">Vimの検索はもっともっと便利になる! incsearch.vim v2.0 をリリースしました - haya14busa</a></li>
<li>関連リポジトリ

<ul>
<li><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></li>
<li><a href="https://github.com/haya14busa/incsearch-migemo.vim">haya14busa/incsearch-migemo.vim</a></li>
<li><a href="https://github.com/haya14busa/incsearch-fuzzy.vim">haya14busa/incsearch-fuzzy.vim</a></li>
<li><a href="https://github.com/haya14busa/incsearch-easymotion.vim">haya14busa/incsearch-easymotion.vim</a></li>
<li><a href="https://github.com/haya14busa/vital-string-converter">haya14busa/vital-string-converter</a></li>
</ul>
</li>
</ul>


<p>incsearch.vimをカイゼンしてv2.0にしてました．もっと昔にやってた気がするけど今年
の7月でした．リファクタリングしてコンポーザブルにしたりと拡張性をましてincsearch.vimをより便利にできました．</p>

<h3>vital-power-assert と VimConf | Vim script 版 powerassert!</h3>

<ul>
<li><a href="https://github.com/haya14busa/vital-power-assert">haya14busa/vital-power-assert</a></li>
<li><a href="http://haya14busa.com/vim-vital-power-assert/">Vim script版 power-assert! テスト書いてないとかお前それ Vim script の前でも同じこと言えんの? - haya14busa</a></li>
<li><a href="http://vimconf.vim-jp.org/2015/">VimConf 2015</a></li>
</ul>


<p>はてなインターン中に作ってその後もちょくちょくと触ってました．またVimConfで発表したりもしました．</p>

<iframe src="https://docs.google.com/presentation/d/1Nkll31jRFpKCFUA-5ruEFoa1-ODAHBU7wRM5s5DyETk/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>去年も大概だったのですが今年は個人的にVimConfに向けての準備がゼンゼン足りてなくて来年こそはちゃんとするゾ!!という気持ちです．</p>

<h3>underscore.vim</h3>

<ul>
<li><a href="https://github.com/haya14busa/underscore.vim">haya14busa/underscore.vim</a></li>
</ul>


<p>underscore.jsのVim scriptバージョンを作ってました．実装は去年からなんだかんだやっていましたがエイプリルフールにリリースしました．
実用性がないわけではないけど，ラムダが無いとかスコープの関係上凝ったことしようとすると微妙に使いづらいのが残念ですが開発してて面白かったです．</p>

<h3>勢い Vim プラグイン系</h3>

<h4>niconicomment.vim</h4>

<ul>
<li><a href="https://github.com/haya14busa/niconicomment.vim">haya14busa/niconicomment.vim</a></li>
</ul>


<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/niconicomment.vim/niconicomment2.gif" alt="niconicomment2.gif (1366×747)" /></p>

<p>思い出したように実行すると面白い．</p>

<h4>vim-undoreplay</h4>

<ul>
<li><a href="https://github.com/haya14busa/vim-undoreplay">haya14busa/vim-undoreplay</a></li>
</ul>


<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/vim-undoreplay/undoreplay_fizzbuzz2.gif" alt="undoreplay_fizzbuzz2.gif (1366×747)" /></p>

<p>思い出したように実行すると面白い2．</p>

<h3>vital.vim にPullRequest</h3>

<ul>
<li><a href="https://github.com/vim-jp/vital.vim/pull/258">Vim.ScriptLocal: Add ScriptLocal (get script-local things) by haya14busa · Pull Request #258 · vim-jp/vital.vim</a></li>
<li><a href="https://github.com/vim-jp/vital.vim/pull/239">Add Data.Set module by haya14busa · Pull Request #239 · vim-jp/vital.vim</a></li>
<li><a href="https://github.com/vim-jp/vital.vim/pull/348">Data.Counter: Implement &ldquo;Data.Counter&rdquo; by haya14busa · Pull Request #348 · vim-jp/vital.vim</a></li>
</ul>


<p><a href="https://github.com/vim-jp/vital.vim">vim-jp/vital.vim</a> というVim scriptのライブラリにいくつか欲しいモジュールをPRで送ったりした．
Vim.ScriptLocal は Vim scriptのスクリプトローカル変数を外からハックするモジュールでVim scriptのテストフレームワークである
<a href="https://github.com/thinca/vim-themis">thinca/vim-themis</a> で使ってもらったりした．
他にはPythonあたりにある便利なデータ構造をVim scriptにポートする業などしていました．</p>

<h3>Vim Advent Calendar</h3>

<ul>
<li><a href="http://haya14busa.com/vim-mnemonic/">Vim Mnemonic | Vim のコマンドの覚え方大全 - haya14busa</a></li>
</ul>


<p>前から自分が欲しかった，まとめたかった記事を書きました．今までで最高ブクマ数を頂いてありがたい．</p>

<h3>vim-operator-flashy</h3>

<ul>
<li><a href="https://github.com/haya14busa/vim-operator-flashy">haya14busa/vim-operator-flashy</a></li>
</ul>


<p>年末駆け込みプラグイン．VimConfで<a href="https://github.com/t9md">t9md</a>さんが開発してる
<a href="https://github.com/t9md/atom-vim-mode-plus">t9md/atom-vim-mode-plus</a> でヤンク対象を
フラッシュしていてわかりやすいというのを見せて頂いたのがきっかけになってます．
地味にUX向上してよい．</p>

<h2>参加・発表したミートアップ・勉強会系</h2>

<h3>YAPC</h3>

<ul>
<li><a href="http://yapcasia.org/2015/">YAPC::Asia Tokyo 2015</a></li>
<li><a href="http://haya14busa.com/yapcasia-2015/">ブログを書くまでが #yapcasia なのでブログでLT発表して感想かく ― Vim駆動学習 - haya14busa</a></li>
</ul>


<p>YAPCに初めて参加しました．学生無料便利すぎました．LT発表は応募したのですが残念ながら落ちて残念．</p>

<h3>Yokohama.vim</h3>

<ul>
<li><a href="http://yokohamavim.connpass.com/event/21069/">Yokohama.vim.osaka? #7 - connpass</a></li>
</ul>


<p>Yokohama.vimではなぜか基調講演という名の戦犯をしてきました．
内容はYAPCでしようとしていたVim駆動学習の話の微調整という感じでした．
ちゃんと基調講演と言えるような発表をできるようになってまたYokohama.vim参加したい．</p>

<h3>VimConf 2015</h3>

<p>上述した．</p>

<h3>fpinscala読書会完走</h3>

<ul>
<li><a href="https://www.manning.com/books/functional-programming-in-scala">Functional Programming in Scala</a></li>
<li><a href="http://fpscala-osaka.connpass.com/">fpscala-osaka - connpass</a></li>
</ul>


<p>大阪で定期的に開催されていたfpinscala読書会でFunctional Programming in Scalaを(一応)読了しました．
が，まだまだ理解しきれてないところ，飛ばしたところなどたくさんあるので2週目に参加してしっかり
関数型プログラミング身につけたいなと思います．</p>

<h2>GitHub 記録</h2>

<ul>
<li><a href="https://github.com/search?utf8=%E2%9C%93&amp;q=is%3Apr+author%3Ahaya14busa+created%3A%222015-01-01+..+2016-01-01%22+">2015年に出したPull Request一覧</a></li>
<li><a href="https://github.com/pulls?utf8=%E2%9C%93&amp;q=is%3Aissue+author%3Ahaya14busa+created%3A%222015-01-01+..+2016-01-01%22+">2015年に開いたPull Request一覧</a></li>
</ul>


<p>あんまり大したことできてなかった</p>

<h2>Splatoon</h2>

<p><img src="../images/splatoon/IMG_0424.JPG" alt="Splatoon S+ 90" /></p>

<p>インターン中に買ってインターン終了までにS+になるという目標は達成したのですが，
年内にカンストするという目標は残念ながらできませんでした．
しかし，今年の後半は本当にイカしかやってないというベルでやっていてイカ進捗が一番でてました．
イカちゃん楽しすぎる&hellip;</p>

<p>よかったらみなさん一緒にイカしましょう!</p>

<h2>その他</h2>

<p>ちょくちょくReact触ったり, 引き続きScala書いたり, golang はじめたりしましたが，
OSSっぽいこと，ここに書くようなことはほとんどできませんでした．</p>

<h2>最後に</h2>

<p>今年は環境が変わっただとか，インターン長期間行ってたとか，Splatoonやってたとか
で特に今年後半はあんまり見える活動できてなかったです．もっと頑張りたい．</p>

<p>去年も似たようなこと言ってたような気がしますが来年はVimはもちろんのことVim以外のこともやっていきたいなぁと思います．
あともう少し大きいレベルで目標を定めてそれに向かってやれるとよさそう(まだふわふわだけど真剣に考えなきゃ&hellip;)．</p>

<p>それと今年最も苦労して迷惑かけたのは英語ではないかという説があるので，
来年は英語でコミュニケーションとれるように頑張って勉強していきたいですね．</p>

<p>以上, <a href="https://twitter.com/haya14busa">@haya14busa</a> の 2015年の振り返り記録でした.</p>

<p><strong>来年もイカよろしく〜</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Mnemonic | Vim のコマンドの覚え方大全]]></title>
    <link href="http://haya14busa.com/vim-mnemonic/"/>
    <updated>2015-12-21T02:55:02+09:00</updated>
    <id>http://haya14busa.com/vim-mnemonic</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://qiita.com/advent-calendar/2015/vim">Vim Advent Calendar 2015</a> の21日目の記事です．</p>

<h2>もくてき</h2>

<p>本記事では Vim のコマンドの&#8221;覚え方&#8221;を紹介します．
基本的にはトリッキーな&#8221;覚え方&#8221;ではなく由来の紹介となります．
例えば <code>J</code> で行連結は <strong>J</strong>oin が元だとか， <code>gf</code>が&#8221;<strong>g</strong>oto <strong>f</strong>ile&#8221;の略だといったことを
知っておくとなにかと憶えやすいと思います．</p>

<h2>対象読者</h2>

<p>主にこれから Vim を使ってみよう! でもなかなかコマンドを覚えられないっ! という Vim 初心者の方に由来を知ることで少しでも
コマンドを憶えやすいようにすることが目的です．
初心者を想定しているのでコマンドの動作などもなるべく紹介していきます．</p>

<p>中・上級者の方には普段何気なく使ってたあのコマンドの由来を知って「フハハハハ」と
ほくそ笑んでもらえるような記事になれば嬉しいです．</p>

<h2>注意</h2>

<p>注意点として公式のものから公式<strong>っぽい</strong>もの，独自の調査結果によるものなど信憑性はまちまちです．
そしてVimのコマンドは無数にあるので覚え方大全と言っておきながらすべてを網羅できているわけではなくかなり偏っています．
抜けてるものとか間違ってるものとか俺はこう覚えてるぜ!というものがあったら教えてください!</p>

<p>出典は</p>

<ul>
<li>ヘルプファイル</li>
<li>ソースコード</li>
<li>出典不明だけどどこかで見聞きした話</li>
</ul>


<p>などです．基本英語に直して理解する方針のものが多いです．</p>

<p>またこれからたくさんのコマンドを羅列していきますがすべてを覚える必要は一切ないこと，
そして逆にここに載ってない便利な覚えるべきVimコマンドはきっとたくさんあるので覚えようと気負ったり，
だいたいわかるからokと思ったりしないようにおねがいします．</p>

<p>そして何よりの注意点としては結局覚え方よりも実際にやってみることが大事だということです!!!</p>

<p>ただ単にやってみるだけでなく由来や覚え方も知ることでより憶えやすくなったらよいなというのが本記事の趣旨なので，
深く考えすぎずにそうなんだ〜へぇ〜と思いながら読むとよいと思います．</p>

<p>ではスタートっ</p>

<h2>基本のカーソル移動 hjkl</h2>

<h3>vimtutor Lesson1</h3>

<pre><code class="``">        ^
        k              Hint:  The h key is at the left and moves left.
  &lt; h       l &gt;               The l key is at the right and moves right.
        j                     The j key looks like a down arrow.
        v
</code></pre>

<p>出典: vimtutor</p>

<p>右手のホームポジションから1つ左にあるので<code>h</code>は左方向に移動し, 右にある<code>l</code>が右方向への移動です．
<code>j</code>はどことなく<code>↓</code>(下矢印)に似ているので下方向に移動すると憶えましょう．
<code>k</code>に関してはどことなく上にとんがってるので上方向に移動すると考えてもいいかも知れません．</p>

<h3>もともとのhjklの由来</h3>

<ul>
<li>出典: <a href="https://groups.google.com/forum/#!searchin/vim_use/hjkl/vim_use/Hz6x-jwUd-k/QsOmjBvZ1UsJ">h j k l &ndash; keys - Google Groups</a></li>
</ul>


<p>viの開発者である<a href="https://ja.wikipedia.org/wiki/%E3%83%93%E3%83%AB%E3%83%BB%E3%82%B8%E3%83%A7%E3%82%A4">ビル・ジョイ</a>さんが
当時使っていたPCが<a href="https://en.wikipedia.org/wiki/ADM-3A">ADM-3A - Wikipedia, the free encyclopedia</a>であり，
そのキーボードには矢印キーはなくHJKLを使ってカーソルを移動していたのが由来とのこと．</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/KB_Terminal_ADM3A.svg/931px-KB_Terminal_ADM3A.svg.png" alt="931px-KB_Terminal_ADM3A.svg.png (931×301)" /></p>

<p>この由来は知っても憶えやすくならない単なる豆知識でした．</p>

<h2>VIM の保存，終了と! (<code>&lt;bang&gt;</code>)</h2>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>:q</code> <code>:q[uit]</code> </td>
<td> カレントウィンドウを閉じる．<strong>q</strong>uit から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/editing.html#%3Aq">:h :q</a></td>
</tr>
<tr>
<td> <code>:qa</code> <code>:qa[ll]</code> </td>
<td> <strong>q</strong>uit <strong>all</strong> から． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/editing.html#%3Aqa">:h :qa</a></td>
</tr>
<tr>
<td> <code>:q!</code>, <code>:qa!</code>  </td>
<td> バッファに変更点があっても閉じる． <strong>q</strong>uit + <code>!</code>． </td>
<td></td>
</tr>
<tr>
<td> <code>:w</code> <code>:w[rite]</code> </td>
<td> バッファ全体をカレントファイルに書き込む．<strong>w</strong>riteから </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/editing.html#%3Aw">:h :w</a></td>
</tr>
<tr>
<td> <code>:wq</code> <code>:wqall</code> </td>
<td> <code>:w</code>と<code>:q</code>の組み合わせ </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/editing.html#%3Awq">:h :wq</a></td>
</tr>
</tbody>
</table>


<h3>コマンド末尾の<code>!</code></h3>

<p><a href="http://vim-jp.org/vimdoc-ja/map.html#%3Acommand-bang">:h :command-bang</a></p>

<p>Vim のコマンドは<code>!</code>修飾子を取ることができ，<code>!</code>の有無によって動作が変わる場合があります．
基本的には強制的に実行するという意味合いが多いので憶えておくと未知のコマンド + <code>!</code>に出会った時に
びっくりしないですみますね．</p>

<h2>挿入コマンド</h2>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>i</code> </td>
<td> カーソルの前にテキストを[count]回挿入する．<strong>i</strong>nsertから </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#i">:h i</a></td>
</tr>
<tr>
<td> <code>I</code> </td>
<td> 行の先頭の非空白文字の前にテキストを[count]回挿入する．<strong>i</strong>nsertの大文字バージョン．大文字は行指向になるパターンが多い印象 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#I">:h I</a></td>
</tr>
<tr>
<td> <code>a</code> </td>
<td> カーソルの後ろにテキストを[count]回追加する．<strong>a</strong>ppendから </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#a">:h a</a></td>
</tr>
<tr>
<td> <code>A</code> </td>
<td> 行末にテキストを[count]回追加する． <strong>a</strong>ppendの大文字バージョン </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#A">:h A</a></td>
</tr>
<tr>
<td> <code>o</code> </td>
<td> カーソルのある行の下に新しい行を作り、そこにテキストを[count]回繰り返し挿入する．<strong>o</strong>pen line から. </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#o">:h o</a></td>
</tr>
<tr>
<td> <code>O</code> </td>
<td> カーソルのある行の上に新しい行を作り、そこにテキストを[count]回繰り返し挿入する．<strong>o</strong>pen line の大文字バージョン. </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#O">:h O</a></td>
</tr>
<tr>
<td> <code>gi</code> </td>
<td> 最後に入力がされた場所にテキストを入力. <strong>g</strong>oto last <strong>i</strong>nsert position and start <strong>i</strong>nsert と思ってたが<strong>g</strong>は単なるprefixかも．後述する<code>gv</code>は<code>gi</code>のヴィジュアル版っぽい </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#gi">:h gi</a></td>
</tr>
</tbody>
</table>


<h2>モーション，オペレータ, テキストオブジェクト, ヴィジュアルモードについて</h2>

<p>個々のモーション(<code>hjlk</code>, <code>w</code>, etc&hellip;)やオペレータ(<code>d</code>,<code>c</code>, <code>y</code>&hellip;)について
それぞれ説明する前に全体的な動作について理解しておくと覚えることが減って,
しかもとても便利なのでぜひ理解しましょう.</p>

<h3>モーション {motion}</h3>

<pre><code class="``">  [count] {motion}
</code></pre>

<p><a href="http://vim-jp.org/vimdoc-ja/motion.html#motion.txt">:h motion.txt</a></p>

<p>モーションとはカーソル移動コマンドです．<code>[count]</code>を前置すると<code>[count]</code> x <code>{motion}</code>分だけ移動します．
すでに見た<code>hjkl</code>ももちろんモーションなので<code>4h</code>などすると左に4文字移動するという意味になります．</p>

<h3>オペレータ {operator} とモーション {motion}</h3>

<p><a href="http://vim-jp.org/vimdoc-ja/motion.html#operator">:h operator</a></p>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/8d8cb3eab06d240dbb1c1e2057fd80f8a6d4378b/misc/d2w.gif" alt="d2w.gif (661×157)" /></p>

<pre><code class="``">  {operator} {motion}
</code></pre>

<p>厳密にはカウントを<code>{operator}</code>,<code>{motion}</code>のそれぞれに前置することができるので以下のようになります．
(<code>[count]</code>を両者に前置させると掛け算になります. <code>2d3w</code> -> 6つの単語を削除.
普通に<code>6dw</code>や<code>d6w</code>としたほうが基本的にわかりやすそうですね)</p>

<pre><code class="``">  [count] {operator} [count] {motion}
</code></pre>

<p>またオペレータによってはレジスタを前置できます．<a href="http://vim-jp.org/vimdoc-ja/change.html#registers">:h registers</a></p>

<pre><code class="``">  ["x] [count] {operator} [count] {motion}
</code></pre>

<p>Vimは変更する，削除するといった操作を表すオペレータ<code>{operator}</code>と，
その操作の適用範囲であるモーション<code>{motion}</code>を組み合わせることでテキストを編集できます．
先ほどみた<code>{motion}</code>に操作を加えている形になっています．</p>

<h3>オペレータ {operator} とテキストオブジェクト {text-objects}</h3>

<p><a href="http://vim-jp.org/vimdoc-ja/motion.html#text-objects">:h text-objects</a></p>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/b4e5cb04da9fee94c676d16eb38e5dec2d131690/misc/di'.gif" alt="di'.gif (657×128)" /></p>

<pre><code class="``">  {operator} {text-objects}
</code></pre>

<p>また，移動コマンドとしては使えないけれど<code>{operator}</code>と組み合わせた時の操作範囲
となるテキストオブジェクトを先ほどの<code>{motion}</code>の代わりに使うことができます．
例えば文字列の中身を削除(オペレータの1つ)したい場合の&#8221;文字列の中身&#8221;は移動するような概念
ではないですが，オペレータの操作対象として妥当です．</p>

<h3>ヴィジュアルモード とモーション，テキストオブジェクト</h3>

<p>そして厳密にはオペレータではないですがヴィジュアルモードでもモーションやテキストオブジェクトと
組み合わせることができ，対象の範囲を選択できます．</p>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/b4e5cb04da9fee94c676d16eb38e5dec2d131690/misc/vi'.gif" alt="vi'.gif (657×177)" /></p>

<pre><code class="``">  {visual-operation} {motion|text-objects}
</code></pre>

<p>ヴィジュアルモードを&#8221;選択する&#8221;という&#8221;操作&#8221;とみれば自然に理解できるかと思います．</p>

<h3>オペレータの対象範囲としてのヴィジュアル選択範囲 {Visual}</h3>

<p>そしてヴィジュアルモードで選択した範囲<code>{Visual}</code>は<code>{motion}</code>や<code>{text-objects}</code>
と同様にオペレータの対象範囲として使えます．</p>

<pre><code class="``">  {Visual} {operator}
</code></pre>

<h3>{operator}{operator} は行指向オペレーション!</h3>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/8d8cb3eab06d240dbb1c1e2057fd80f8a6d4378b/misc/gqq.gif" alt="gqq.gif (1131×312)" /></p>

<pre><code class="``">  [count] {operator} {operator}
</code></pre>

<p>そして上記の組み合わせの特殊なケースとしてオペレータ
(2コマンド以上のオペレータの場合は最後の文字のみでも可)，
を繰り返して入力すると操作範囲が行指向になります．</p>

<p>例えば<code>dd</code> や <code>yy</code> といったオペレータを繰り返すと行を削除したりヤンクできるといった具合です．</p>

<p>僕が観測している範囲ではこの挙動は<code>dd</code>や<code>yy</code>といった基本的な編集オペレータだけでなく，
全てのオペレータに当てはまっているので憶えておくと便利です．(ソースコードは読んでないので確証がない.)</p>

<p>例えば2文字のオペレータである<code>gq</code>(<a href="http://vim-jp.org/vimdoc-ja/change.html#gq">:h gq</a>)は
<code>gqq</code>や<code>gqgq</code>と打つことでカーソル下の行を整形できたりします．</p>

<h2>1つの変更単位としての {operator} {motion|text-objects}</h2>

<p><strong>Vim のおすすめコマンド10選!!!</strong> として &ldquo;<code>diw</code> でカーソル下の単語を消す&rdquo; といったここで述べた
オペレータとテキストオブジェクトをいっしょにまとめたものを1つのコマンドとして
紹介するような記事がたくさんあったりしますが，これらは1つのコマンドでもなんでもないです．
オペレータやモーション，テキストオブジェクトの概念を理解すれば無限大の組み合わせをそれぞれ
覚える必要はなく，便利なオペレータとモーションを別々に覚えてそれらを組み合わせればよいです．</p>

<p>これは覚え方とはまた別ですが上述したオペレータとモーション，テキストオブジェクトの組み合わせは
1つの&#8221;変更単位&#8221;となっておりドット<code>.</code>コマンドで同じ操作を繰り返すことも可能です (<a href="http://vim-jp.org/vimdoc-ja/repeat.html#.">:h .</a>)．</p>

<p>説明が長くなりましたが，ここからそれぞれのオペレータやモーションの覚え方について見ていきましょう．</p>

<h2>オペレータ {operator}</h2>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>c</code> </td>
<td> 変更する．<strong>c</strong>hangeから． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#c">:h c</a></td>
</tr>
<tr>
<td> <code>d</code> </td>
<td> 削除する．<strong>d</strong>eleteから． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#d">:h d</a></td>
</tr>
<tr>
<td> <code>y</code> </td>
<td> コピーする．<strong>y</strong>ankから． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#y">:h y</a></td>
</tr>
<tr>
<td> <code>gU</code> </td>
<td> 大文字にする．おそらくprefixとして<code>g</code> + <strong>U</strong>ppercaseから． 大文字にマッチする正規表現の <code>\U</code>． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#gU">:h gU</a></td>
</tr>
<tr>
<td> <code>gu</code> </td>
<td> 小文字にする．おそらく<code>gU</code>の逆で小文字にするから．小文字にマッチする正規表現の <code>\u</code>． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#gu">:h gu</a></td>
</tr>
<tr>
<td> <code>&gt;</code> </td>
<td> 右にインデントをシフトする．見た目から?． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#shift-left-right">:h &lt;</a></td>
</tr>
<tr>
<td> <code>&lt;</code> </td>
<td> 左にインデントをシフトする．見た目から?． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#shift-left-right">:h &gt;</a></td>
</tr>
<tr>
<td> <code>zf</code> </td>
<td> 折畳を作成する．<code>z</code>は後述するが&#8221;z&#8221; は紙片を折った様子を横からみた姿に見えるから．<code>f</code>は折りたたみを作成するのが一番基本コマンドと考えて<strong>f</strong>oldから?</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zf">:h zf</a></td>
</tr>
</tbody>
</table>


<p>他にも由来わからないけど便利なオペレータはあるので使って憶えましょう．個人的に憶えておくと便利そうなものをリストアップ．</p>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>=</code> </td>
<td> フィルタ処理. インデント整形 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#%3D">:h =</a></td>
</tr>
<tr>
<td> <code>gq</code> </td>
<td> 整形する．80文字で折り返すよう整形とかできる </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#gq">:h gq</a></td>
</tr>
</tbody>
</table>


<p>先ほどオペレータを連続させると対象が行指向になると説明したように,
<code>cc</code>なら行を変更，<code>==</code>や<code>gqq</code>で行を整形できます．個別に覚える必要はないですね.</p>

<p>また ヴィジュアルモードでの<code>&lt;</code> や <code>&gt;</code>を連続で操作するために下記のようなマッピング
をしている人もいますが，他の選択範囲に対するオペレータによる操作となんら変わらないので
代わりにドットリピート<code>.</code>を使って繰り返すことができます．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">vnoremap</span> <span class="p">&gt;</span> <span class="p">&gt;</span>gv
</span><span class='line'><span class="nb">vnoremap</span> <span class="p">&lt;</span> <span class="p">&lt;</span>gv
</span></code></pre></td></tr></table></div></figure>


<h3>ちょっと脱線してその他の変更コマンド系</h3>

<p><code>c</code>, <code>d</code>, <code>y</code>, <code>gU</code>&hellip;の他にもオペレータではない変更系コマンドがたくさんあります．<a href="http://vim-jp.org/vimdoc-ja/change.html">:h change</a></p>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>C</code> </td>
<td> 行末まで変更する．<strong>c</strong>hangeの大文字バージョン． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#C">:h C</a></td>
</tr>
<tr>
<td> <code>D</code> </td>
<td> 行末まで削除する．<strong>d</strong>eleteの大文字バージョン． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#D">:h D</a></td>
</tr>
<tr>
<td> <code>Y</code> </td>
<td> 行をコピーする．<strong>y</strong>ankの大文字バージョン．viの互換性から行末までではなく行． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#Y">:h Y</a></td>
</tr>
<tr>
<td> <code>p</code> </td>
<td> テキストをレジスタから貼付ける．<strong>p</strong>ut から．<strong>p</strong>aste と憶えてもよさそう </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#p">:h p</a></td>
</tr>
<tr>
<td> <code>P</code> </td>
<td> カーソルの前にテキストを貼り付ける. <code>p</code>の逆 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#P">:h P</a></td>
</tr>
<tr>
<td> <code>x</code> </td>
<td> カーソル下の文字を削除. バツマークに似てるから? </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#x">:h x</a></td>
</tr>
<tr>
<td> <code>X</code> </td>
<td> カーソルの前の文字を削除. <code>x</code>の逆 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#x">:h x</a></td>
</tr>
<tr>
<td> <code>s</code> </td>
<td> カーソル下の文字を削除して挿入を始める. <strong>s</strong>ubstituteから. </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#s">:h s</a></td>
</tr>
<tr>
<td> <code>S</code> </td>
<td> 行を削除して挿入を始める. <code>s</code>の大文字バージョン. </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#S">:h S</a></td>
</tr>
<tr>
<td> <code>r</code> </td>
<td> カーソル下の文字を置き換える. <strong>r</strong>eplaceから. </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#r">:h r</a></td>
</tr>
<tr>
<td> <code>R</code> </td>
<td> 置換モードに入る. <strong>r</strong>eplaceから. </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#R">:h R</a></td>
</tr>
<tr>
<td> <code>gr</code> <code>gR</code> </td>
<td> <code>r</code>, <code>R</code>の仮想文字バージョン. <strong>g</strong> prefix </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#gr">:h gr</a> <a href="http://vim-jp.org/vimdoc-ja/change.html#gR">:h gR</a></td>
</tr>
<tr>
<td> <code>J</code>, <code>gJ</code> </td>
<td> 行を連結する. <strong>J</strong>oin から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#J">:h J</a></td>
</tr>
<tr>
<td> <code>:s///</code> </td>
<td> 置換コマンド. 省略しないと<strong>s</strong>ubstitute </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#:substitute">:h :substitute</a></td>
</tr>
</tbody>
</table>


<h4>由来ナゾ変更コマンド</h4>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>&lt;C-a&gt;</code> </td>
<td> カーソルの下または後の数またはアルファベットに [count] を加える. <strong>a</strong>ddから? </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#CTRL-A">:h CTRL-A</a></td>
</tr>
<tr>
<td> <code>&lt;C-x&gt;</code> </td>
<td> カーソルの下または後の数またはアルファベットに [count] を減じる. 英語ではsubtractなので何故xかは不明．<code>CTRL-S</code>が端末によっては使えない．<code>X</code>が<code>A</code>に近いから? </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#CTRL-A">:h CTRL-A</a></td>
</tr>
</tbody>
</table>


<h2>モーション {motion}</h2>

<p><a href="http://vim-jp.org/vimdoc-ja/motion.html">:h motion.txt</a></p>

<h3>左右の移動</h3>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>0</code> </td>
<td> その行の最初の文字に移動. 0文字目??? </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#0">:h 0</a></td>
</tr>
<tr>
<td> <code>^</code> </td>
<td> その行の最初の文字に移動. 正規表現の<strong>^</strong></td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#^">:h ^</a></td>
</tr>
<tr>
<td> <code>$</code> </td>
<td> その行の最後の文字に移動. 正規表現の<strong>$</strong></td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#$">:h $</a></td>
</tr>
<tr>
<td> <code>g0</code> <code>g^</code> <code>g$</code> </td>
<td> それぞれのスクリーン行バージョン(折り返し考慮) </td>
<td></td>
</tr>
<tr>
<td> <code>gm</code> </td>
<td> スクリーンの幅の真ん中に移動. <strong>m</strong>idleから．出典: ソースコード. middle of &ldquo;g0&rdquo; and &ldquo;g$&rdquo;.</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#gm">:h gm</a></td>
</tr>
<tr>
<td> <code>f{char}</code> </td>
<td> 右に向かって [count] 番目に現れる {char} に移動．<strong>f</strong>indから&hellip;と思いきやヘルプ/ソースコード的にはfindとは一切書いてない．確かにfindに移動するニュアンスはないか&hellip;?</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#f">:h f</a></td>
</tr>
<tr>
<td> <code>F{char}</code> </td>
<td><code>f</code>の左に向かうバージョン.</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#F">:h F</a></td>
</tr>
<tr>
<td> <code>t{char}</code> </td>
<td> 右に向かって [count] 番目に現れる {char} <strong>まで</strong>移動．<strong>t</strong>ill(〜まで) から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#f">:h f</a></td>
</tr>
<tr>
<td> <code>T{char}</code> </td>
<td> <code>t</code>の左バージョン </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#f">:h f</a></td>
</tr>
</tbody>
</table>


<h4>由来ナゾ</h4>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>;</code> </td>
<td> [count] 回最後の f, t, F, T を繰り返す. 余った記号で<code>;</code>を順方向,<code>,</code>を逆方向にした? </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#;">:h ;</a></td>
</tr>
<tr>
<td> <code>,</code> </td>
<td> [count] 回最後の f, t, F, T を反対方向に繰り返す. </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#,">:h ,</a></td>
</tr>
</tbody>
</table>


<h3>上下の移動</h3>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>G</code> </td>
<td> [count] 行目の最初の非空白文字に移動.カウントがなければ最後の行． <strong>G</strong>oto から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#G">:h G</a></td>
</tr>
<tr>
<td> <code>gg</code> </td>
<td> [count] 行目の最初の非空白文字に移動.カウントがなければ最初の行． <strong>g</strong>oto から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#gg">:h gg</a></td>
</tr>
<tr>
<td> <code>{count}%</code> </td>
<td>ファイルの {count} パーセントの位置に移動．そのままパーセントで直感的! </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#%">:h %</a></td>
</tr>
</tbody>
</table>


<h3>単語単位の移動</h3>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>w</code> </td>
<td> [count] words前方に移動. <strong>w</strong>ord から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#w">:h w</a> <a href="http://vim-jp.org/vimdoc-ja/motion.html#word">:h word</a></td>
</tr>
<tr>
<td> <code>W</code> </td>
<td> [count] WORDS(非空白文字の連続)前方に移動. <strong>w</strong>ord から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#G">:h G</a> <a href="http://vim-jp.org/vimdoc-ja/motion.html#WORD">:h WORD</a></td>
</tr>
<tr>
<td> <code>e</code> </td>
<td> [count] word 前方の単語の終わりに移動. <strong>e</strong>nd of word から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#e">:h e</a></td>
</tr>
<tr>
<td> <code>E</code> </td>
<td> [count] WORD 前方の単語の終わりに移動. <strong>E</strong>nd of WORD から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#E">:h E</a></td>
</tr>
<tr>
<td> <code>b</code> </td>
<td> [count] words後方に移動. <strong>b</strong>ackward から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#b">:h b</a></td>
</tr>
<tr>
<td> <code>B</code> </td>
<td> [count] WORDS後方に移動. <strong>b</strong>ackward から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#B">:h B</a></td>
</tr>
<tr>
<td> <code>ge</code> </td>
<td> [count] word 後方の単語の終わりに移動. <strong>g</strong> prefix + <strong>e</strong>nd of word から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#ge">:h ge</a></td>
</tr>
<tr>
<td> <code>gE</code> </td>
<td> [count] WORD 後方の単語の終わりに移動. <strong>g</strong> prefix + <strong>E</strong>nd of WORD から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#gE">:h gE</a></td>
</tr>
</tbody>
</table>


<h3>オブジェクト単位で移動</h3>

<p>3つのオブジェクト,
<a href="http://vim-jp.org/vimdoc-ja/motion.html#sentence">sentence(文)</a>,
<a href="http://vim-jp.org/vimdoc-ja/motion.html#paragraph">paragraph(段落)</a>,
<a href="http://vim-jp.org/vimdoc-ja/motion.html#section">section(セクション)</a>
が存在し，それぞれ<code>()</code>, <code>{}</code>, <code>[]</code>が対応する．
セクションのみ少し例外で1桁目の&#8217;{&lsquo; か &rsquo;}&lsquo;への移動を2コマンド目で表現する.</p>

<p>他に特に覚え方はわからないので表は省略．</p>

<p><a href="http://vim-jp.org/vimdoc-ja/motion.html#object-motions">:h object-motions</a></p>

<h3>ジャンプ</h3>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>CTRL-O</code> </td>
<td>ジャンプリストの中の [count] だけ古いカーソル位置に移動({motion}ではない). <strong>O</strong>lder cursor position から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#CTRL-O">:h CTRL-O</a></td>
</tr>
<tr>
<td> <code>CTRL-I</code> </td>
<td>ジャンプリストの中の [count] だけ新しいカーソル位置に移動({motion}ではない). キーボードで<code>O</code>の左に<code>I</code>がある </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#CTRL-I">:h CTRL-I</a></td>
</tr>
<tr>
<td> <code>g;</code> </td>
<td>変更リスト中の [count] 個前の位置に移動. <code>;</code>が順方向への移動っぽい</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#g;">:h g;</a></td>
</tr>
<tr>
<td> <code>g,</code> </td>
<td>変更リスト中の [count] 個後の位置に移動. <code>,</code>が逆方向への移動っぽい</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#g,">:h g,</a></td>
</tr>
</tbody>
</table>


<h3>様々な移動</h3>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>%</code> </td>
<td> 対応するアイテム([{}])にジャンプ. percent と parentheses(丸括弧) をかけている? <code>%</code>の文字が<code>/</code>を挟んで対応した<code>○</code>があると憶えてもよいかも  </td>
<td><a href="http://vim-jp.org/vimdoc-ja/motion.html#%">:h %</a></td>
</tr>
<tr>
<td> <code>H</code> </td>
<td> スクリーンの最上行から [count] 行目(デフォルト: スクリーンの最上行)に移動, <strong>H</strong>ome(top) of window とhelpに書いてあるがhomeってそんなニュアンスあるんだろうか&hellip; <strong>H</strong>igh と覚えてもよいかもしれない．</td>
<td><a href="http://vim-jp.org/vimdoc-ja/motion.html#H">:h H</a></td>
</tr>
<tr>
<td> <code>M</code> </td>
<td> スクリーンの中央に移動．<strong>M</strong>iddle line of windowから</td>
<td><a href="http://vim-jp.org/vimdoc-ja/motion.html#M">:h M</a></td>
</tr>
<tr>
<td> <code>L</code> </td>
<td>スクリーンの最下行から [count] 行目(デフォルト: スクリーンの最下行)に移動．<strong>L</strong>ast line on the windowから．<code>H</code>を<strong>H</strong>ighと覚えた場合は<code>L</code>は<strong>L</strong>owと覚えてもよいかも</td>
<td><a href="http://vim-jp.org/vimdoc-ja/motion.html#L">:h L</a></td>
</tr>
</tbody>
</table>


<h4>角括弧コマンド: <code>[</code> + &ldquo;?&rdquo;, <code>]</code> + &ldquo;?&rdquo; 系</h4>

<p><a href="http://vim-jp.org/vimdoc-ja/vimindex.html#[">:h [</a></p>

<p>ブロックやメソッド，コメントといった何かしら決められたものの始まり，終わりに移動する．
&ldquo;?&#8221;には<code>({mM#*/</code>などが入る．</p>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来</th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>[{</code>, <code>[(</code>, <code>]}</code> or <code>])</code></td>
<td> マッチしない &lsquo;{&rsquo;, &lsquo;(&rsquo;, &lsquo;}&rsquo; &lsquo;)&rsquo; に移動</td>
</tr>
<tr>
<td> <code>[#</code>, <code>]#</code></td>
<td> マッチしない #if..#endif の最初か最後に移動.</td>
</tr>
<tr>
<td> <code>[/</code>, <code>[*</code>, <code>]/</code>, <code>]*</code></td>
<td> Cスタイルコメントの最初か最後に移動.</td>
</tr>
<tr>
<td> <code>[m</code> or <code>]m</code> </td>
<td> Javaスタイルメソッドの最初に移動.</td>
</tr>
<tr>
<td> <code>[M</code> or <code>]M</code> </td>
<td> Javaスタイルメソッドの最後に移動.</td>
</tr>
</tbody>
</table>


<h2>テキストオブジェクト {text-objects}</h2>

<p>基本的なテキストオブジェクトは<code>i</code>, <code>a</code>の2種類がそれぞれprefixとしてつくものが多い．
<code>i</code>は <strong>i</strong>nner(内部)を表し，<code>a</code>は<strong>a</strong>(1つの)まとまり(&ldquo;a&#8221;n object)を表している．
<code>i</code>を<strong>i</strong>nside, <code>a</code>のをオブジェクトの<strong>a</strong>round(まわり)まで含むと覚えてたりしてもよいと思いますが公式は&#8221;inner&#8221;と&#8221;a&#8221;です．</p>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>aw</code>, <code>iw</code> </td>
<td> wordを選択. &ldquo;<strong>a</strong> word&rdquo;, &ldquo;<strong>i</strong>nner word&rdquo;. <code>a</code>は周りのホワイトスペースを含む</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#aw">:h aw</a> <a href="http://vim-jp.org/vimdoc-ja/motion.html#iw">:h iw</a></td>
</tr>
<tr>
<td> <code>aW</code>, <code>iW</code> </td>
<td> WORDを選択. &ldquo;<strong>a</strong> WORD&rdquo;, &ldquo;<strong>i</strong>nner WORD&rdquo;</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#aW">:h aW</a> <a href="http://vim-jp.org/vimdoc-ja/motion.html#iW">:h iW</a></td>
</tr>
<tr>
<td> <code>as</code>, <code>is</code> </td>
<td> &ldquo;sentence&rdquo;(文)を選択</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#as">:h as</a> <a href="http://vim-jp.org/vimdoc-ja/motion.html#is">:h is</a></td>
</tr>
<tr>
<td> <code>ap</code>, <code>ip</code> </td>
<td> &ldquo;paragraph&rdquo;(段落)を選択</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#ap">:h ap</a> <a href="http://vim-jp.org/vimdoc-ja/motion.html#ip">:h ip</a></td>
</tr>
<tr>
<td> <code>ab</code>, <code>a(</code>, <code>a)</code>, <code>ib</code> <code>i(</code>, <code>i)</code> </td>
<td> <code>(</code>,<code>)</code>ブロック，またはその内部を選択. <strong>b</strong>races block から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#ab">:h ab</a></td>
</tr>
<tr>
<td> <code>aB</code>, <code>a{</code>, <code>a}</code>, <code>iB</code> <code>i{</code>, <code>i}</code> </td>
<td> <code>{</code>,<code>}</code>ブロック，またはその内部を選択. <strong>B</strong>rackets block から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#aB">:h aB</a></td>
</tr>
<tr>
<td> <code>a[</code>, <code>a]</code>, <code>i[</code>, <code>i]</code> </td>
<td> <code>[</code>,<code>]</code>ブロック，またはその内部を選択 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#a[">:h a[</a></td>
</tr>
<tr>
<td> <code>a&lt;</code>, <code>a&gt;</code>, <code>i&lt;</code>, <code>i&gt;</code> </td>
<td> <code>&lt;</code>,<code>&gt;</code>ブロック，またはその内部を選択 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#a>&#8221;>:h a></a></td>
</tr>
<tr>
<td> <code>at</code>, <code>it</code> </td>
<td> (xml, html)のタグブロック，またはその内部を選択．<strong>t</strong>ag block から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#at">:h at</a> <a href="http://vim-jp.org/vimdoc-ja/motion.html#it">:h it</a></td>
</tr>
<tr>
<td> <code>a"</code>, <code>a'</code>, <code>a`</code>, <code>i"</code>, <code>i'</code>, <code>i`</code> </td>
<td> 前の引用符から次の引用符まで, またはその内部を選択</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#aquote">:h aquote</a></td>
</tr>
<tr>
<td> <code>gn</code> </td>
<td> 最後に使われた検索パターンを前方/後方検索してマッチを選択. <strong>g</strong> prefix + <code>n</code>, <code>N</code>から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/visual.html#gn">:h gn</a> <a href="http://vim-jp.org/vimdoc-ja/visual.html#gN">:h gN</a></td>
</tr>
</tbody>
</table>


<p>テキストオブジェクトの部分をハイライトした例
<img src="https://raw.githubusercontent.com/haya14busa/i/b61a096517e2f4b358da17724dc833104c5973f3/misc/textobjects-example.gif" alt="textobjects-example.gif (1366×721)" /></p>

<p>削除オペレータとの組み合わせ例</p>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 動作      </th>
</tr>
</thead>
<tbody>
<tr>
<td> &ldquo;dl&rdquo; </td>
<td> 1文字削除 (&ldquo;x&rdquo; と同じです)</td>
</tr>
<tr>
<td> &ldquo;diw&rdquo; </td>
<td> inner word を削除</td>
</tr>
<tr>
<td> &ldquo;daw&rdquo; </td>
<td> a word を削除</td>
</tr>
<tr>
<td> &ldquo;diW&rdquo; </td>
<td> inner WORD を削除 (参照: |WORD|)</td>
</tr>
<tr>
<td> &ldquo;daW&rdquo; </td>
<td> a WORD を削除 (参照: |WORD|)</td>
</tr>
<tr>
<td> &ldquo;dgn&rdquo; </td>
<td> 次に検索パターンにマッチするものを削除</td>
</tr>
<tr>
<td> &ldquo;dd&rdquo; </td>
<td> 1行削除</td>
</tr>
<tr>
<td> &ldquo;dis&rdquo; </td>
<td> inner sentence を削除</td>
</tr>
<tr>
<td> &ldquo;das&rdquo; </td>
<td> a sentence を削除</td>
</tr>
<tr>
<td> &ldquo;dib&rdquo; </td>
<td> inner &lsquo;(&rsquo; &lsquo;)&rsquo; block を削除</td>
</tr>
<tr>
<td> &ldquo;dab&rdquo; </td>
<td> a &lsquo;(&rsquo; &lsquo;)&rsquo; block を削除</td>
</tr>
<tr>
<td> &ldquo;dip&rdquo; </td>
<td> inner paragraph を削除</td>
</tr>
<tr>
<td> &ldquo;dap&rdquo; </td>
<td> a paragraph を削除</td>
</tr>
<tr>
<td> &ldquo;diB&rdquo; </td>
<td> inner &lsquo;{&rsquo; &lsquo;}&rsquo; Block を削除</td>
</tr>
<tr>
<td> &ldquo;daB&rdquo; </td>
<td> a &lsquo;{&rsquo; &lsquo;}&rsquo; Block を削除</td>
</tr>
</tbody>
</table>


<h2>検索コマンド</h2>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>/</code> </td>
<td> 前方検索．由来はナゾ </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/pattern.html#/">:h /</a></td>
</tr>
<tr>
<td> <code>?</code> </td>
<td> 後方検索．<code>SHIFT</code> + <code>/</code> で<code>/</code>の逆から </td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html#?">:h ?</a></td>
</tr>
<tr>
<td> <code>n</code> </td>
<td> 最後の &ldquo;/&rdquo; か &ldquo;?&rdquo; を [count] 回繰り返す．<strong>n</strong>ext から</td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html#n">:h n</a></td>
</tr>
<tr>
<td> <code>N</code> </td>
<td> 最後の &ldquo;/&rdquo; か &ldquo;?&rdquo; を逆方向に [count] 回繰り返す．<code>n</code>の大文字で<code>n</code>の逆 </td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html#N">:h N</a></td>
</tr>
<tr>
<td> <code>*</code> </td>
<td> カーソルに最も近い単語で前方検索．USキーボードで4段目右手の中指 </td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html#*">:h *</a></td>
</tr>
<tr>
<td> <code>#</code> </td>
<td> カーソルに最も近い単語で後方検索．USキーボードで4段目左手の中指 </td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html##">:h #</a></td>
</tr>
<tr>
<td> <code>g*</code> <code>g#</code> </td>
<td> <code>*</code>, <code>#</code> の&#8221;\&lt;&ldquo; と &rdquo;>&ldquo;(単語区切り)を加えないバージョン </td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html#g*">:h g*</a></td>
</tr>
<tr>
<td> <code>gd</code> </td>
<td> カーソルからローカル宣言を検索．<strong>g</strong>oto + <strong>d</strong>eclaration から.</td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html#gd">:h gd</a></td>
</tr>
<tr>
<td> <code>gD</code> </td>
<td> カーソルからグローバル宣言を検索．<code>gd</code>の大文字バージョン</td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html#gD">:h gD</a></td>
</tr>
</tbody>
</table>


<h2>スクロールコマンド</h2>

<h3>上/下方スクロール</h3>

<pre><code class="``">                                 +----------------+
                                 | some text      |
                                 | some text      |
                                 | some text      |
  +---------------+              | some text      |
  | some text     |  CTRL-U  --&gt; |                |
  |               |              | 123456         |
  | 123456        |              +----------------+
  | 7890          |
  |               |              +----------------+
  | example       |  CTRL-D --&gt;  | 7890           |
  +---------------+              |                |
                                 | example        |
                                 | example        |
                                 | example        |
                                 | example        |
                                 +----------------+
</code></pre>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>CTRL-E</code> </td>
<td> 下へ[count]行ウィンドウをスクロール．<strong>E</strong>xtra lines から(vimdocでは割増との訳注あり. 追加の行?) </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#CTRL-E">:h CTRL-E</a></td>
</tr>
<tr>
<td> <code>CTRL-Y</code> </td>
<td> 上へ[count]行ウィンドウをスクロール．由来ナゾ&hellip; </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#CTRL-Y">:h CTRL-Y</a></td>
</tr>
<tr>
<td> <code>CTRL-D</code> </td>
<td> ウィンドウをバッファ内で下にスクリーンの半分スクロールする．Scroll <strong>D</strong>ownwards から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#CTRL-D">:h CTRL-D</a></td>
</tr>
<tr>
<td> <code>CTRL-U</code> </td>
<td> ウィンドウをバッファ内で上にスクリーンの半分スクロールする．Scroll <strong>U</strong>pwards から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#CTRL-U">:h CTRL-U</a></td>
</tr>
<tr>
<td> <code>CTRL-F</code> </td>
<td> ページ前方(下方)にスクロール．Scroll <strong>F</strong>orwards から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#CTRL-F">:h CTRL-F</a></td>
</tr>
<tr>
<td> <code>CTRL-B</code> </td>
<td> ページ後方(上方)にスクロール．Scroll <strong>B</strong>ackwards から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#CTRL-B">:h CTRL-B</a></td>
</tr>
</tbody>
</table>


<h3>カーソル相関スクロール</h3>

<pre><code class="``">  +------------------+            +------------------+
  | some text        |            | some text        |
  | some text        |            | some text        |
  | some text        |            | some text        |
  | some text        |  zz  --&gt;   | line with cursor |
  | some text        |            | some text        |
  | some text        |            | some text        |
  | line with cursor |            | some text        |
  +------------------+            +------------------+
</code></pre>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>zt</code> </td>
<td> [count]行(省略時はカーソルのある行)をウィンドウの最上行にして再描画. <strong>z</strong> prefix + <strong>t</strong>op of window から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#zt">:h zt</a></td>
</tr>
<tr>
<td> <code>zz</code> </td>
<td> [count]行(省略時はカーソルのある行)をウィンドウの中央にして再描画. 由来はナゾ&hellip; </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#zz">:h zz</a></td>
</tr>
<tr>
<td> <code>zb</code> </td>
<td> [count]行(省略時はカーソルのある行)をウィンドウの最下行にして再描画. <strong>z</strong> prefix + <strong>b</strong>ottom of window から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#zz">:h zz</a></td>
</tr>
</tbody>
</table>


<h2>折畳コマンド</h2>

<p>全ての折畳コマンドは <code>z</code> で始まっている．<code>z</code> は紙片を折った様子を横からみた姿に見える．</p>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>zf</code> </td>
<td> 折畳を作成する．(再掲) <code>f</code>は折りたたみを作成するのが一番基本コマンドと考えて<strong>f</strong>oldから?</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zf">:h zf</a></td>
</tr>
<tr>
<td> <code>zd</code> </td>
<td> 折畳を1つ削除する． <strong>d</strong>elete から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zd">:h zd</a></td>
</tr>
<tr>
<td> <code>zD</code> </td>
<td> 折畳を再帰的に削除する． 折りたたみコマンドにおける大文字は&#8221;再帰的&#8221;, &ldquo;すべて&#8221;といった意味合いのものが多い</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zD">:h zD</a></td>
</tr>
<tr>
<td> <code>zE</code> </td>
<td> 折畳をすべて削除する． <strong>E</strong>liminate から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zE">:h zE</a></td>
</tr>
<tr>
<td> <code>zo</code> </td>
<td> 折畳を1つ開く． <strong>o</strong>pen から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zo">:h zo</a></td>
</tr>
<tr>
<td> <code>zO</code> </td>
<td> 折畳を再帰的に開く． <code>zo</code>の大文字版</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zo">:h zO</a></td>
</tr>
<tr>
<td> <code>zc</code> </td>
<td> 折畳を1つ閉じる． <strong>c</strong>lose から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zc">:h zc</a></td>
</tr>
<tr>
<td> <code>zC</code> </td>
<td> 折畳を再帰的に閉じる． <code>zc</code>の大文字版</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zo">:h zC</a></td>
</tr>
<tr>
<td> <code>za</code> </td>
<td> 折畳をトグル(開いていたら閉じ，閉じていたら開く)． 由来はナゾ&hellip;</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#za">:h za</a></td>
</tr>
<tr>
<td> <code>zA</code> </td>
<td> 折畳を再帰的にトグル． <code>za</code>の大文字版</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#za">:h za</a></td>
</tr>
<tr>
<td> <code>zv</code> </td>
<td> カーソルのある行がちょうど表示されるレベルまで折畳を開く. <strong>V</strong>iew cursor から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zv">:h zv</a></td>
</tr>
<tr>
<td> <code>zx</code>, <code>zX</code> </td>
<td> 折畳を更新する. 由来はナゾ&hellip;というかそもそもhelp読んでも動作がいまいちわからない&hellip; </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zx">:h zx</a></td>
</tr>
<tr>
<td> <code>zm</code> </td>
<td> 折畳をより閉じる(&lsquo;foldlevel&rsquo; を1減少させる) Fold <strong>M</strong>ore から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zm">:h zm</a></td>
</tr>
<tr>
<td> <code>zM</code> </td>
<td> 全ての折畳を閉じる(&lsquo;foldlevel&rsquo; に0を設定する) <code>zm</code> の大文字版 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zM">:h zM</a></td>
</tr>
<tr>
<td> <code>zr</code> </td>
<td> 折畳をより開く(&lsquo;foldlevel&rsquo; を1増加させる) <strong>R</strong>educe folding から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zr">:h zr</a></td>
</tr>
<tr>
<td> <code>zR</code> </td>
<td> 全ての折畳を開く(&lsquo;foldlevel&rsquo; に最大の折畳レベルを設定する) <code>zr</code> の大文字版 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zR">:h zR</a></td>
</tr>
<tr>
<td> <code>zn</code> </td>
<td> 折畳しない(&lsquo;foldenable&rsquo; をリセットする。全ての折畳が開かれる) Fold <strong>n</strong>one から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zn">:h zn</a></td>
</tr>
<tr>
<td> <code>zN</code> </td>
<td> 折畳する(&lsquo;foldenable&rsquo; をセットする。全ての折畳が &lsquo;foldenable&#8217;がリセットされる以前と同様になる) Fold <strong>n</strong>ormalから．しかし<strong>n</strong>が2つあって正直意味ない&hellip;</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zN">:h zN</a></td>
</tr>
<tr>
<td> <code>zi</code> </td>
<td> &lsquo;foldenable&rsquo; を反転する． <strong>I</strong>nvert から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zi">:h zi</a></td>
</tr>
<tr>
<td> <code>[z</code>, <code>]z</code> </td>
<td> 現在の開いている折畳の先頭/末尾へ移動する．角括弧コマンド(<a href="http://vim-jp.org/vimdoc-ja/vimindex.html#[">:h [</a>)は似た動作をする </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#z[">:h z[</a></td>
</tr>
<tr>
<td> <code>zj</code> </td>
<td> カーソルより下方の折畳へ移動. 折りたたみにおける<code>hjkl</code>の<code>j</code>移動 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zj">:h zj</a></td>
</tr>
<tr>
<td> <code>zk</code> </td>
<td> カーソルより上方の折畳へ移動. 折りたたみにおける<code>hjkl</code>の<code>k</code>移動 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zk">:h zk</a></td>
</tr>
</tbody>
</table>


<p>(<code>zx</code>とか<code>zn</code>,<code>zN</code>などは覚えなくてもたいていの動作に支障ないのではという気がする．．．)</p>

<h2>undo と redo のコマンド</h2>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>u</code> </td>
<td> [count] 個の変更を元に戻す．<strong>u</strong>ndo から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/undo.html#u">:h u</a></td>
</tr>
<tr>
<td> <code>CTRL-R</code> </td>
<td> undo された変更を [count] 個やり直す．<strong>r</strong>edo から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/undo.html#CTRL-R">:h CTRL-R</a></td>
</tr>
</tbody>
</table>


<h2>ビジュアルモード</h2>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>v</code> </td>
<td> 文字単位のビジュアルモードを開始する．<strong>v</strong>isualから </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/visual.html#v">:h v</a></td>
</tr>
<tr>
<td> <code>V</code> </td>
<td> 行単位のビジュアルモードを開始する．<code>v</code>の大文字版 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/visual.html#V">:h V</a></td>
</tr>
<tr>
<td> <code>CTRL-V</code> </td>
<td> 矩形ビジュアルモードを開始する．<code>v</code>のctrl版 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/visual.html#CTRL-V">:h CTRL-V</a></td>
</tr>
<tr>
<td> <code>gv</code> </td>
<td> 最後に使用したのと同じ範囲のビジュアルモードを開始する. <strong>g</strong>otoか単なるprefix. 最後に入力がされた場所にテキストを入力する<code>gi</code>のヴィジュアル版と言える </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/visual.html#gv">:h gv</a></td>
</tr>
<tr>
<td> <code>v_o</code> </td>
<td> 選択されたテキストのもう一方の端へ移動する．Go to <strong>o</strong>ther end of highlighted text から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/visual.html#v_o">:h v_o</a></td>
</tr>
<tr>
<td> <code>v_O</code> </td>
<td> 選択されたテキストのもう一方の端へ移動する．矩形選択では行内のもう一方のコーナーに移動する．Go to <strong>o</strong>ther end of highlighted text から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/visual.html#v_O">:h v_O</a></td>
</tr>
</tbody>
</table>


<h2>その他</h2>

<p>すべてのコマンドを体型的に網羅するとを諦めてその他で残りの言及すべきっぽいコマンドをいっしょくたにまとめる男の姿がそこにはあった&hellip;</p>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>CTRL-W</code> + &ldquo;?&rdquo; </td>
<td>ウィンドウコマンド. <strong>W</strong>indow commandsから. Windowの操作や&#8221;?&ldquo;の結果を新規ウィンドウで開いたりする</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/vimindex.html#CTRL-W">:h CTRL-W</a></td>
</tr>
<tr>
<td> <code>i_CTRL-R</code> <code>c_CTRL-R</code> </td>
<td>レジスタの内容を挿入する. <strong>R</strong>egisterから</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#i_CTRL-R">:h i_CTRL-R</a></td>
</tr>
<tr>
<td> <code>gf</code> </td>
<td> カーソルの下か後ろの名前のファイルを編集する． <strong>g</strong>oto <strong>f</strong>ile から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/editing.html#gf">:h gf</a></td>
</tr>
<tr>
<td> <code>K</code> </td>
<td> カーソル位置のキーワードを調べるためのプログラムを実行．<strong>K</strong>eyword から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/various.html#K">:h K</a></td>
</tr>
<tr>
<td> <code>q</code> </td>
<td> タイプした文字をレジスタ{0-9a-zA-Z&#8221;}にレコーディングする．特に覚え方は見つからなかったが，macro -> ma<strong>q</strong>ro みたいな覚え方もあり&hellip;? </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/repeat.html#q">:h q</a></td>
</tr>
</tbody>
</table>


<h2>おわりに，そして覚えるのもよいけれど&hellip;</h2>

<p>以上で本記事のコマンドの覚え方大全は終了です．
ここまで読んだ方お疲れ様です．そして「アレ&hellip;?まだまだあるはずじゃない?」と思ったそこのあなた，正解です．
挿入モード，コマンドモードのコマンドはほとんどかけてないですし，単純に抜けてるものもあるかと思います．
チカラ付きました&hellip;  ただこう理解するとわかりやすいよ〜というコマンドはなるべく網羅したような気がします．
もっとこれ追加しろとかあったらコメントかtwitterか何かで言っていただけると嬉しいです．
そしてVimを始めたころの初々しい気持ちを忘れていて，いやもっとここ丁寧に書かなきゃわからんぜ!ってとこも遠慮無くおねがいします．</p>

<p>そして覚えるのも大事ですが，それと同じくらいわからないことをドキュメントから調べる力を
つけるのも重要かなぁと思います．最初は覚えられなくても調べることができればかなり便利です．
たとえば <code>:help</code>だけでなく<code>:helpgrep</code>を使いこなしたり,
<a href="http://vim-jp.org/vimdoc-ja/index.html#help-context">:h help-context</a> を読んで引きたい項目の指定ができるようになるとはかどります．
(他にも<code>(</code>を末尾につけることで関数のヘルプを引くといった書いてないプチハックとかもあります)</p>

<table>
<thead>
<tr>
<th> 種類                     </th>
<th> 修飾子                         </th>
<th> 例                  </th>
</tr>
</thead>
<tbody>
<tr>
<td> ノーマルモードコマンド   </td>
<td> (無し)                         </td>
<td> <code>:help x</code>           </td>
</tr>
<tr>
<td> ビジュアルモードコマンド </td>
<td> <code>v_</code>                           </td>
<td> <code>:help v_u</code>         </td>
</tr>
<tr>
<td> 挿入モードコマンド       </td>
<td> <code>i_</code>                           </td>
<td> <code>:help i_&lt;Esc&gt;</code>     </td>
</tr>
<tr>
<td> コマンドラインコマンド   </td>
<td> <code>:</code>                            </td>
<td> <code>:help :quit</code>       </td>
</tr>
<tr>
<td> コマンドライン編集       </td>
<td> <code>c_</code>                           </td>
<td> <code>:help c_&lt;Del&gt;</code>     </td>
</tr>
<tr>
<td> Vim の起動引数           </td>
<td> <code>-</code>                            </td>
<td> <code>:help -r</code>          </td>
</tr>
<tr>
<td> オプション               </td>
<td> <code>'</code>                            </td>
<td> <code>:help 'textwidth'</code> </td>
</tr>
<tr>
<td> 正規表現                 </td>
<td> <code>/</code>                            </td>
<td> <code>:help /[</code>          </td>
</tr>
</tbody>
</table>


<p>僕が思うhelp周辺の便利ツールとかは <a href="http://haya14busa.com/reading-vim-help/">Vimのhelpを快適に引こう - haya14busa</a> にまとめているのでよかった読んでみてください．</p>

<p>おわり．</p>

<p><strong>Vim のコマンドを覚えて思考のスピードで編集しましょう!!!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブログを書くまでが #yapcasia なのでブログでLT発表して感想かく ― Vim駆動学習]]></title>
    <link href="http://haya14busa.com/yapcasia-2015/"/>
    <updated>2015-08-23T10:24:12+09:00</updated>
    <id>http://haya14busa.com/yapcasia-2015</id>
    <content type="html"><![CDATA[<p>YAPC::Asia 2015 に1日目・2日目と参加してきました．</p>

<h2>ブログを書くまでがYAPCで，LTしてみたかったならやぷしー終了するまでにブログで発表すればいいじゃない</h2>

<p>YAPC 2015 初めての参加でしたが一言で言うと<strong>最高</strong>でした!!! 刺激になるトーク多すぎました．</p>

<p>ただひとつ悔やまれるのは1日目の前日くらいに勢いでLT応募したけど，そのまま勢いで落ちたのでﾁｮｯﾄ発表してみたかった&hellip;倍率高すぎる〜</p>

<p>(本当に悔やまれるのはトラック被って見れなかった裏トラックを見れてないということで，資料とかまとめとかYouTube見ていくゾ!!!)</p>

<p>&hellip;ところで，YAPCはブログを書くまで終わらないんだからブログでLTしたかった内容発表すれば，
それはもうYAPCでLTしたことになるのでは&hellip;!?!?!?(混乱)</p>

<p>と考えたのでブログで発表したかった資料をあげる最高にカッコワルイことを今からします．
その後参加記みたいな何かを書いています．</p>

<p>いろいろと，読む前でも読んだ上でも思うことはあると思いますが自分でも思うことはあるので
察してそっとしておいてください!! いろいろと反省はしている．</p>

<h2>Vim 駆動学習</h2>

<script async class="speakerdeck-embed" data-id="62d0b9127b664ae5aad0e14742371fcc" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<ul>
<li><a href="http://yapcasia.org/2015/talk/show/8f1aad32-474d-11e5-a80e-c7de7d574c3a">Vim 駆動学習 - YAPC::Asia Tokyo 2015</a></li>
<li><a href="https://speakerdeck.com/haya14busa/vim-driven-learning">Vim Driven Learning // Speaker Deck</a></li>
</ul>


<p>※ 1箇所gifが表現できないのでクリックして見てと言っているけどSpeaker Deckだとクリックできないのでスルーしてください(PDFをダウンロードすれば一応クリックできるけど)</p>

<h2>LT説明や資料の反省とか．あと参考記事</h2>

<p>エモイ話だ&hellip;</p>

<p>基本的にはこれまでにどこかでアウトプットした内容で，なるべくそうならないように意識はしてたのだけど，
説明文とか内容とか何か聴衆に有益情報話すというより，単なる自分語り感が強すぎるのがｳｰﾝっていう感じだと思っています．</p>

<p>まぁ技術的な説明とかは他の人のほうが断然できるはずだし，
僕ができるのは僕の経験を話すこと．それが一番僕にしかできない発表で，
そこで何か聴衆に響かせることができたらいいなって考えたのでこういった内容になってます．</p>

<p>内容がだいたいどこかで以前アウトプットしたものになった原因は，これまで基本的には記事書くようにしていたからっていうことや，
聴衆がどうよりも経験としてYAPCみたいな舞台で発表したいというエゴによって自分のなかでGoサインが勢いで出てしまった感じになってます．</p>

<p>資料できてここまで書いて思ったけどたぶん落ちてよかったんじゃないかなぁみたいな思いもある．
普通に5minオーバーすると思うし．</p>

<p>これからまた頑張っていくゾイ!!!</p>

<h3>参考記事</h3>

<p>だいたい僕のブログ読んでたらLT資料読まなくてもだいたいわかる感じになっている．
もし興味出たっていう優しいかたは気になった記事を読んでいただけると少し詳しく書かれています．</p>

<ul>
<li>全体:

<ul>
<li><a href="http://haya14busa.com/vim_driven_learning/">1年間『Vim駆動学習』してきて最高に楽しかったのでオススメしたい - haya14busa</a></li>
<li><a href="http://haya14busa.com/haya14busa-s-happy-vimming-year-2014/">2014年の振り返り. またはプログラミング2年目をVimに捧げるとこうなるという話 - haya14busa</a></li>
</ul>
</li>
<li>vim-easymotionの話: <a href="http://haya14busa.com/mastering-vim-easymotion/">Vim-EasyMotionでカーソル移動を爆速にして生産性をもっと向上させる - haya14busa</a></li>
<li>incsearch.vimの話:

<ul>
<li><a href="http://haya14busa.com/enrich-your-search-experience-with-incsearch-vim/">incsearch.vimでVimの検索体験をリッチにする - haya14busa</a></li>
<li><a href="http://haya14busa.com/incsearch-dot-vim-ver-2/">Vimの検索はもっともっと便利になる! incsearch.vim v2.0 をリリースしました - haya14busa</a></li>
</ul>
</li>
<li>おもしろ開発系:

<ul>
<li><a href="https://github.com/haya14busa/eew.vim">緊急地震速報 on Vim</a> とか <a href="https://github.com/haya14busa/niconicomment.vim">Vimでニコニコlikeコメント</a> は記事は書いてなくてTwitterでやってた</li>
</ul>
</li>
<li>Vim script へ移植

<ul>
<li>underscore.vim は記事かいてなかった&hellip;</li>
<li>Vim版power-assert: <a href="http://haya14busa.com/vim-vital-power-assert/">Vim script版 power-assert! テスト書いてないとかお前それ Vim script の前でも同じこと言えんの? - haya14busa</a></li>
</ul>
</li>
</ul>


<p>自分の LT のくだり終了．</p>

<h2>YAPC::Asia 2015 Day1 感想</h2>

<h3>聴いたTalkと感想</h3>

<p>1日目は朝5時半くらいから起きて東京に向かったのでなかなか大変でしたが，早起きチャレンジ成功してよかった．</p>

<h4>1) <a href="http://yapcasia.org/2015/talk/show/a636430c-0fbf-11e5-8a02-43ec7d574c3a">メリークリスマス！ - YAPC::Asia Tokyo 2015</a></h4>

<p>perl を書いたことは無かったけど歌って踊るラリーウォールみれてよかった．
perl6 面白そうなようなので(又聞き)，クリスマス期待．</p>

<h4>2) <a href="http://yapcasia.org/2015/talk/show/9ec2791c-05e5-11e5-81fa-79c97d574c3a">世界展開する大規模ウェブサービスのデプロイを支える技術 - YAPC::Asia Tokyo 2015</a></h4>

<p>Miiverse のデプロイを支える技術の話だった．海を超えたgit pullとかその不可を抑えるためのランダムスリープみたいな
つらい話からはじまって，それを解決していった話が聞けました．
大規模ウェブサービスのデプロイ，やったこと一切なくてあまり個人の実感がわかないのでムズカシイけどこういう話も勉強していきたい．</p>

<h4>3) <a href="http://yapcasia.org/2015/talk/show/cc0ec485-1879-11e5-aca1-525412004261">TBD - YAPC::Asia Tokyo 2015</a></h4>

<p>Rubyのパパ Matz が Rubyの話しを封印したと思ったら10分で封印を解いたり，
Ruby のディスと見せかけて間接的にperlディスってたりしておもしろかった．
内容も面白くて，主流のアーキテクチャが変わると言語デザインも変わってきて，それに対応してデザインされているのが streem ならしい．</p>

<h4>4) <a href="http://yapcasia.org/2015/talk/show/de9e7a1e-136d-11e5-a9fc-d9f87d574c3a">Perlの上にも三年 〜 ずっとイケてるサービスを作り続ける技術 〜 - YAPC::Asia Tokyo 2015</a></h4>

<p>おもしろトークだった上にめっちゃ開発の参考になる話が多かった．紹介されていた本読みたい -> <a href="http://hitode909.hatenablog.com/entry/yapc2015books">YAPCの発表で紹介した本 - hitode909の日記</a>．
DDDとかユビキタス言語の導入の話とかがとてもいい話で，僕もやっていきたい．
最近自分でもプログラムやドキュメントに書いてる単語がブレていたりするのを感じていて，
<code>ユビキタス言語.md</code> (ファイル名違う気がする) とかをリポジトリに置いて管理するのとかもよさそうと思った．</p>

<p>事前条件/事後条件とかあってそこで 責任外のことをチェックせずお互いを信頼するとスッキリするという話もなんとなくスッキリして面白かった．</p>

<h4>5) <a href="http://yapcasia.org/2015/talk/show/523b9508-0d77-11e5-8174-67dc7d574c3a">うっかりをなくす技術 - YAPC::Asia Tokyo 2015</a></h4>

<p>うっかりすることよくあるので，うっかりをなくす技術を聞きに行った．
assertion ライブラリ的なものを最近作っていたのでassertionの話とかもっと聞きたかった．契約プログラミングとか???(わかってない)
defer/guard object とかスゴイよさそうだった．golang に defer とかあるようだし，goやっていきたい．</p>

<p>追記: あとせっかくうっかりをなくす技術聴いたのに2日目に会場に荷物忘れるうっかりをやらかした． そしてこの文をブログに書くのを忘れるといううっかりもして，うっかりしないようにするのはムズカシイ&hellip;</p>

<h4>6) <a href="http://yapcasia.org/2015/talk/show/22957e9c-1872-11e5-aca1-525412004261">Lightning Talks Day 1 - YAPC::Asia Tokyo 2015</a></h4>

<p>Slack + Hubot でお前の一番好きな二次元嫁キャラと一緒に仕事をする 話とかが思考がぶっ飛んでいて面白かった．
PHPでregister_globalsの話をしてた方が最初に<a href="https://github.com/gongo/emacs-ikku">gongo/emacs-ikku</a>とか作っていて
「Vimでやらなきゃ&hellip;負けてられない&hellip;」とか考えていたけどまだできていない．</p>

<h2>YAPC::Asia 2015 Day2 感想</h2>

<h3>聴いたTalkと感想</h3>

<h4><a href="http://yapcasia.org/2015/talk/show/5b1cd536-07ed-11e5-9e42-79c97d574c3a">Mackerel開発におけるScalaとGo、そしてPerl - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>複数の言語，技術を用途によって適切に使い分けてるのがすごい．</li>
<li>Scalaのimplicit conversion の解決遅すぎ問題のつらさわかる〜みたいな気持ちになったりした．</li>
<li>ちょっと最初の10minくらい遅れていってしまってツライ&hellip;ちゃんと見直したい．</li>
</ul>


<h4><a href="http://yapcasia.org/2015/talk/show/f2816038-10ec-11e5-89bf-d7f07d574c3a">我々はどのように冗長化を失敗したのか - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>式年遷宮面白かった．</li>
<li>発表前から資料がアップロードされていてよさ．</li>
<li>冗長化ムズカシイ．</li>
</ul>


<h4><a href="http://yapcasia.org/2015/talk/show/0af26fe4-0b7b-11e5-a29c-67dc7d574c3a">MySQLで2億件のシリアルデータと格闘したチューニングの話 - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>自分にとっては難しかったのとあまり集中して聞けてなかったのであまり記憶がない&hellip;(LT採択どうかな〜みたいな気持ちで気が気じゃなかったのもある)</li>
<li>あとから資料見てみたい．</li>
</ul>


<h4><a href="http://yapcasia.org/2015/talk/show/bd04b86c-f9de-11e4-b996-8ab37d574c3a">Adventures in Refactoring - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>GitHubの中の人のリファクタリングの話でめっちゃよかった!!! リファクタリングしたい気持ちが高まりまくった．</li>
<li>リファクタリングは挙動を変えては行けなくて，それはバグも同じで一緒に修正したら問題の切り分けができなくてダメだよという話は，
わかるという思いと共に，そうは言ってもムズカシイので意識してデキルようにしていきたい．</li>
<li>リファクタリングをナゼするのかとか，成果を計測しなくてはならないというのは全然意識したことがなかった．資料とか見直しながらやっていきたい．</li>
<li>(変数・)メソッド名のアンダースコアはリファクタリングチャンス．なるほどという感じだった．</li>
<li>とにかくリファクタリングやっていくゾ!!!</li>
</ul>


<h4><a href="http://yapcasia.org/2015/talk/show/e466d60a-11db-11e5-b07b-d7f07d574c3a">Posture for Engineers - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>肩こりがひどいので姿勢の話を聞きに行った．</li>
<li>いくつかヨガのポーズみたいなものを教えてもらったので実践できればいいのだけどデキルだろうか&hellip;</li>
<li>バランスボールのって開発してたら逆に肩こりと首こりがヤバくなった経験があってすぐにやめちゃったのでいい座り方・使い方がしりたい．(質問しそこねた)</li>
</ul>


<h4><a href="http://yapcasia.org/2015/talk/show/b03162be-0052-11e5-ba92-89c77d574c3a">Run containerized workloads with Lattice - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>正直わからんかったマン(ムズカシイ&hellip;)</li>
</ul>


<h4><a href="http://yapcasia.org/2015/talk/show/6bde6c69-187a-11e5-aca1-525412004261">Profiling &amp; Optimizing in Go - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>とにかくライブコーディングがカッコヨサで Go の標準で提供されている tool すごい強いし，コンパイル速くて書きやすそうだし，
まだ Go はかけてないけど，Go 書いていくゾ！という気持ちになった． Go 書き始めたらまた参照して学んで行きたい．</li>
</ul>


<h4><a href="http://yapcasia.org/2015/talk/show/69caedbd-1872-11e5-aca1-525412004261">Lightning Talks Day 2 - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>どのLT もこれぞLTってカンジで良かった&hellip;あんなLTできるようになりたい．</li>
<li><a href="https://twitter.com/orga_chem">@orga_chem</a> さんの Vim script 静的解析の闇がトリで Vim script の闇を暴露していていい話だった．
Vim script はああいった感じでカワイイのでぜひ興味を持った皆さんには vint のチカラを借りながら Vim script を書いてみて欲しい．
基本静的解析のときツライという話で，<code>v:count</code>, 関数と変数のネームスペース， <code>map()</code> の引数とかが文字列って以外は普通に書いてるときの
闇としては避けられそう．(十分多い&hellip;???)</li>
</ul>


<h2>個人的な悔やまれることとか</h2>

<ul>
<li>最近Vim版power-assert作って補足して頂いたりしたので <a href="https://twitter.com/t_wada">@t_wada</a> さんに会ってご挨拶くらいしておきたかった．
Vim版 power-assert もっと便利にしておきたい．</li>
<li>世界の <a href="https://twitter.com/miyagawa">@miyagawa</a> さんを見かけて Rebuild.fm 大好きでめっちゃ聴いてますって言ってみたかったけど，誰かと話されていて，
Rebuild.fm 聴いてますとか耳たこかもしれないし，その後何か話せるか考えたけど訳分からんくておそらく Rebuild.fm で
Vim とかエディタの話をしてほしいとかは言わないまでも，Vimmerのゲスト増やしてくださいみたいな困らせるようなことを喋りそうで
そうこう言ってるうちに機会が過ぎてしまった&hellip;フベン&hellip;</li>
<li>Twitter のタイムラインを見る限り，オープンインターネッツ上で見たことあるひとがたくさんいたけど，現実の顔と一致しなくて結局
会わずじまいな人が多かったのでまた何かの機会にお会いしたい．会えたひとも何人かいてそれはよかった．</li>
<li>発表しようと思うならもっと早めに用意しないと，僕のレベルだと時間をいっぱいかけてやっと聴くに耐えるものになるかどうかギリギリみたいな
感じだと思うし，ちゃんと準備したい．</li>
</ul>


<h2>全体的に</h2>

<p>YAPC::Asia 2015，YAPC初めての参加でしたが本当に最高でした!!!
同時通訳の方の同時通訳がすごくて圧巻されたり，会場のWifiはあの人数だったのに個人的にはほとんど繋がっていて CONBU さん凄かった．
無限に湧き出てくるコーヒーも美味しかったし，懇親会も豪華だしスポンサーの皆様ありがとうございました．</p>

<p>そして発表者の皆様，<a href="https://twitter.com/lestrrat">@lestrrat</a>さんをはじめとした運営の皆様，他の参加者の方々，
(漏れていたとしたらその方々!)， 最高のYAPC本当にありがとうございました．楽しかったです!!!</p>

<p>絶対来年も参加したい！！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim script版 power-assert! テスト書いてないとかお前それ Vim script の前でも同じこと言えんの?]]></title>
    <link href="http://haya14busa.com/vim-vital-power-assert/"/>
    <updated>2015-08-19T22:13:51+09:00</updated>
    <id>http://haya14busa.com/vim-vital-power-assert</id>
    <content type="html"><![CDATA[<h2>Vim script で最高の assertion 体験，vital-power-assert を作りました</h2>

<p><a href="https://gyazo.com/d044f6e7135cfb4314a0d88f0d02e572"><img src="https://i.gyazo.com/d044f6e7135cfb4314a0d88f0d02e572.png" alt="Gyazo" /></a></p>

<div class="github-card" data-github="haya14busa/vital-power-assert" data-width="500" data-height="150" data-theme="default"></div>


<p><a href="https://github.com/haya14busa/vital-power-assert">haya14busa/vital-power-assert</a></p>

<blockquote><p><strong>テスト書いてないとかお前それ Vim script の前でも同じこと言えんの?</strong></p></blockquote>

<p>ということで Vim script 版 power-assert, vital-power-assert を作りました.</p>

<p>Vim script でも power-assert できてテストをバリバリ書けるんだから
Vim で書いてる他の言語でテスト書いてないとか Vim が泣いちゃいますね&hellip;(煽り，そしてブーメラン)</p>

<h3>使い方とか <strong>力こそパワー!! 百聞よりパワー!!</strong></h3>

<p>使っている様子です</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>" in your vimrc
</span><span class='line'>NeoBundle 'vim-jp/vital.vim'
</span><span class='line'>NeoBundle 'haya14busa/vital-vimlcompiler'
</span><span class='line'>NeoBundle 'haya14busa/vital-power-assert'</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let s:V = vital#of('vital')
</span><span class='line'>let s:PowerAssert = s:V.import('Vim.PowerAssert')
</span><span class='line'>let s:assert = s:PowerAssert.assert
</span><span class='line'>execute s:PowerAssert.define('PowerAssert')
</span><span class='line'>function! s:power_assert() abort
</span><span class='line'>  let x = { 'ary': [1, 2, 3], 'power': 'assert' }
</span><span class='line'>  let l:zero = 0
</span><span class='line'>  let s:two = 2
</span><span class='line'>  PowerAssert index(x.ary, l:zero) is# s:two
</span><span class='line'>  " or
</span><span class='line'>  execute s:assert('index(x.ary, l:zero) is# s:two')
</span><span class='line'>endfunction
</span><span class='line'>call s:power_assert()</span></code></pre></td></tr></table></div></figure>


<p>上記コードを実行するとこうなります．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vital: PowerAssert:
</span><span class='line'>index(x.ary, l:zero) is# s:two
</span><span class='line'>     |||     |       |   |
</span><span class='line'>     |||     |       |   2
</span><span class='line'>     |||     |       0
</span><span class='line'>     |||     0
</span><span class='line'>     ||[1, 2, 3]
</span><span class='line'>     |{'ary': [1, 2, 3], 'power': 'assert'}
</span><span class='line'>     -1</span></code></pre></td></tr></table></div></figure>


<p>インストールや詳しい使い方は GitHub/help を参照してください．</p>

<p>-> <a href="https://github.com/haya14busa/vital-power-assert">haya14busa/vital-power-assert</a></p>

<p>基本的に関数とコマンドのassert方法を用意しているのですが，プラグインのコードに残しておいたりするものは
関数の <code>.assert()</code>, Vimのテスティングフレームワークで使う際などはコマンドでやることを推奨してます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>" 関数で assert. 引数は文字列として渡す必要がある
</span><span class='line'>execute s:assert('index(x.ary, l:zero) is# s:two')
</span><span class='line'>" コマンドで assert. 文字列で囲う必要がないのでシンタックスハイライトも効く
</span><span class='line'>PowerAssert index(x.ary, l:zero) is# s:two</span></code></pre></td></tr></table></div></figure>


<p>両者ともデバッグ用変数をONにしないとassertは実行されないので，プラグインに埋め込んでおいても
プラグインのユーザが使ってる時は発動しないし，評価なにもされないのでコードに残しておいても
問題ないようになっています．(コマンドの方はユーザのVimにコマンドが新たに定義されてしまうので推奨しません)</p>

<h2>power-assert 最高! 一番好きな assertion ライブラリです！</h2>

<p>vital-power-assert はもちろん JavaScript の assertion ライブラリである
<a href="https://github.com/power-assert-js/power-assert">https://github.com/power-assert-js/power-assert</a>
にインスパイアされて作っています．</p>

<p>何がベンリなのかとかは <a href="https://twitter.com/t_wada">@t_wada</a>さんが本家のpower-assertの紹介とかで
各所で説明なされているので説明は不要だとおもいますが，</p>

<p>個人的にはやはり</p>

<ol>
<li>assert 失敗時の式がどうなってるか一目瞭然のグラフィカルな見た目</li>
<li>たくさんの matcher を一つ一つ憶えたりドキュメントを見なくても <code>assert</code> 一つだけ知ってれば使える優しさ</li>
</ol>


<p>あたりのよさが使ってみて，開発してみて本当によいなと思います．</p>

<p>マッチャーは自然言語的な書き方ができたり，
テストのコード自体が間違えにくいみたいなところがよいとチラッと聞いたことがありますが
僕は断然power-assertのほうが好きという思いが強まりました (間違ってたり他にもある場合は教えてください)</p>

<h2>Vim script 版 vital-power-assert のよさ</h2>

<p>(このあたりは特に Vim script 書いてる人/興味あるひと向けです)</p>

<p>power-assert としてのよさはもちろんのところ，
Vim script の assertion ライブラリとしての vital-power-assert
のいいところがあります．</p>

<p>それはassertionを実行する際のスコープが assert する行と
同じなので， スクリプトローカル変数やローカル関数など何でもassert する
式の中で使えるということです!!! (わかりづらい)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:let s:x = 2
</span><span class='line'>:PowerAssert s:x == 1
</span><span class='line'>" or
</span><span class='line'>:execute s:assert('s:x == 1')
</span><span class='line'>" =&gt; ちゃんとs:xも使える
</span><span class='line'>"   s:x == 1
</span><span class='line'>"   |   |
</span><span class='line'>"   |   0
</span><span class='line'>"   2</span></code></pre></td></tr></table></div></figure>


<p>例えば Vimのテスティングフレームワークの一つの <a href="https://github.com/thinca/vim-themis">thinca/vim-themis</a>
の assert コマンドではスクリプトローカル変数が使えなくて不便&hellip;ということがあったりするのですが
vital-power-assert を使えばそのあたりを気にせず使うことができます．ベンリ．</p>

<h2>どうやって実装しているか</h2>

<h3>Vim script のパース &amp; コンパイル</h3>

<ul>
<li><a href="https://github.com/ynkdir/vim-vimlparser">ynkdir/vim-vimlparser</a></li>
<li><a href="https://github.com/haya14busa/vital-vimlcompiler">haya14busa/vital-vimlcompiler</a></li>
</ul>


<p>power-assert のようにassert が失敗したときに式中のそれぞれの変数や関数，
演算子の評価結果を得るためにはまず与えられた式をパースする必要があります．
そこでは Vim script で Vim script をパースできる <a href="https://github.com/ynkdir/vim-vimlparser">ynkdir/vim-vimlparser</a>
を使用させていただいています． 使っていて改めて ynkdir さんすごすぎる&hellip;</p>

<p>vitalのライブラリとして使うために<a href="https://github.com/haya14busa/vital-vimlcompiler">haya14busa/vital-vimlcompiler</a>にバンドルしちゃっています．(ライセンス的に問題なさそうだったのでynkdirさんに相談するまえに衝動的にVim版power-assertを作ってしまいました&hellip;ｽｲﾏｾﾝ)</p>

<p>とにかく，vimlparser のおかげでVim scriptをパースしてASTを得ることができたので，
あとはASTをトラバースして評価したいノードを集めることができました．</p>

<h3>そして再コンパイル</h3>

<p>あとは集めたASTのノードの式中の位置を記録，
そしてASTをVim scriptに戻してスコープに気を付けながら評価すれば必要なものが揃います．</p>

<p>vimlparser に付属している <code>Compiler</code> オブジェクトはS式的なものにコンパイルするものだったので，
Vim scriptにコンパイルする <a href="https://github.com/haya14busa/vital-vimlcompiler">haya14busa/vital-vimlcompiler</a>
というライブラリを作って使用しています．</p>

<p>注意点としてまだ<code>expr</code>のコンパイルしか実装してないので関数とかはコンパイルできないです．
ドキュメントもないし今のところ完全に vital-power-assert 用になっていますが，何かできたら面白そう．</p>

<h3>Vim script スコープハック</h3>

<p>Vim のコマンドの引数は<code>String</code>として渡されてその場で評価しているわけではないので
普通にやるとスクリプトローカル変数が無いと怒られます．
もちろん文字列で受け取って <code>eval()</code> してもスコープは変わってるので対応できません．</p>

<p>これを完全に解消するためにはassertする行と同じ位置で評価する必要がありますが，
そこで <code>execute</code> を使うことによって実現しています．</p>

<p>どういうことかというと，<code>{rhs}</code> である <code>s:assert('...')</code> が評価され返り値が帰ってくるのですが，
その返り値に実行したいコマンドを文字列として返すと <code>:execute</code>によってそのコマンドが同じスコープで
実行できて&hellip; という感じで実装しております．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:execute s:assert('x == 1')
</span><span class='line'>" -&gt;
</span><span class='line'>:execute 'execute' "s:assert2(x == 1, 'x == 1')"
</span><span class='line'>" -&gt; {expr} と 文字列の '{expr}' を別の関数に渡し直す
</span><span class='line'>:execute s:assert2(x == 1, 'x == 1')
</span><span class='line'>" -&gt; 評価したいノードリストを引数にとる関数を返す
</span><span class='line'>:execute 'execute' "s:assert3('x == 1', [{pos: `xの位置`, value: x}])"
</span><span class='line'>" -&gt; { "value": x } で xが評価される
</span><span class='line'>:execute s:assert3('x == 1', [{"pos": `xの位置`, "value": x}])
</span><span class='line'>" -&gt; 実はこのあとここで `:throw` コマンドを返してthrowすることによってエラー位置をこの行にしたり...
</span><span class='line'>:throw ...</span></code></pre></td></tr></table></div></figure>


<p>コマンドも基本は同じでコマンドの<code>{rhs}</code>が<code>execute</code>になってるのですが，
どうしてもスクリプトローカル変数だけはコマンドを定義したファイルの方で評価されてしまうので
ファイルごとにコマンドは定義する必要があるのはこれが理由です．</p>

<p>つまりスクリプトローカル変数諦めるなら一回定義すればあとは同じように使えますが
そもそもコマンドは雑な開発用スクリプトとかテスティングフレームワークで使うことを想定しているので
そんな感じで察してください．</p>

<h3>グラフィカルな描画</h3>

<p>ところで見た目とユーザの驚き的には power-assert のあのグラフィカルな表示を作るところが華と見ることもできそうですが，
今のところとりあえず線が被らない最低限のアルゴリズムで作っているのでもっと改善した表示ができると思います．</p>

<p>もしいい感じのグラフ描画のアルゴリズムわかる人は僕に教えてくださると大変ウレシイです</p>

<h2>最後に</h2>

<p>勢いでﾜｰッと作っていてまだまだ改善点はあるのですが，一通り開発してテストしてる限りではめっちゃよい感じに動くので Vim script 書いてる方や興味あるかたは是非使って見ていただけると嬉しいです．</p>

<p>あと themis との連携を書いてますが，別に themis の作者である
<a href="https://github.com/thinca">thinca</a> さんに使い方とか確認をとったわけでもないので
もしかしたらもうちょっと良く出来たりするかもしれません．</p>

<p>フィードバックとか使い方の質問とか
github: <a href="https://github.com/haya14busa/vital-power-assert">https://github.com/haya14busa/vital-power-assert</a> ,
twitter: <a href="https://twitter.com/haya14busa">https://twitter.com/haya14busa</a> ,
Lingr: <a href="http://lingr.com/room/vim">http://lingr.com/room/vim</a>
あたりにいただけると嬉しさあります．</p>

<p><strong>Vim script でも power-assert して最高の assertion 書いていくゾ!!!</strong></p>

<script src="http://lab.lepture.com/github-cards/widget.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimの検索はもっともっと便利になる! incsearch.vim v2.0 をリリースしました]]></title>
    <link href="http://haya14busa.com/incsearch-dot-vim-ver-2/"/>
    <updated>2015-07-06T01:34:01+09:00</updated>
    <id>http://haya14busa.com/incsearch-dot-vim-ver-2</id>
    <content type="html"><![CDATA[<div class="github-card" data-github="haya14busa/incsearch.vim" data-width="500" data-height="150" data-theme="default"></div>


<p><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></p>

<p>incsearch.vim について知らないかたはこちらの記事を参照してください．
簡単に言えばVimのインクリメンタル検索をカイゼンするプラグインです．
-> <a href="http://haya14busa.com/enrich-your-search-experience-with-incsearch-vim/">incsearch.vimでVimの検索体験をリッチにする - haya14busa</a></p>

<h2>incsearch.vim v2.0 をリリースした!</h2>

<p>v0.9, v1.0, v1.1, v1.2, &hellip; とこれまで incsearch.vim をインクリメンタルにカイゼンにカイゼンを重ねてきました&hellip;
そして本日， incsearch.vim は晴れて一段階進化し， バージョン2.0 となりました!</p>

<p>この進化を一言で言えば，incsearch.vim はもっともっと Vim の検索を便利にすべく <strong>進化・拡張可能</strong> になりました．</p>

<h2>2.0で何ができるようになったか?</h2>

<p>百聞は一見に如かず．以下のgifとともに拡張プラグイン達をご覧ください!</p>

<h3>曖昧検索 | fuzzy search</h3>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/incsearch.vim/extensions/incsearch-fuzzy.gif" alt="incsearch-fuzzy.gif" /></p>

<ul>
<li>GitHub: <a href="https://github.com/haya14busa/incsearch-fuzzy.vim">haya14busa/incsearch-fuzzy.vim</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;haya14busa/incsearch-fuzzy.vim&#39;</span>
</span><span class='line'><span class="c">&quot; マッピング例</span>
</span><span class='line'>map z<span class="sr">/ &lt;Plug&gt;(incsearch-fuzzy-/</span><span class="p">)</span>
</span><span class='line'>map z? <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>fuzzy<span class="p">-</span>?<span class="p">)</span>
</span><span class='line'>map zg/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>fuzzy<span class="p">-</span>stay<span class="p">)</span>
</span><span class='line'><span class="c">&quot; サクッとためす</span>
</span><span class='line'><span class="c">&quot; :call incsearch#call(incsearch#config#fuzzy#make())</span>
</span></code></pre></td></tr></table></div></figure>


<h3>曖昧スペル検索 | fuzzy spell search</h3>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/incsearch.vim/extensions/incsearch-fuzzyspell.gif" alt="incsearch-fuzzyspell.gif" /></p>

<ul>
<li>GitHub: <a href="https://github.com/haya14busa/incsearch-fuzzy.vim">haya14busa/incsearch-fuzzy.vim</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;haya14busa/incsearch-fuzzy.vim&#39;</span>
</span><span class='line'><span class="c">&quot; マッピング例</span>
</span><span class='line'>map z<span class="sr">/ &lt;Plug&gt;(incsearch-fuzzyspell-/</span><span class="p">)</span>
</span><span class='line'>map z? <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>fuzzyspell<span class="p">-</span>?<span class="p">)</span>
</span><span class='line'>map zg/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>fuzzyspell<span class="p">-</span>stay<span class="p">)</span>
</span><span class='line'><span class="c">&quot; サクッとためす</span>
</span><span class='line'><span class="c">&quot; :call incsearch#call(incsearch#config#fuzzyspell#make())</span>
</span></code></pre></td></tr></table></div></figure>


<h3>高速でインクリメンタルなmigemo検索 | migemo search</h3>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/incsearch.vim/extensions/incsearch-migemo.gif" alt="incsearch-migemo.gif" /></p>

<ul>
<li>GitHub: <a href="https://github.com/haya14busa/incsearch-migemo.vim">haya14busa/incsearch-migemo.vim</a></li>
<li>参照: <a href="http://0xcc.net/migemo/">Migemo: ローマ字のまま日本語をインクリメンタル検索</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;haya14busa/incsearch-migemo.vim&#39;</span>
</span><span class='line'><span class="c">&quot; マッピング例</span>
</span><span class='line'>map <span class="k">m</span><span class="sr">/ &lt;Plug&gt;(incsearch-migemo-/</span><span class="p">)</span>
</span><span class='line'>map <span class="k">m</span>? <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>migemo<span class="p">-</span>?<span class="p">)</span>
</span><span class='line'>map mg/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>migemo<span class="p">-</span>stay<span class="p">)</span>
</span><span class='line'><span class="c">&quot; サクッとためす</span>
</span><span class='line'><span class="c">&quot; :call incsearch#call(incsearch#config#migemo#make())</span>
</span></code></pre></td></tr></table></div></figure>


<h3>EasyMotion との連携 | integration with vim-easymotion</h3>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/incsearch.vim/extensions/incsearch-easymotion.gif" alt="incsearch-easymotion.gif" /></p>

<ul>
<li>GitHub:

<ul>
<li><a href="https://github.com/haya14busa/incsearch-easymotion.vim">haya14busa/incsearch-easymotion.vim</a></li>
<li><a href="https://github.com/easymotion/vim-easymotion">easymotion/vim-easymotion</a></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;haya14busa/incsearch-easymotion.vim&#39;</span>
</span><span class='line'><span class="c">&quot; マッピング例</span>
</span><span class='line'>map z<span class="sr">/ &lt;Plug&gt;(incsearch-easymotion-/</span><span class="p">)</span>
</span><span class='line'>map z? <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>easymotion<span class="p">-</span>?<span class="p">)</span>
</span><span class='line'>map zg/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>easymotion<span class="p">-</span>stay<span class="p">)</span>
</span><span class='line'><span class="c">&quot; サクッとためす</span>
</span><span class='line'><span class="c">&quot; :call incsearch#call(incsearch#config#easymotion#make())</span>
</span></code></pre></td></tr></table></div></figure>


<h3>拡張はcomposable!</h3>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/incsearch.vim/extensions/incsearch-fuzzy-easymotion.gif" alt="incsearch-fuzzy-easymotion.gif" />
incsearch.vim x fuzzy x easymotion</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; incsearch.vim x fuzzy x vim-easymotion</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:config_easyfuzzymotion<span class="p">(</span>...<span class="p">)</span> abort
</span><span class='line'>  <span class="k">return</span> extend<span class="p">(</span>copy<span class="p">(</span>{
</span><span class='line'>  \   <span class="s1">&#39;converters&#39;</span>: [<span class="nb">incsearch</span>#config#fuzzy#converter<span class="p">()</span>]<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;modules&#39;</span>: [<span class="nb">incsearch</span>#config#easymotion#module<span class="p">()</span>]<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;keymap&#39;</span>: {<span class="s2">&quot;\&lt;CR&gt;&quot;</span>: <span class="s1">&#39;&lt;Over&gt;(easymotion)&#39;</span>}<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;is_expr&#39;</span>: <span class="m">0</span><span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;is_stay&#39;</span>: <span class="m">1</span>
</span><span class='line'>  \ }<span class="p">),</span> <span class="k">get</span><span class="p">(</span><span class="k">a</span>:<span class="p">,</span> <span class="m">1</span><span class="p">,</span> {}<span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> <span class="p">&lt;</span>Space<span class="p">&gt;</span>/ <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>config_easyfuzzymotion<span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h2>仕組み</h2>

<h3>converter 機能</h3>

<ul>
<li><code>:h incsearch-config-converters</code></li>
</ul>


<p>バージョン2.0でのメイン追加機能，パターンコンバート機能です．
入力したパターンを変換して正規表現を返すコンバーター(複数可)を指定することによって，
入力した正規表現だけでなく，変換された正規表現も追加で検索してくれます．</p>

<p>fuzzy, fuzzyspell, migemo の拡張はどれもこの新たに入った仕組み，converter機能を使っています．</p>

<p>他にも スネークケースとキャメルケースを相互変換してどちらも検索できるようにするとか，
<code>{a,b}</code>を<code>\(a\|b\)</code>に変換するようなオレオレ簡易正規表現シンタックス(?)シュガーを作るとか，
inputを受け取って正規表現を返すというシンプルな機能ながら，活用可能性はたくさんあります！
(※  これらはそのうち実装していくと思います)</p>

<h3>module 機能</h3>

<ul>
<li>GitHub: <a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a></li>
<li><code>:h incsearch-config-modules</code></li>
<li><code>:h Vital.Over.Commandline-modules</code></li>
</ul>


<p>vital-over という incsearch.vim が使用しているライブラリにおけるモジュールを追加できる機能です．
これがどんなことができて，どうやって作ればいいかといったことはそれだけで別の一つの記事どころか数十記事書ける内容なので割愛しますが，
かなりいろんなことができるようになるはずです．(が，その分何でもできすぎるので注意は必要そうですが)．</p>

<p><a href="https://github.com/haya14busa/incsearch-easymotion.vim">haya14busa/incsearch-easymotion.vim</a>
がこの機能を使って検索後に <a href="https://github.com/easymotion/vim-easymotion">easymotion/vim-easymotion</a> の機能を呼び出しています．</p>

<h2>自分で拡張を作ることも可能！※ ただしAPIが固まってるとは言ってない</h2>

<p>もちろんもっと便利な拡張を自分で作っていくことも可能です．
ここでは例としてちょっとした <code>converter</code> を作ってみましょう</p>

<h3>参照</h3>

<ul>
<li><code>:h incsearch#go()</code></li>
<li><code>:h incsearch-config()</code></li>
</ul>


<h3>仕様</h3>

<ul>
<li>正規表現をエスケープして単なる文字列として返し，検索する．</li>
<li>つまりは<code>\V</code>の機能．ただし，普通の正規表現に<strong>加えて</strong>検索できるところが違う．</li>
</ul>


<h3>実装</h3>

<p><code>pattern</code> を受け取って正規表現を返す関数 (<code>s:noregexp()</code>) を実装して，
<code>incsearch#go()</code>に渡すconfigの<code>converters</code>として渡してあげるだけ．
※ converterオブジェクトを作って渡してあげる方法もありますが，現時点では関数を渡してできること大差ない．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:noregexp<span class="p">(</span>pattern<span class="p">)</span> abort
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;\V&#39;</span> . escape<span class="p">(</span><span class="k">a</span>:pattern<span class="p">,</span> <span class="s1">&#39;\&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:config<span class="p">()</span> abort
</span><span class='line'>  <span class="k">return</span> {<span class="s1">&#39;converters&#39;</span>: [<span class="k">function</span><span class="p">(</span><span class="s1">&#39;s:noregexp&#39;</span><span class="p">)</span>]}
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> z/ <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>config<span class="p">())</span>
</span><span class='line'><span class="c">&quot; 例: /\vpattern と検索したら \vpattern がマッチする．普通の検索なら pattern だけ</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>めっちゃ簡単!!!</strong></p>

<h2>Special Thanks</h2>

<p>おしょーさん(<a href="https://github.com/osyo-manga">github@osyo-manga</a>)のライブラリには
毎度お世話になっており，incsearch.vim v2.0 はコマンドラインライブラリである
<a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a> の拡張性があってこそ
リリースできたことだったり，cmigemoコマンドでも高速に migemo 検索できるのはそのまま
<a href="https://github.com/osyo-manga/vital-migemo">osyo-manga/vital-migemo</a> のおかげだったりします．</p>

<p>また <a href="http://lingr.com/room/vim/">Lingrのvim部屋</a> でもincsearch.vimの開発に関わる質問をしたりして参考にしたりフィードバックをもらったりしました．
皆さんありがとうございますっ！</p>

<h2>終わりに．そして次のカイゼンへ&hellip;</h2>

<p>incsearch.vim はシンプルかつVimデフォルトの検索と同じように快適に使用できるオススメプラグインです．
それがバージョン2.0 になり，望めばもっともっと便利に，拡張可能なものになりました．
気になった方は是非つかってみてください．</p>

<p>そして incsearch.vim にはまだまだ改善点があるかと思います(ｼﾞｯｻｲあります)．
なにか見つけた方や「おまえーっ&hellip;APIがなーっ&hellip;ふわふわでなぁーっ&hellip;使いにくくてなーっ&hellip;ゆるさーん(バシーン)」
という方は <a href="https://github.com/haya14busa/incsearch.vim/issues">Issues</a> や
<a href="https://twitter.com/haya14busa">twitter:@haya14busa</a>, はたまた <a href="http://lingr.com/room/vim/">Lingrのvim部屋</a>
あたりなどでフィードバックいただければカイゼンしていきたいと思うのでよろしくお願いしますっ</p>

<div class="github-card" data-github="haya14busa/incsearch.vim" data-width="500" data-height="150" data-theme="default"></div>


<p><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></p>

<script src="http://lab.lepture.com/github-cards/widget.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年の振り返り. またはプログラミング2年目をVimに捧げるとこうなるという話]]></title>
    <link href="http://haya14busa.com/haya14busa-s-happy-vimming-year-2014/"/>
    <updated>2014-12-30T00:00:00+09:00</updated>
    <id>http://haya14busa.com/haya14busa-s-happy-vimming-year-2014</id>
    <content type="html"><![CDATA[<h2>この記事について</h2>

<p>この記事は <a href="http://qiita.com/advent-calendar/2014/vim">Vim Advent Calendar 2014</a> の30日目かもしれません(または来年, Vim記事集約系のイベントやりたいという気持ちの1つです).</p>

<p>今年の2月に <a href="http://haya14busa.com/vim_driven_learning/">1年間『Vim駆動学習』してきて最高に楽しかったのでオススメしたい - haya14busa</a> というVim歴換算で1年を振り返ったエントリーを書いたのですが, 今回は2014年を振り返ってみたら, やっぱりVim活たのしかったなぁという日記的エントリーです.</p>

<p>また思い返してみると僕がプログラミング始めたのは2年と少し前だったので, 2014年はプログラミング2年目の年でもありました.
この文脈でみると<strong>「プログラミング2年目をVimに捧げるとどうなるか?」</strong> というエントリーとも言えそうです. (※1年目からかなりの割合をVimに捧げていました)</p>

<h2>2014年, 今年のVim活を振り返る</h2>

<p>※Vim活が9割です</p>

<h3>カーソル移動系人気プラグインの vim-easymotion の開発を乗っ取った!</h3>

<div class="github-card" data-github="Lokaltog/vim-easymotion" data-width="400" data-height="153" data-theme="default"></div>


<p><img src="../images/easymotion/20141230_easymotion_contribution_graph.png" alt="20141230_easymotion_contribution_graph" />
<img src="../images/gif/easymotion_on_speed_ex.gif" alt="easymotion_on_speed_ex" /></p>

<ul>
<li><a href="https://github.com/Lokaltog/vim-easymotion">Lokaltog/vim-easymotion</a></li>
<li><a href="https://github.com/haya14busa/vim-easyoperator-phrase">haya14busa/vim-easyoperator-phrase</a></li>
<li><a href="https://github.com/haya14busa/vim-easyoperator-line">haya14busa/vim-easyoperator-line</a></li>
<li>ブログ記事: <a href="http://haya14busa.com/mastering-vim-easymotion/">Vim-EasyMotionでカーソル移動を爆速にして生産性をもっと向上させる - haya14busa</a></li>
<li>執筆時GitHubスター数: 1556</li>
</ul>


<p>これは2013年の後半からforkして活動していて, 今年の2月くらいに起こった出来事なのですでに下記の記事に少し感想を書いています.</p>

<p>-> <a href="http://haya14busa.com/vim_driven_learning/">1年間『Vim駆動学習』してきて最高に楽しかったのでオススメしたい - haya14busa</a></p>

<p>記事執筆現在, GitHub のStar数 1556 で, 開発を引き継いだ時点での Star数は 1000 にちょっと届かない程度でした.
もともとほっといた場合の伸び具合がどれくらいかはわからないですが, 自分が引き継いだ時点で Star数 約1000 のリポジトリが, さらに500強増えたという事実は本当に嬉しいです.
GitHub Star 500+ めでたい.</p>

<p>これだけ 「たくさんのスター数がついている≒たくさんの人に使っていただけている」 プロジェクトを開発 &amp; メンテするというのはなかなかに学ぶことがおおくてとても楽しかったです.
今後はリファクタリング含めもっと便利にしたいなぁと思っているんですが, そう思ってから半年くらい経過しております(すでに十分に便利&amp;安定してきているのでモチベが低い).</p>

<h3>最高の検索体験を提供したい! incsearch.vim つくった</h3>

<div class="github-card" data-github="haya14busa/incsearch.vim" data-width="400" data-height="153" data-theme="default"></div>


<p><img src="../images/gif/incsearch/incremental_regex_building.gif" alt="incremental_regex_building" /></p>

<ul>
<li><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></li>
<li><a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a></li>
<li>ブログ記事: <a href="http://haya14busa.com/enrich-your-search-experience-with-incsearch-vim/">incsearch.vimでVimの検索体験をリッチにする - haya14busa</a>

<ul>
<li><a href="http://qiita.com/advent-calendar/2014/vim">Vim Advent Calendar 2014</a> の 14日目の記事でもあります</li>
</ul>
</li>
<li>執筆時GitHubスター数: 231</li>
</ul>


<p>今年の前半がvim-easymotionだとしたら, 後半はほとんど incsearch.vim でした.
実はこのプラグインは最初はサクッと気晴らしにつくったぜーというレベルのものだったのですが,
なんだかんだちゃんとしたものにしようという流れになり目一杯頑張りました.</p>

<p>また使用しているライブラリの <a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a>
にもコントリビューションという名のリクエスト丸投げや, 設計についてコメント, ダメダメな Pull Request
を交えながらいろいろ関わらせていただきました.
おしょーさんありがとうございます, 迷惑いっぱいかけてスイマセンッ, これからもよろしくお願いします..!</p>

<p>便利さの9割は vital-over のおかげなのですが, 自分が1から開発してるリポジトリーでスター数3桁を達成してこれもまた非常に嬉しいです. これもめでたい.</p>

<p>GitHubの VimL trending で Repositories &amp; Developers の両方で1位も獲得できました&hellip;! 嬉しさ.</p>

<p><img src="../images/github/github-trending-viml-today-incsearch-2014-10-21%2009:26:33.png" alt="github-trending-viml-today-incsearch" />
<img src="../images/github/github-developer-today-vimL-2014-10-22%2022:51:58.png" alt="github-developer-today-vimL-2014-10-22 22:51:58" /></p>

<h3>VimConf 2014 で発表した</h3>

<ul>
<li><a href="http://vimconf.vim-jp.org/2014/">VimConf 2014</a></li>
<li>皆さんの発表などなど: <a href="http://vimconf.vim-jp.org/2014/reports/">Reports - VimConf 2014</a></li>
<li>ブログ記事: <a href="http://haya14busa.com/vimconf2014/">VimConf2014 で検索とその拡張について発表した - haya14busa</a></li>
<li>スライド: <a href="https://docs.google.com/presentation/d/1ie2VCSt9onXmoY3v_zxJdMjYJSbAelVR-QExdUQK-Tw/pub">/-improved</a></li>
<li>発表動画: <a href="https://www.youtube.com/watch?v=yB1H5V8e1j4&amp;list=PLx8bw5NQypsnuX8NJPRHvURhXqj2NUnGZ&amp;index=12">/-improved #VimConf2014 - YouTube</a></li>
</ul>


<p>VimConf2014 という感極まるVimのカンファレンスが今年も開催されたのですが, そこでLT枠で発表させていただきました.
Vimの便利な検索機能と上述した incsearch.vim の紹介をしました. 発表グダったりもしましたが, よかったという反応をいただけたり, スライドを英語で書いたので英語圏の人にも見てもらって便利さを伝えられたのは良かったです. 英語というより gif をふんだんに活用したので伝わったという説もある.
(<a href="http://usevim.com/2014/11/14/vimconf/">usevim</a>, <a href="http://www.reddit.com/r/vim/comments/2lwrv0/vimconf_2014_reports/">reddit</a> )</p>

<p>ちなみに動画はテンパッて間違ったことも多々言ってるので鵜呑みにしないでください&hellip; この辺慣れるには場数を踏む必要がありそう</p>

<h3>最高の検索体験を提供したい + α!. vim-asterisk 勢いでつくった</h3>

<div class="github-card" data-github="haya14busa/vim-asterisk" data-width="400" data-height="153" data-theme="default"></div>


<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/vim-asterisk/asterisk_z_star.gif" alt="asterisk_z_star" /></p>

<ul>
<li><a href="https://github.com/haya14busa/vim-asterisk">haya14busa/vim-asterisk</a></li>
<li>執筆時GitHubスター数: 34</li>
</ul>


<p>Vim の <code>*</code> ってとても便利なのですが, 自分のユースケースとしては次のマッチにジャンプして欲しくないという不満があったので, そこを解消するために作りました.
<code>*</code> からの <code>gn</code> テキストオブジェクト活用でスムーズに編集できるようになってとても気に入っています.</p>

<p>結構小さいプラグインではあるのですが, 今まで得たVim scriptの知識や経験をたくさん使っていたり, ビジュアルモードにおける <code>*</code> 機能は <a href="https://github.com/thinca/vim-visualstar">thinca/vim-visualstar</a> の部分をお借りしたり, マルチバイトの扱いを<a href="https://github.com/haya14busa/vim-asterisk/pulls?q=is%3Apr+is%3Aclosed">プルリク</a>貰って直したりとなかなかよさ気なものになりました.</p>

<p>実は似たような機能を提供してるプラグインはいくつかあるのですが, どれも不満がまだありました(Vimの検索機能周りの拡張は結構落とし穴が多い).
incsearch.vim の経験などが活きて落とし穴はうまく回避できました. 気になった方は是非使ってみてください.</p>

<h3>vimrc 読書会にいっぱい参加 &amp; 管理のデータ化・自動化 &amp; 統計ページ をつくった</h3>

<ul>
<li><a href="http://vim-jp.org/reading-vimrc/">vimrc読書会</a></li>
<li><a href="http://vim-jp.org/reading-vimrc/stat/#/">vimrc読書会 Stat</a></li>
<li>ブログ記事: <a href="http://haya14busa.com/reading-vimrc-stat/">vimrc読書会Stat作った - haya14busa</a></li>
<li><a href="http://vim-jp.org/reading-vimrc/stat/#/u/haya14busa">たくさん参加してる様子</a></li>
</ul>


<p>確か管理者権限貰ったのは恐らく今年(すこしあやしい&hellip;厳密には去年だったかも&hellip;)で, 参加するだけでなくちょっとずつ運営面でも関わらせていただきました.
Jekyll を覚えて 読書会のデータを yaml でデータ化したり,
そのデータを使って Angularとd3.jsで 読書会の統計ページをつくったり,
データ化によって扱いやすくなったので python や ruby で簡単なスクリプトを作成して更新作業を自動化したりしました.
読書会は毎週やるので更新が一瞬でできるようになって非常に便利になりました. 統計ページのJS, よくない部分多々あるのでそのうち書き直したい.</p>

<p><strong>毎週土曜日23:00からやっているので皆さん参加しましょう!</strong> -> <a href="http://lingr.com/signup?letmein=vim">http://lingr.com/signup?letmein=vim</a></p>

<h3>Vim プラグイン読書会やってた</h3>

<ul>
<li><a href="http://haya14busa.github.io/reading-vimplugin/">Vimプラグイン読書会</a></li>
</ul>


<p>こちらも1ヶ月周期でやっていました. Vim プラグイン開発, 興味ある. という方にオススメです! 一緒に読みましょう.
またvimrc読書会とVim プラグイン読書会での経験が, Vim以外の普段の開発のレビューにも活かされたような気も&hellip;しま&hellip;す(自信なし).</p>

<p>執筆時現在次の日付が更新されてないという少々のグダりを見せていますが, 落ち着いたら必ず更新します!</p>

<h3>Osaka.vim やで</h3>

<ul>
<li><a href="http://osaka-vim.connpass.com/">Osaka.vim - connpass</a></li>
<li>ブログ記事: <a href="http://localhost:4000/osaka-vim-01/">Osaka.vim #1 に行ってきた - haya14busa</a></li>
</ul>


<p><strong>connpass上では運営になっていますが一切の運営をしていません&hellip;!</strong></p>

<p>関西のVim勉強会, 近年ではほとんどなかったので便利. 関西の皆さん参加しましょう.</p>

<h3>Vimで緊急地震速報が見れるの便利では&hellip;? eew.vim つくった</h3>

<ul>
<li><a href="https://github.com/haya14busa/eew.vim">haya14busa/eew.vim</a></li>
<li>Emacs移植: <a href="http://d.hatena.ne.jp/syohex/20140829/1409291511">eew.vimを移植しました - Life is very short</a></li>
<li>Sublime移植: <a href="https://github.com/tgfjt/Sublime-eew">tgfjt/Sublime-eew</a></li>
</ul>


<blockquote class="twitter-tweet" lang="en"><p>総務省の某審議会のエライ人が「家でテレビで録画を見ていた際、緊急地震速報が出なかった。なんとかならないのか」との意見を述べ、プチ衝撃が走っているらしい。ｗｗｗ 確かに、テレビ見てることには変わりないけれど。</p>&mdash; 閑居 (@doatease2313) <a href="https://twitter.com/doatease2313/status/504522127622418434">August 27, 2014</a></blockquote>


<blockquote class="twitter-tweet" data-cards="hidden" lang="en"><p>とりあえずでつくった <a href="https://t.co/hQQuAnnF9M">https://t.co/hQQuAnnF9M</a> RT <a href="https://twitter.com/haya14busa">@haya14busa</a> Vimに緊急地震速報流すの便利なのでは！？！？！？</p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/505004191199162368">August 28, 2014</a></blockquote>


<p>EmacsやSublimeに移植されたりとちょっとだけ話題になった(すこし).</p>

<h3>その他ちっちゃい Vim plugin 達</h3>

<ul>
<li><a href="https://github.com/haya14busa/unite-ghq">haya14busa/unite-ghq</a>

<ul>
<li>uniteでghqできるの便利では&hellip;?と思ってつくって公開したら, そのわずか数時間前に sorah さんが <a href="https://github.com/sorah/unite-ghq">sorah/unite-ghq</a> を公開しており,
しかもこちらのほうが基本的によくできていて「ｱｱｱｯ&hellip;」とリアルで声がでた少し苦い思い出のあるプラグイン. 自分のバージョン使ってるの自分だけだとおもう. でも便利.
既存プラグインの検索は直前まで入念にやりましょうという教訓を得ました. (数日前にやった時点ではなかったので大丈夫だと思ってた)</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/unite-reading-vimrc">haya14busa/unite-reading-vimrc</a>

<ul>
<li>vimrc読書会のログやvimrcのリンクをuniteで絞り込んで開ける. たまに vimrc読書会 の管理とか過去の記録を見るときに便利.</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/endtagcomment.vim">haya14busa/endtagcomment.vim</a>

<ul>
<li>よくvimrcで見かけるhtmlタグにコメントをつけるスクリプトをforkしてプラグイン化しただけ. もともと便利</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/unite-action-vimfiler_lcd">haya14busa/unite-action-vimfiler_lcd</a>

<ul>
<li>vimfilerで<code>lcd</code>してから開くというuniteアクションが欲しかった. 結局つかってないのであまり便利じゃない.</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/vim-textobj-number">haya14busa/vim-textobj-number</a>

<ul>
<li>数字のテキストオブジェクト. たまに便利. テキストオブジェクト学ぶかぁーという意図も含まれてた気がするけど結局それ以降テキストオブジェクト系プラグインは作成してない. なにかアイデア湧いたら作りたい.</li>
</ul>
</li>
</ul>


<h2>Vim活以外の進捗(残りの1割)</h2>

<ul>
<li>プログラミングのバイトを4月からはじめました(たぶんVim活アピール補正はかかりました. ある意味 Vim script もペイする言語&hellip;?).</li>
<li>それに伴って Scala をやりはじめたんですが視野が広がってとてもよかったし, もっと学んでいきたいです.</li>
<li>JavaScript もそこそこ書いて, Angular.js に触れたりなどしました. underscore.js も便利.</li>
<li>しかし Scala その他 Vim 以外のOSS活動の進捗ﾀﾞﾒです</li>
<li>heroku にPythonで小さいウェッブアプリをつくったのですが, 乗っかってるサービスが終了したので一緒にお亡くなりになってつらい.</li>
</ul>


<h3>勉強会にちょっとずつ参加するようになった</h3>

<ul>
<li><a href="http://scalamatsuri.org/">Enjoy.scala ! 日本最大級の Scala のカンファレンス - ScalaMatsuri</a></li>
<li><a href="http://kansaifp.doorkeeper.jp/events/17206">関西関数型道場 - 第02回 - 関西関数型道場 | Doorkeeper</a></li>
<li><a href="http://fpscala-osaka.connpass.com/">fpscala-osaka - connpass</a></li>
</ul>


<p>Vim 以外の勉強会にも今年はちょっとずつ参加するようになりました(Vimも基本的には今年からですが). しかしこれは進捗でゎなぃな&hellip;</p>

<h2>その他</h2>

<h3>GitHub current streak 365 日達成した</h3>

<blockquote class="twitter-tweet" lang="en"><p>気づいたらGitHubｺﾝﾄﾘﾋﾞｭｯｼｮﾝ Current streak 365日を達成していたっ&#8230;!!! <a href="http://t.co/XMED6OLFUp">pic.twitter.com/XMED6OLFUp</a></p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/544899856037208065">December 16, 2014</a></blockquote>


<p>dotfile 1行変更といったものがたくさんあるので全く大したことはしてないのですが, 日によってはそのついでにちゃんとプログラミングするぞっ! というきっかけになるので自分には合ってる継続的進捗管理術でした. 1年継続めでたい.</p>

<h3>2014年 GitHub の Pull Requests / Issues 一覧</h3>

<p><em>追記:</em></p>

<ul>
<li><a href="https://github.com/pulls?q=is%3Apr+author%3Ahaya14busa+created%3A%222014-01-01+..+2015-01-01%22+">2014年に出した Pull Requests 一覧</a></li>
<li><a href="https://github.com/issues?q=is%3Aissue+author%3Ahaya14busa+created%3A%222014-01-01+..+2015-01-01%22+">2014年に開いた Issues 一覧</a></li>
</ul>


<p>PullRequest 8 opens / 83 closed, Issues 53 open / 95 closed ※99% Vimである</p>

<h3>Podcast 聴くようになった</h3>

<p>聴いてるPodcastは</p>

<ul>
<li><a href="http://rebuild.fm/">Rebuild</a></li>
<li><a href="http://mozaic.fm/">mozaic.fm</a></li>
<li><a href="https://itunes.apple.com/jp/podcast/bairingarunyusu-bilingual/id653415937?mt=2">バイリンガルニュース (Bilingual News)</a></li>
<li><a href="http://thechangelog.com/podcast/">The Changelog Podcast</a></li>
<li><a href="https://itunes.apple.com/us/podcast/the-binpress-podcast/id897178291?mt=2">The Binpress Podcast</a></li>
<li>その他適当に気になったもの.</li>
</ul>


<p>という感じです. 例に漏れず(?), Rebuild.fm から聴き始めてめっちゃおもしろいっ! となり, そこから バイリンガルニュース や The Changelog を聴くようになりました.
最近はずっと気になってはいたけど聞いていなかった mozaic.fm を聴くようになって, こちらも Rebuild とは別のベクトルのよさがあって全部聴きました. 技術系(?)英語 podcast の binpress podcast というポッドキャストは, 全部無料でスクリプトがついているという<em>エイゴ・ゼンゼン・キキトレナイ勢</em>としては歓喜のサービスがついていてお気に入りです. おもしろさは回によって違う感じですが, 英語もついでに学ぶかーという方にはオススメです.</p>

<p>リスニング能力高めてもっと英語のポッドキャストを楽しめるようになりたい&hellip;</p>

<h3>英語の記事をコンスタントに読む &amp; 検索するようになった</h3>

<ul>
<li><a href="http://www.reddit.com/r/vim/">reddit.com/r/vim</a></li>
<li><a href="https://news.ycombinator.com/">Hacker News</a></li>
<li><a href="https://medium.com/">Medium</a></li>
<li><a href="http://getprismatic.com/home">Prismatic</a></li>
</ul>


<p>1年目も別に避けたりはしてなかったのですが, 最近は能動的に英語の情報に触れようとする確率が高くなったかなと思います.
検索や話題になっている記事を除けば, 見ているのはだいたい上記のリンクです.
ただ単に読んでるだけではなかなか得るものも少ないので, 自分から英語で発信する能力をつけたいなーというのが最近の悩みです.
現状 GitHub の issue のやりとりやプラグインのドキュメントは基本英語を使ってるのですが, もっともっと使っていかないとなかなか身につかないですねー.</p>

<h2>来年の抱負とか</h2>

<ul>
<li>Vim もっと頑張る.</li>
<li>Vim のソースコード側も C言語ちょっとぐらい読み書きできるようになって簡単なバグくらいなら報告だけでなく修正案まで出せるようにしたい.</li>
<li>Vim 以外も頑張る. なにか小さなウェッブサービスとか適当につくったりしたい.</li>
<li>Scala力をより深めるのに加えて C, Go, Haskell あたりの言語を触って学んでいきたいという思いがある.</li>
<li>データベース周りとか, 今触ってるレイヤーと別の部分も触っていきたい. 最低限基礎力が欲しい.</li>
<li>英語力をつけていきたい. Vim について英語で適当に英語用Twitterアカウントつくってつぶやくとかなら継続してできるのでは&hellip;?という考えがある.
欲を言えば Lingr の Vim 部屋のノリで英語でチャットとかできれば一番いいんじゃないかという思いがある. IRC に #vim チャンネルあるらしいけど, IRCよくわからない&hellip;ログ読みたい&hellip;</li>
<li>人生は厳しいので人生についてちゃんと考える必要がある. 人生キビシイ.</li>
</ul>


<h2>「プログラミング2年目をVimに捧げるとどうなるか?」</h2>

<p>少々Vim以外の進捗が少なすぎる気がするのは反省ですが, Vim活によってVimというコンテキストに留まらず, たくさんの貴重な経験ができました.
git や GitHub, テスト, CI, オブジェクト指向やらクロージャ, 変数や関数の名前の付け方, 英語での技術系コミュニケーションなどなど, たくさんのことを Vim駆動で理解したり, 理解を深めた1年間だったと思います.</p>

<p>Vim駆動学習, よさがあるのでオススメです. ※ただし用法用量を守って正しく Vim 活しないと Vim 以外の進捗が遅れます. 反省&hellip;</p>

<p>また Vim だといろいろな言語を使ってる人がいて, しかも雲の上のような存在の人もたくさんいたり, オンラインでもオフラインの勉強会でも活動が活発なのでVim以外にもいろんなことが知れるし, プログラミング初学者でも最初から Vim をガンガン使ってプログラミングしていくのはおもしろいかなぁと思います.</p>

<p>振り返ってみるとたくさんのVimmerにお世話になったなぁと思います. ※もちろんVimmerでないひとにもお世話になりました.</p>

<p>みなさん今年はお世話になりました. 来年の2015年もぜひ仲良くしてください. よろしくお願いします.</p>

<p>以上, <a href="https://twitter.com/haya14busa">@haya14busa</a> の 2年目の<del>プログラミング</del> Vim活記録でした.</p>

<script src="http://lab.lepture.com/github-cards/widget.js"></script>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[incsearch.vimでVimの検索体験をリッチにする]]></title>
    <link href="http://haya14busa.com/enrich-your-search-experience-with-incsearch-vim/"/>
    <updated>2014-12-11T22:38:41+09:00</updated>
    <id>http://haya14busa.com/enrich-your-search-experience-with-incsearch-vim</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://qiita.com/advent-calendar/2014/vim">Vim Advent Calendar 2014</a>の14日目の記事です。
13日目は deris さんによる<a href="http://deris.hatenablog.jp/entry/2014/12/13/173125">スマートフォンでVimを操作するためにやっておいたほうがいいこと - derisの日記</a> でした。</p>

<h2>1. incsearch.vim つくった</h2>

<h3>Vimの検索体験をリッチにする, incsearch.vim を作りました</h3>

<div class="github-card" data-github="haya14busa/incsearch.vim" data-width="500" data-height="150" data-theme="default"></div>


<p><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></p>

<p><img src="../images/gif/incsearch/incremental_regex_building.gif" alt="incremental_regex_building" /></p>

<p><br></p>

<h3>あなたとincsearch.vim 今すぐインストール</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;haya14busa/incsearch.vim&#39;</span>
</span><span class='line'>Plugin <span class="s1">&#39;haya14busa/incsearch.vim&#39;</span>
</span><span class='line'>Plug <span class="s1">&#39;haya14busa/incsearch.vim&#39;</span>
</span><span class='line'>map /  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>forward<span class="p">)</span>
</span><span class='line'>map ?  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>backward<span class="p">)</span>
</span><span class='line'>map <span class="k">g</span>/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>stay<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>TL;DR</h3>

<ol>
<li>Vim デフォルトの検索だとインクリメンタルハイライトは1つのマッチしかみてくれない</li>
<li>incsearch.vim はマッチしたもの<strong>すべて</strong>をインクリメンタルにハイライトする</li>
<li>デフォルトのコマンドラインと高い<strong>互換性</strong>を持っているのでインストールしてデフォルトの<code>/</code>を置き換えてもスムーズかつ手軽に使える</li>
<li>本日バージョン1.0としてリリースしました</li>
<li>ぜひ使ってみてください&hellip;!</li>
</ol>


<p>※ ホントにToo long になった感があるので記事は長くて嫌いになってもincsearch.vimはシンプルに使えるので嫌いにならないでくださいっ&hellip;!</p>

<h2>2. Introduction</h2>

<p>Vimの検索を便利にする. incsearch.vim を バージョン 1.0 としてリリースしました!</p>

<p>「百聞は一見に如かず」ということで, 冒頭のgifなどを見ていただくだけで大事なことはすべて伝えつくしてしまった感があります.
「もう便利さはわかった!」 という方は記事なんてすっ飛ばして是非ブラウザバックして使ってみてください!</p>

<p>しかし今まで日本語でまともに解説したことがなかったこともあるので, ちょっとした便利機能やカスタマイズの仕方, 開発についてなど話していきたいと思います. もうすでに使っていたり, 聞いたりしたことあるよーという方も, 本日バージョン1.0としてリリースし, 以前から比べてインクリメンタルに改善してきたので少しは新しい情報もあるかなーと思います</p>

<h2>3. incsearch.vim の機能を解説していくっ!</h2>

<h3>3.1 シンプルにすべてをハイライトするっ</h3>

<ol>
<li>デフォルトの <a href="http://vim-jp.org/vimdoc-ja/options.html#%27incsearch%27">:h &lsquo;incsearch&rsquo;</a> とは違い, マッチしたパターンのすべてをハイライトする</li>
<li>別ウィンドウのハイライトも対応できる(オプションで変更可, version 1.0 で追加されました)</li>
</ol>


<p>一番シンプルかつメインの機能としてマッチしたパターンをすべてハイライトします.
便利さ, 自明っぽいので説明を省きます!</p>

<p><img src="../images/gif/incsearch/incsearch_window.gif" alt="incsearch_window" /></p>

<h3>3.2 正規表現をインテラクティブに作って確認する</h3>

<ol>
<li>デフォルトの検索だとエンターを押して<code>:set hlsearch</code> 状態になるまで, 現在入力している正規表現がどこにマッチしているかわからない</li>
<li>incsearch.vim はもちろん正規表現に対応しており, スムーズに正規表現を作っていける</li>
<li><code>&lt;Plug&gt;(incsearch-stay)</code> というマッピングを提供しており, これはカーソルが動かないので途中でウィンドウ外に飛ぶといったこともない</li>
</ol>


<p>マップ例:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map <span class="k">g</span>/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>stay<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="../images/gif/incsearch/incremental_regex_building.gif" alt="incremental_regex_building" /></p>

<p>(冒頭のgifと同じ)</p>

<p>これは vimrc によく書かれているプラグインマネージャが提供してるインストールコマンドから, インストールされているプラグインの部分とマッチする正規表現を作ってます(簡易版ですが). 普段の検索時にも勿論便利なのですが, 正規表現作る際の便利さは1つしかマッチを確認できないデフォルトの挙動と比べると段違いに捗ります. もしも incsearch.vim でデフォルトの検索を置き換えるまでもないかなーという人でも, 正規表現による検索の際のために<code>g/</code>など好みのマッピングに定義しておくとこういうケースでは便利に使えると思われます.</p>

<h3>3.3 検索中のインクリメンタルカーソル移動とスクロールで快適ファイル内検索</h3>

<ol>
<li>Emacsは検索中にカーソルを前後に動かせるけどVimにはない&hellip;

<ul>
<li>※ Vim には <code>n</code>/<code>N</code> があるので別になくてもよい</li>
</ul>
</li>
<li>incsearch.vim はデフォルトでは <code>&lt;Tab&gt;</code>/<code>&lt;S-Tab&gt;</code>で前後のマッチに移動できる</li>
<li>Emacsや他のエディタでは見ない機能としてスクロール機能を提供しており, 画面内に目的地がないと判断すれば一気にスキップして画面外の次のマッチに飛べる(デフォルトでは<code>&lt;C-j&gt;</code>/<code>&lt;C-k&gt;</code>)</li>
</ol>


<p><img src="../images/gif/incsearch/incremental_move_and_scroll.gif" alt="incremental_move_and_scroll" /></p>

<p><em>なにが便利か?</em></p>

<h4>a) オペレータ待機モード時のモーションとドットリピート</h4>

<p>ノーマルモードでは問題でもないですが, <code>d/{pattern}</code> といった オペレータ待機モード
で使う場合, 決定したあとに <code>n</code>/<code>N</code> を使うことはできません. しかし,
最初に目測でマッチを確認してからカウントをつけて <code>3d/{pattern}</code> とするのはとてもしんどい上に間違う可能性もあり, 生産的ではありません&hellip;</p>

<p>また1回だけの場合は ビジュアルモード を使えば上記の問題は回避できますが, これだとドットリピート が効きません.</p>

<p>そこで, incsearch.vim の <code>&lt;Tab&gt;</code>/<code>&lt;S-Tab&gt;</code> (<code>:h &lt;Over&gt;(incsearch-next)</code>) を使って
検索中にカーソルを移動させれば一目で目的地まであとどれくらいかもわかるし,
オペレータと組み合わせるモーションとしての使用も, その後のドットリピートの問題も解消できます.</p>

<h4>b) <code>:h jumplist</code> の更新が1回で済む</h4>

<p>ノーマルモードでは問題でもないといったな? あれは嘘だ!</p>

<p>Vimには <code>:h jump-motions</code> というモーションの種類があり, これに属するモーションを
行うとジャンプ前のカーソル位置が記憶され, <code>&lt;C-o&gt;</code>/<code>&lt;C-i&gt;</code> でそれらのカーソル位置を
行ったり来たりできる超便利機能が存在します. 検索系のモーション(<code>/</code>,<code>?</code>,<code>n</code>,<code>N</code>, etc..)
はこの jump-motions に属しており incsearch.vim でも勿論対応しているのでその機能を
バリバリ使うことができます.</p>

<p>ここで問題なのは <code>n</code>や<code>N</code> も jump-motions ということです. 検索後に <code>n</code>/<code>N</code>で移動したあとやっぱり検索した元の位置に戻りたいな〜という時に
<code>n</code>/<code>N</code> を押した回数分<code>&lt;C-o&gt;</code>を押す(またはカウントを前置する)必要があって地味に不便です.</p>

<p>incsearch.vim で検索中に<code>&lt;Tab&gt;</code>を押して移動してから検索を決定すれば勿論 <code>jumplist</code>
の更新は1回で済むので<code>jumplist</code>を汚すことなく十二分にそのジャンプ機能の便利さを享受することができます.
地味なよさがありますね.</p>

<h4>c) スクロール機能で <code>n</code> 連打せずファイル内をサクっと検索</h4>

<p>a), b) は1つ1つ前後に移動する機能の紹介でしたが, incsearch.vim は スクロール(デフォルトでは
<code>&lt;C-j&gt;</code>がスクロールダウン, <code>&lt;C-k&gt;</code>がスクロールアップ)という機能を搭載しており, これは人に
よってはライフチェンジングになりうるなかなかオススメ機能の1つです.</p>

<p>先ほどのgifを見てもらうとわかりやすいかと思うのですが,</p>

<p><em>デフォルトの場合</em></p>

<ol>
<li>「あーファイル内の{pattern}って部分に用があるな〜」</li>
<li>「よーし<code>/{pattern}&lt;CR&gt;</code>で検索して<code>n</code>, <code>n</code>, <code>n</code>, &hellip;」</li>
<li>「まだ見つからない&hellip;(ファイル内に<code>{pattern}</code>がたくさんあって辿り着かない)」</li>
<li>=> 不便&hellip;</li>
</ol>


<p><em>incsearch.vimのスクロール機能を使った場合</em></p>

<ol>
<li>「あーファイル内の{pattern}って部分に用があるな〜」</li>
<li>「よーし<code>/{pattern}</code>で incsearch.vim を起動しよう」</li>
<li>「あー画面内にいっぱい<code>{pattern}</code>がある&hellip;よし<code>&lt;C-j&gt;</code> で次の画面へ」</li>
<li>「<code>&lt;C-j&gt;</code>を数回押して目的地発見. 任意で<code>&lt;Tab&gt;</code>/<code>&lt;S-Tab&gt;</code>で前後に移動してから<code>&lt;CR&gt;</code>!」</li>
<li>=> <em>幸せ便利</em></li>
</ol>


<p>勿論, そもそもファイル内にたくさん存在しないようなキーワードを使って検索したり, タグが存在するなら
ctagsなどを使用してタグジャンプしたほうが断然よいですが,
いつでもユニークなキーワードが思い浮かんだり, タグが存在するわけではないので万能ではありません.
検索だとかなり汎用性が高いので個人的にはとても多用してる機能の１つになってます.</p>

<p>また他にもファイルの横断検索を補助するような機能を提供しているVimの機能や
プラグインなどなどはあるとは思いますが, 以下のようなメリットがあります</p>

<ol>
<li>&ldquo;検索&rdquo; として使える

<ul>
<li><code>gn</code>や<code>:substitute</code>と連携したりなど&#8221;検索&#8221;は他のVimの機能と一緒に使うことによって,
相乗効果でより手に馴染む快適なキーストロークでエディットすることができます.</li>
</ul>
</li>
<li>周囲のコンテキスト, 前後の行がみやすい

<ul>
<li><code>:vimgrep</code> や <code>unite-line</code> といった機能はだいたい前後の行が見れなかったりして
ユースケースによっては困ることもあります. ただし<code>grep</code>
などは複数のファイルを扱える大きなメリットがあるので使い分けれるようになるのが一番よさそうです.</li>
</ul>
</li>
</ol>


<h3>3.4 オート:nohlsearch</h3>

<ol>
<li><code>:set hlsearch</code>って便利でもあるけどだいたいウザイ

<ul>
<li><code>nnoremap &lt;Esc&gt;&lt;Esc&gt; :&lt;C-u&gt;nohlsearch&lt;CR&gt;</code> と言ったマッピングで検索後に消す人が多いと思います.</li>
</ul>
</li>
<li>incsearch.vim の <code>オート:nohlsearch</code> 機能を使えば検索後カーソル移動したらハイライトが消えるようになります.</li>
<li>地味に便利</li>
</ol>


<p><img src="../images/gif/incsearch/incsearch_auto_nohlsearch.gif" alt="incsearch_auto_nohlsearch" /></p>

<h4>設定</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">hlsearch</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:<span class="nb">incsearch</span>#auto_nohlsearch <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>map <span class="k">n</span>  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">n</span><span class="p">)</span>
</span><span class='line'>map <span class="k">N</span>  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">N</span><span class="p">)</span>
</span><span class='line'>map *  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span>*<span class="p">)</span>
</span><span class='line'>map #  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span>#<span class="p">)</span>
</span><span class='line'>map <span class="k">g</span>* <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">g</span>*<span class="p">)</span>
</span><span class='line'>map <span class="k">g</span># <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">g</span>#<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>※ <code>&lt;Plug&gt;(incsearch-nohl-n)</code> などは単なる <code>&lt;Plug&gt;(incsearch-nohl)n</code> のエイリアス
なので独自の <code>n</code>や<code>*</code>の機能を提供しているわけではありません</p>

<h3>3.5 他のプラグインと組み合わせて使う</h3>

<p>(3.4のつづき)</p>

<p><code>incsearch.vim</code> は <code>/</code> とそれにまつわる検索の便利機能を提供するようにシンプルにしようとデザインしてるつもりです(そこっ!検索にまつわる〜とか言ってる時点でシンプルではないとか言わない!). なので <code>n</code> や <code>*</code> を拡張したい場合に備え別の拡張プラグインと同時に扱える用に設計しています.</p>

<p>普通に一緒に使う分には何も考えなくとも併用できますが, incsearch.vim の オート :nohlsearch 機能 を使いたい場合はマッピングをちょっといじる必要があるので自分が使ってる例を出してみます</p>

<h4>n 拡張プラグイン vim-auzu と一緒に使う</h4>

<div class="github-card" data-github="osyo-manga/vim-anzu" data-width="500" data-height="150" data-theme="default"></div>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map   <span class="k">n</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">n</span><span class="p">)</span>
</span><span class='line'>map   <span class="k">N</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">N</span><span class="p">)</span>
</span><span class='line'>nmap  <span class="k">n</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>anzu<span class="p">-</span><span class="k">n</span><span class="p">-</span>with<span class="p">-</span>echo<span class="p">)</span>
</span><span class='line'>nmap  <span class="k">N</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>anzu<span class="p">-</span><span class="k">N</span><span class="p">-</span>with<span class="p">-</span>echo<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>vim-anzu は <code>n</code>/<code>N</code> を押すとファイル内の <code>現在位置までの数/全マッチ数</code> を表示してくれる拡張機能です.</p>

<h4>* 拡張プラグイン vim-asterisk と一緒に使う</h4>

<div class="github-card" data-github="haya14busa/vim-asterisk" data-width="500" data-height="153" data-theme="default"></div>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map *  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span>*<span class="p">)</span>
</span><span class='line'>map <span class="k">g</span>* <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span><span class="k">g</span>*<span class="p">)</span>
</span><span class='line'>map #  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span>#<span class="p">)</span>
</span><span class='line'>map <span class="k">g</span># <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span><span class="k">g</span>#<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>または vim-asterisk の<code>z*</code>機能(カーソルが動かない<code>*</code>) をメインに使う場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map *  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>nohl0<span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span>z*<span class="p">)</span>
</span><span class='line'>map <span class="k">g</span>* <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>nohl0<span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span>gz*<span class="p">)</span>
</span><span class='line'>map #  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>nohl0<span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span>z#<span class="p">)</span>
</span><span class='line'>map <span class="k">g</span># <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>nohl0<span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span>gz#<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>vim-asterisk は僕が最近作った <code>*</code> をカイゼンするプラグインです. 機能としては</p>

<ol>
<li>カーソルを動かさない <code>*</code> 機能の提供(マッピングにzのprefixがついてる)

<ul>
<li>動かさずに <code>*</code> や <code>g*</code> でカーソル位置の単語を検索レジスタ(<code>@/</code>)に入れたあとに
<code>gn</code> などを組み合わせて編集したいというケースでは次のマッチに飛ぶ必要がないので
カーソル動かないバージョンの <code>*</code> が欲しかった. どうせ <code>n</code>/<code>N</code> ですぐ動かせる</li>
<li><code>noremap * *N</code> という解決法はダサいしウィンドウが一時的に動くので不便</li>
</ul>
</li>
<li>ビジュアルモードで選択したテキストを検索するvisual-star 機能

<ul>
<li>サクッと勢いで作ったので <a href="https://github.com/thinca/vim-visualstar">thinca/vim-visualstar</a>
のマルチバイトや <code>keyword</code> の扱いの部分のコードをお借りしています. ありがとうございます</li>
<li>visual-star は <code>CursorMoved</code> イベントが2回発生してしまうという問題があり,
incsearch.vim の オート:nohlsearch 機能と併用できなかった.
なので visual-star機能と同時に使いたい場合はvim-asteriskのvim-asterisk機能を使うと便利</li>
</ul>
</li>
<li>ignorecase だけでなく smartcase の値も一緒にみてくれる

<ul>
<li>デフォルトはなぜか <code>ignorecase</code> の値しかみてくれず, <code>smartcase</code> を設定していても<code>ignorecase</code>状態で検索される</li>
<li>非直感的すぎるので vim-asterisk は <code>:set ignorecase</code>の値も<code>:set smartcase</code>をみるようになっています</li>
</ul>
</li>
</ol>


<h3>3.6 Vim のデフォルトからちょっとカイゼン</h3>

<h4>a) magic オプションカイゼン</h4>

<p>Vimには <code>'magic'</code> という正規表現のエスケープする文字を変えるオプションがありますが
<code>\m</code>, <code>\M</code> しか設定できません(<code>:h /magic</code>).
またこれは<code>/</code>だけでなくすべての正規表現の挙動を変えてしまい設定すると,
対応できていないプラグインが動かなくなったりする問題があります (<code>:h 'magic'</code>)</p>

<p>incsearch.vim ではこれをカイゼンして <code>\v</code>, <code>\V</code>, <code>\m</code>, <code>\M</code> の, どの magic でも設定できる. また勿論他のプラグインには一切影響しません.</p>

<p><em>例</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:<span class="nb">incsearch</span>#<span class="nb">magic</span> <span class="p">=</span> <span class="s1">&#39;\v&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>b) カーソル下単語補完やCtrl-Wによる単語削除のカイゼン</h4>

<p>Vimは<code>set incsearch</code>状態で検索中に<code>&lt;C-r&gt;&lt;C-w&gt;</code>を押すとコマンドラインのカーソル前の単語とのマッチをみて,
バッファのカーソル下の単語を補完してくれる機能を持っています.
この機能自体はとてもべんりなのですが, コマンドラインが <code>/\vwo</code> の状態, カーソル下の単語が <code>word</code> の時に
<code>&lt;C-r&gt;&lt;C-w&gt;</code> を押しても補完が発動せず単にカーソル下の単語が挿入され <code>/\vwoword</code>になってしまいます.</p>

<p>これはvery magicオプションを設定する<code>\v</code>の<code>v</code>部分と<code>wo</code>との区別がなく<code>vwor</code>
がコマンドラインのカーソル前の単語と認識されているのが原因なので, カーソル前の単語
の範囲をかしこく決めてくれる機能を提供しています(オプションでoffにすることは可能です. <code>:h g:incsearch#smart_backward_word</code>)</p>

<p><code>&lt;C-w&gt;</code> によるカーソル前の単語の削除も同様の問題がありこれもカイゼンして,
<code>/\vword</code>状態で<code>&lt;C-w&gt;</code>を押すとデフォルトだと<code>/\</code>となるところを<code>\v</code>となるようにしています</p>

<p><img src="../images/gif/incsearch/incsearch_smart_backward_word.gif" alt="incsearch_smart_backward_word" /></p>

<p>見た目はとっても地味で聞いてもピンとこないかもしれないですが, 挙動が直感的になるとても気に入ってる機能のひとつです. ｼﾞｯｻｲﾍﾞﾝﾘ</p>

<h3>3.6 マッピングについて</h3>

<ol>
<li><code>:cnoremap</code> や <code>:cmap</code> に設定されているマッピングは自動で適用される</li>
<li>incsearch.vim が提供する機能へのマッピングや, <code>:cnoremap</code> の設定の上書き,
incsearch.vim でのみマッピングしたいという場合は <code>:h IncSearchNoreMap</code> コマンド
を使います</li>
</ol>


<p><em>設定例</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>augroup <span class="nb">incsearch</span><span class="p">-</span><span class="nb">keymap</span>
</span><span class='line'>    <span class="k">autocmd</span><span class="p">!</span>
</span><span class='line'>    <span class="k">autocmd</span> <span class="nb">VimEnter</span> * <span class="k">call</span> <span class="k">s</span>:incsearch_keymap<span class="p">()</span>
</span><span class='line'>augroup END
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:incsearch_keymap<span class="p">()</span>
</span><span class='line'>    IncSearchNoreMap <span class="p">&lt;</span>Right<span class="p">&gt;</span> <span class="p">&lt;</span>Over<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>next<span class="p">)</span>
</span><span class='line'>    IncSearchNoreMap <span class="p">&lt;</span>Left<span class="p">&gt;</span>  <span class="p">&lt;</span>Over<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">prev</span><span class="p">)</span>
</span><span class='line'>    IncSearchNoreMap <span class="p">&lt;</span>Down<span class="p">&gt;</span>  <span class="p">&lt;</span>Over<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="nb">scroll</span><span class="p">-</span><span class="k">f</span><span class="p">)</span>
</span><span class='line'>    IncSearchNoreMap <span class="p">&lt;</span>Up<span class="p">&gt;</span>    <span class="p">&lt;</span>Over<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="nb">scroll</span><span class="p">-</span><span class="k">b</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.7 autocmd で拡張できる</h3>

<p>参照: <code>:h incsearch-autocmd</code></p>

<p>incsearch.vim は Vim デフォルトのコマンドラインのと違い独自の autocmd イベントを発行しているので, それをつかってincsearch.vimを拡張することができます. 以下は <a href="https://github.com/inside/vim-search-pulse">inside/vim-search-pulse</a> というプラグインの機能を簡単に組み込んでみた例です. 個人的には要らないけどなんかカッコイイ&hellip;!?</p>

<p><img src="../images/gif/incsearch/incsearch_autocmd_flash.gif" alt="incsearch_autocmd_flash" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:flash<span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> _ <span class="k">in</span> range<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">set</span> <span class="nb">cursorline</span><span class="p">!</span>
</span><span class='line'>    <span class="k">redraw</span>
</span><span class='line'>    sleep <span class="m">50</span>m
</span><span class='line'>  <span class="k">endfor</span>
</span><span class='line'>  <span class="k">set</span> <span class="nb">cursorline</span><span class="p">!</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'>augroup <span class="nb">incsearch</span><span class="p">-</span>pulse
</span><span class='line'>    <span class="k">autocmd</span><span class="p">!</span>
</span><span class='line'>    <span class="k">autocmd</span> <span class="nb">User</span> IncSearchExecute <span class="k">call</span> <span class="k">s</span>:flash<span class="p">()</span>
</span><span class='line'>augroup END
</span><span class='line'>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>my<span class="p">-</span>flash<span class="p">)</span> :<span class="p">&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span><span class="k">call</span> <span class="p">&lt;</span>SID<span class="p">&gt;</span>flash<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>map <span class="k">n</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">n</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>my<span class="p">-</span>flash<span class="p">)</span>
</span><span class='line'>map <span class="k">N</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">N</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>my<span class="p">-</span>flash<span class="p">)</span>
</span><span class='line'><span class="c">&quot; デフォルトの場合</span>
</span><span class='line'><span class="c">&quot; map n n&lt;Plug&gt;(my-flash)</span>
</span><span class='line'><span class="c">&quot; map N N&lt;Plug&gt;(my-flash)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4. Development</h2>

<p>開発の話とか.</p>

<h3>4.1 Design</h3>

<p>ここまでいろいろと紹介しておいてどうかという話なのですが, incsearch.vim は
<em>シンプル</em>に機能を提供し , デフォルトのコマンドラインと高い<em>互換性</em>を保ちつつ,
それでいて<em>拡張性</em>の高いものにしようというコンセプトでつくっています(実際そうなっているとは言ってない)</p>

<p>特に一番苦心したのはデフォルトのコマンドラインとの互換性を保つように開発するところでした.
現在はVimのデフォルトの<code>/</code>でできるほとんどのことはできますが,</p>

<p>ビジュアルモードでのハイライトだったり, vim-repeat といった別のプラグインに依存せず
ドットリピートを可能にしたり, 逆にそれを可能にした <code>&lt;expr&gt;</code> マッピングによる <code>textlock</code> という
Vimの制限を解消するために, 必要でない部分は<code>&lt;expr&gt;</code> マッピングを使わないようにするといった回り道を
しながら, 現在はほぼデフォルトと互換性のある状態にできたと思います.</p>

<h4><code>&lt;expr&gt;</code> についてちょっと解説したりする</h4>

<ol>
<li><code>:h :map-&lt;expr&gt;</code></li>
<li>ドットリピート対応できる</li>
<li><code>:h function-search-undo</code> とかの制限をかいくぐれる</li>
<li>いろいろいじった上で最終的にデフォルトのマッピングを返して実行! ということができるのでデフォルトのモーションを拡張する際にとても便利</li>
<li>しかし問題点もある</li>
</ol>


<p><code>&lt;expr&gt;</code> とは expression mapping の略で, <code>{rhs}</code>(right-hand-side) を評価した値を返してくれます.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;</span> <span class="k">g</span><span class="sr">/ printf(&quot;/</span>%<span class="k">s</span>\<span class="p">&lt;</span>CR<span class="p">&gt;</span>&quot;<span class="p">,</span> input<span class="p">(</span><span class="s1">&#39;&gt;&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のマッピング例では, <code>{rhs}</code> の <code>input('&gt;')</code> が評価され, そこで入力した値を<code>{pattern}</code>とすると
それが<code>printf()</code>によって最終的には <code>/{pattern}&lt;CR&gt;</code> になります.</p>

<p>何がいいのかというと, 実際に <code>dg/pattern</code> などと使った際に, <code>{rhs}</code> が評価されて <code>d/pattern</code> になります.
これはそもそも最初から <code>d/pattern</code> と打った時と同様の挙動になるので, あたかもデフォルトの<code>/</code>を使ったような挙動を簡単に実装できるのです!
これによって ドットリピート や <code>:function-search-undo</code> に対応することが可能となります.</p>

<p>とは行ってもイマイチわかりにくいと思うので <code>&lt;expr&gt;</code> を使わないマッピングを見てみましょう.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:non_expr_search<span class="p">()</span>
</span><span class='line'>    execute <span class="s1">&#39;normal!&#39;</span> printf<span class="p">(</span><span class="s2">&quot;/%s\&lt;CR&gt;&quot;</span><span class="p">,</span> input<span class="p">(</span><span class="s1">&#39;&gt;&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'><span class="nb">noremap</span> z/ :<span class="p">&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span><span class="k">call</span> <span class="p">&lt;</span>SID<span class="p">&gt;</span>non_expr_search<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>単に検索という意味では動いているように見えるのですが, <code>function-search-undo</code>の制限により
ハイライトされず, また <code>dz/pattern</code> は <code>d:&lt;C-u&gt;call &lt;SID&gt;non_expr_search()&lt;CR&gt;</code> となるので,
ドットリピート時にも <code>s:non_expr_search</code> 関数が呼ばれてしまします. これによってその中の
<code>input()</code>がドットリピートでも呼ばれてしまい入力待ちになってしまいます.
これでは以前に入力した値をつかって検索してくれるデフォルトのドットリピートの挙動が再現出来ていません&hellip;不便&hellip;</p>

<p>普通のマッピングだとこういう問題があるのでそれを解消ができる <code>&lt;expr&gt;</code>
はデフォルトのモーションの拡張にとてもあっているのですが,
<code>&lt;expr&gt;</code> は<code>&lt;expr&gt;</code>で上述した副作用として <code>:normal</code> が使えないといった問題もあるので
これから<code>&lt;expr&gt;</code>を使ってプラグイン作りたいっという方は注意して使ってみてください.</p>

<p>incsearch.vim や先ほど紹介した vim-asterisk も<code>&lt;expr&gt;</code>を活用して便利にしたりしています.
他にも <a href="https://github.com/rhysd/clever-f.vim">rhysd/clever-f.vim</a> や <a href="https://github.com/deris/vim-shot-f">deris/vim-shot-f</a>
といった <code>f</code> を拡張するプラグインでも <code>&lt;expr&gt;</code> が使用されており, もともとこの<code>&lt;expr&gt;</code>でドットリピートに対応するという方法は
僕は clever-f で初めてみました. スゴイ.</p>

<h3>4.2 vital-over, または incsearch.vim のカスタムコマンドラインインターフェースについて</h3>

<div class="github-card" data-github="osyo-manga/vital-over" data-width="400" data-height="150" data-theme="default"></div>


<p>incsearch.vim は vital-over というカスタムコマンドラインインターフェースを提供するライブラリを使わせていただいてます.
incsearch.vim のデザインとしてVimデフォルトとの互換性を目指していると先ほど書いたのですが,
実はincsearch.vimがやっている部分は検索だけで,
コマンドラインインターフェースがVimのデフォルトと同じように使えるのはこの vital-over というライブラリのおかげです.
本当にアツイプラグインなので興味あるVim プラグイン開発者は是非使ってみてください!</p>

<p>モジュール性が高いのでガッツリとしたコマンドラインとしてではなく, ちょっと便利な <code>input()</code> や
<code>getchar()</code> として使えるかなーと思います. そのうち何かまた作ってみたい&hellip;!</p>

<h3>4.3 テストとかLintとか</h3>

<ol>
<li>themis.vim でテスト書いた</li>
<li>vim-lint / vint (期待)</li>
<li>テストって便利って改めて気づいた&hellip;!</li>
<li>themis のテスト書き方自体は <a href="https://github.com/vim-jp/vital.vim">vim-jp/vital.vim</a> など他のものを参考にするとよいと思う</li>
</ol>


<div class="github-card" data-github="thinca/vim-themis" data-width="400" data-height="150" data-theme="default"></div>


<div class="github-card" data-github="syngan/vim-vimlint" data-width="400" data-height="153" data-theme="default"></div>


<p><img src="../images/gif/incsearch/incsearch_dot_reporter_test.png" alt="incsearch_dot_reporter_test.png" />
<img src="../images/gif/incsearch/incsearch_badges.png" alt="incsearch_badges.png" /></p>

<p>今回incsearch.vim は(現在が開発&amp;メンテしてるvim-easymotionでもちょっとずつやってはいましたが)割と初めてスクラッチでテストやlintをしながら
書いたものだったのですが Vim script の開発周りの環境はかなり便利です. 特に <strong>Vim</strong> を使えるところが開発しやすくてよいです.</p>

<p>CI も travis で 最新に近い Vim と travis.org の Vim のバージョンの両方でテスト
(<a href="https://github.com/vim-jp/vital.vim/pull/241">Test on the latest Vim by crazymaster · Pull Request #241 · vim-jp/vital.vim</a>) したり,
<a href="http://d.hatena.ne.jp/thinca/20140812/1407775202">Vim プラグインを Windows 環境でテストする - 永遠に未完成</a>
を参考に Windows 環境 でもテストがしてみたりしてなかなかよかったです. (<del>Windows環境だけで違う挙動になるのヤメローッ!</del>)</p>

<p>Lint に関しては <a href="https://github.com/Kuniwak/vint">Kuniwak/vint</a> という python 製ツールも気になっているので期待ですね.</p>

<h3>4.4 Vim script 楽しいっ</h3>

<p>テストやLintツールもあるし,
<a href="https://github.com/vim-jp/vital.vim">vim-jp/vital.vim</a> や
<a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a>
といったライブラリ, Vim から引ける膨大な<code>:help</code>, 困ったら <a href="http://lingr.com/room/vim/archives#message-20835831">vim-jp – Lingr</a>
や <a href="https://github.com/vim-jp/issues/issues">Issues · vim-jp/issues</a> に相談, バグ報告できる環境,
Vim を使って開発できる Vim script を書くのは楽しいです&hellip;!</p>

<p><br>
&hellip;&hellip;..
<br>
<br>
<strong>&hellip;.ほんとうですよっ!?</strong> (言語仕様は寛容な心でカバー)
<br>
<br></p>

<p>ぜひぜひみなさんVim プラグイン開発やっていって開発効率を上げたり快適でリッチなエディタ環境を作ってみましょう&hellip;!</p>

<p>(※ 用法, 用量を守ってただしくVimしましょう)</p>

<h2>5. 最後に</h2>

<p>話が逸れてる感をひしひしと感じますが, あくまで incsearch.vim を紹介・解説する記事だったはずなので話を戻しましょう.</p>

<p>incsearch.vim, 今でもとても便利だと思っているのですが, まだまだ開発していく余地があります. (後方互換性を壊すことはしないと思います)</p>

<p>autocmd の拡張例を上述しましたが, まだコマンドラインの中身をいじれるようなインターフェースは実は提供できていません.
どこまでオープンにしていけばいいのか, オープンにしたら本当に便利になるのか,
などなど僕にとっては難しくゆっくり考えながら決めて行きたいです.  意見頂けたりとかコントリビューションお待ちしています&hellip;!</p>

<p>Vim Advent Calendar でテンションあがってちょっと長くなってしまいました. ここまで読んでくださった方ありがとうございます.</p>

<p><a href="https://github.com/haya14busa/incsearch.vim">incsearch.vim</a> 是非1度使ってみてください. 気に入って頂けるとそれはとっても嬉しいです!</p>

<p>それではVim Advent Calendar 2014の14日目の記事でした.</p>

<p>Happy Vimming!</p>

<script src="http://lab.lepture.com/github-cards/widget.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VimConf2014 で検索とその拡張について発表した]]></title>
    <link href="http://haya14busa.com/vimconf2014/"/>
    <updated>2014-11-09T11:07:22+09:00</updated>
    <id>http://haya14busa.com/vimconf2014</id>
    <content type="html"><![CDATA[<h2>VimConf2014 にいってきました</h2>

<p>2014/11/08(Sat)に開催された <a href="http://vimconf.vim-jp.org/2014/">VimConf 2014</a> に参戦して「/-improved」という発表をしてきました</p>

<h2>TL;DR</h2>

<p>初めてVimConfで約80人の前でLTをしたり, 他の方のおもしろい発表を聞いたり, 懇親会などなどで Vimmer のみなさんとお話出来て感極まりました.</p>

<h2>発表した</h2>

<h3>/-improved</h3>

<iframe src="https://docs.google.com/presentation/d/1ie2VCSt9onXmoY3v_zxJdMjYJSbAelVR-QExdUQK-Tw/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p><br>
Vimデフォルトの検索をもっと使いこなそう! という内容と, 最近開発している検索拡張プラグイン, <a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a> についての発表を行いました.</p>

<p>VimConf, 一応国際的なものを目指すという声があるような話をしていたと思うので拙いですが基本全編英語で書いてみました. (gifアニメーションがあるので英語壊れててもある程度わかると信じている.) また incsearch.vim の README にも <a href="https://github.com/haya14busa/incsearch.vim#vimconf2014">リンク</a> を貼ってみました (そのうちwikiとかに移動させるかもですが)</p>

<p>incsearch.vimについてはスライドを&hellip;と思いましたが, 英語がたぶんダメダメで(特に最初の2-3コの発表を聞いてからエクストリーム加筆修正した最後の部分), LT10分間に合わなくて最後駆け足で喋ったので少し. 詳しくはスライド or いづれ書かれるであろう(?) incsearch.vim の解説記事を参照していただきたいです.</p>

<h4>Design</h4>

<blockquote class="twitter-tweet" lang="en"><p>incsearch.vim、完成度高すぎて空気のような存在になっている</p>&mdash; トデス子 (@todesking) <a href="https://twitter.com/todesking/status/525937969308262401">October 25, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>incsearch.vim の目指すデザインとしては基本的にシンプルな検索の拡張を提供し, Vim デフォルトの <code>/</code> を置き換えても違和感なく移行できるというところを１つの重要なポイントとしています. この @todesking さんのツイートはVimConfのコンテキストでつぶやかれたツイートではないのですがまさに「空気のように」に使えるよう目指していてスライドでも似たようなことをすこし話していました (あとこのツイートが本当に嬉しくてどこかに書いておきたかった. ありがとうございます)</p>

<h4>後半話してたこと</h4>

<p>この incsearch.vim というプラグインは決して自分だけの力で開発したわけでなく, いろんな人に協力があって作ることができました(という部分がエクストリーム加筆部分なので相当に雑なスライドになっている).</p>

<p>もとは<a href="https://github.com/osyo-manga/vim-over">osyo-manga/vim-over</a>に使われていたカスタムコマンドラインを
<a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a> というライブラリとしてをおしょーさんに要望投げまくって作ってもらったり,
ドットリピートの対応法とかは <a href="http://haya14busa.github.io/reading-vimplugin/">Vimプラグイン読書会</a> などで教えてもらったり,
正規表現をderisさんに教えて頂いたり, 使っていただいた方に不具合を報告してもらったりアイデアをもらったり,
開発時にぶつかったVim本体のバグを<a href="https://github.com/vim-jp/issues/issues">vim-jp/issues</a>に報告して修正してもらったりと,
たくさんの人に協力していただいてこそincsearch.vimはここまでできたと思ってます. みなさん本当に感謝しています. ありがとうございます！</p>

<p>kaoriyaさんの話にあった(kaoriyaさんのスライド参照) Vim のよさ, 「らしさ」の１つには確かに「Vim のユーザー」があると僕も思って,
incsearch.vim はそのよさがなければ絶対に作れなかったプラグインの1つとして <strong>Vim のよさ</strong> としても話したいなーと思い,
もともと開発のバックグラウンドの部分は入れてなかったのですが急遽スライドを追加して話させていただきました.</p>

<p>Vim のよさがより伝わるといいなーと思いましたが, そのせいで完全にLTの10分制限を越えてしまったので同時に反省もしています&hellip;</p>

<p>正直緊張しすぎで全然聴衆の方がどういうふうに聞いてくれてるか反応を見れてなかったのですが, twitter とかを見る限り便利さは伝わったようなので嬉しかったです. みなさん興味が出たらぜひ使ってみてください&hellip;!</p>

<h2>それぞれの発表, あと感想とか</h2>

<h3><a href="http://koron.github.io/vimconf-2014-koron/">Identity of the Vim</a> <a href="https://twitter.com/kaoriya">@kaoriya</a> さん)</h3>

<p>「Vimのらしさ」について. テキストオブジェクトが便利とかも勿論Vimの強みで「らしさ」の1つ.
でも, それだけではなく Vimを使うならIDEとは違い複数の言語をやって視野を広げることができることも1つのメリット.
これは逆に言えば多種多様なバックグラウンドを持つ人がVimを触っているということで, <a href="https://github.com/vim-jp/">vim-jp</a> や <a href="http://lingr.com/room/vim/">Lingrのvim部屋</a>, twitterで他の Vimmer の方々達と交流すると Vim を通していろいろな考え方に触れることができ, Vim の強みの一つに「vim-jp = ユーザー」 というのは本当にそうだなと感じました.</p>

<p>またVimをやる意義として, 得たものを還元してvim本体をよくしたり, 思いがけず他の人にとっても便利にできたり, マッチポンプ式に Vim を便利にできるという点もとても共感しました. この辺の話や後のujihisaさんの発表を聞いていると変にテンションがあがってしまい, エクストリーム資料追加を実行しました. (そしてLTが時間内に間に合わなくなりました.)</p>

<h3><a href="https://docs.google.com/presentation/d/1u5A7F3Kd4XwJlIUQZAVmrwWfLcoLf9NURtqAEafi_oo/edit#slide=id.p">PM2</a> (<a href="https://twitter.com/ujm">@ujm</a> さん)</h3>

<p>Process Manager 2 の話. 個人的には以前 cmigemo のプロセスを Process Manager で使いまわそうと現在のPMは使ってみたことがあるのですがうまくいかず断念していた(自分の使い方の問題っぽかった)という経緯あります. ですがPM2はかなり使いやすそうになっていそうだったので再挑戦したいと思いました.</p>

<p>後半全くVimと関係ない話(!?)だったり随所に挟まれる笑いどころがあって一番笑った発表でした. PM2だけでなく命名やタイムアウトの大事さも学べて「べんり」</p>

<h3><a href="https://speakerdeck.com/rhysd/vimconf-2014-f">f</a> (<a href="https://twitter.com/Linda_pp">@Linda_pp</a> さん)</h3>

<p>f の解説と f 拡張プラグインの解説でした. <a href="https://github.com/Lokaltog/vim-easymotion">Lokaltog/vim-easymotion</a> の便利機能も解説していただいてありがたみがありました.
clever-f はfで繰り返して移動できるというそれ自体の機能の便利さも勿論メリットなのですが, <code>;</code> と <code>,</code> キーという押しやすい2つものマッピングをフリーにして他のマッピングにできるという部分がとても嬉しい機能です. Lindan さんの場合は <code>,</code> を<code>&lt;Leader&gt;</code> に, <code>;</code> を <code>&lt;Plug&gt;(easymotion-s2)</code>にしており, このあたりをどのマップに置き換えるかは人それぞれの好みだとは思うのですが, かなり便利そうだと感じました.</p>

<p>スライドのfの説明の図がわかりやすかったり, 最後にはオチも付いているのでぜひスライドを見てみてください</p>

<h3><a href="https://docs.google.com/presentation/d/1zaPy82NJ6A3Iw1llKqU-lX88AJNt1EKy5O15nOp085c/edit#slide=id.p">Hey, Java! Vim is coming.</a> (<a href="https://twitter.com/kamichidu">@kamichidu</a> さん)</h3>

<p>Javaを書く機会がないですが, もしJavaを書くことになったら間違いなくVimで書きたい側の人間なので参考にしたい.
Lingrなどでkamichiduさんの活動をみてると, 他の人ではすぐにはできないようなことを平然とサクッとこなしている印象がいつもあるのでぜひ見習っていきたい&hellip;!</p>

<h3><a href="http://www.slideshare.net/cohama/auto-closing-parenthesis-vim-conf2014-41290298">auto closing parenthesis</a> (<a href="https://twitter.com/c0hama">@c0hama</a> さん)</h3>

<p>dot repeatable になっている <a href="https://github.com/cohama/lexima.vim">cohama/lexima.vim</a> の仕組みとか, あまり自動括弧入力系は使ったことがないのですが試してみたいという思いもあったので個人的に気になる発表の1つでした.</p>

<p>あとで懇親会やその後のカラオケなどなどで聞いた話によると,コマンドラインのマッピングなど想像以上にいろいろな機能を leximaでカスタマイズすることができるらしく汎用性の高さを感じたました. リピータブルな自動括弧入力ってだけでは全く無いようです. すごい.</p>

<h3><a href="http://www.slideshare.net/deris0126/vimconf4">怖くないマクロ入門</a> (<a href="https://twitter.com/deris0126">@deris0126</a> さん)</h3>

<p><code>:h q</code> のマクロ入門についての発表. 決して<a href="http://togetter.com/li/401111">マクロ漁船</a>のようなコワイ話ではなく初心者から使える解説でよかったと思います.
Vimを使っていて, そこに繰り返し操作があればマクロを使うチャンスなので使っていけるようになるとVimがもっと好きになること間違いなしです.
時間があれば実演とか, 途中でマクロ間違えた時や, マクロが少し間違っててた場合にちょっとだけ操作足したい/修正したいといった時にどうすればいいかといった対処法もあるとより便利さがあると思いました.</p>

<h3><a href="https://gist.github.com/thinca/2cf4ae0df88a99423c9d">Test for Vim script</a> (<a href="https://twitter.com/thinca">@thinca</a> さん)</h3>

<p>最近 <a href="https://github.com/thinca/vim-themis">thinca/vim-themis</a> をベンリに使わせて頂いているんですが, 改めて発表を聞いてもベンリすぎる&hellip;という印象でした.
themis便利なんですが自分が使いこなせてないのでテストもっとかけるようになって使いこなしたいという思いがあります.</p>

<h3><a href="http://www.slideshare.net/Shougo/lets-talk-about-neovim">Let&rsquo;s talk about neovim</a> (<a href="https://twitter.com/ShougoMatsu">(@ShougoMatsu</a> さん)</h3>

<p>暗黒美夢王の NeoVim についての発表. 全編英語で書かれておりNeoVim newsletterにも載るらしくVimConfの国際感がでてよさそう.
内容についてもさすがShougoさんと言うべきかエディタの未来とかOSSのforkの話とかも含めてとても考えられているなぁと感じました.</p>

<p>NeoVim のissueを動向を追うの, かなり大変なので殆ど追えてないのですが面白いことをやっているハズなのでもっと追っていきたい&hellip;</p>

<h3><a href="http://www.slideshare.net/supermomonga/super-cool-presentation-at-vimconf2014">かなりすごい発表（かなり）</a> (<a href="https://twitter.com/supermomonga">@supermomonga</a> さん)</h3>

<p>かなりすごくておもしろい発表でした(かなり). <a href="https://github.com/supermomonga/thingspast.vim">supermomonga/thingspast.vim</a> は統一的に使うようになるととても便利(とても)になりそうなので使ってみたい. Vim, しゃべれるらしいのでVimと会話したい(とても)</p>

<h3><a href="http://www.slideshare.net/pebble8888/using-xvim-with-macvim">XVim with MacVim and smartgrep</a> (<a href="https://twitter.com/pebble8888">@pebble8888</a> さん)</h3>

<p>とても申し訳ないんですがXcodeつかったことがなく, 自分の発表の直前だったので緊張していたこともあってあまりまともに話を聴けてなかった&hellip;悔やまれる&hellip;
単なる紹介とかでなくforkして改善したとかいう話をしていた気もするのでお話聞いてみればよかった. コメントを飛ばしてgrepできる, smartgrep も便利そう.</p>

<h3><a href="https://docs.google.com/presentation/d/1ie2VCSt9onXmoY3v_zxJdMjYJSbAelVR-QExdUQK-Tw/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.g4e7add63c_05">/-improved</a>  (<a href="https://twitter.com/haya14busa">@haya14busa</a>)</h3>

<p>自分の発表, 上述した.</p>

<h3><a href="https://speakerdeck.com/orgachem/zhuan-banuxian-falsezhang-vint">vim script初心者に使ってもらいたい、転ばぬ先の杖「Vint」</a> (<a href="https://twitter.com/orga_chem">@orga_chem</a> さん)</h3>

<p>個人的には今後の発展が期待できる &amp; 使いたいプラグイン No.1 でした.  スライドはオシャレでみやすいし, lint の仕組みも詳しく解説されていて勉強にもなりました. lint, 奥が深い&hellip;!</p>

<p>@orga_chem さんは発表者であると同時に会場の設営やUstream, 録画などの管理も行なって頂いており, 本当にお疲れ様でした. あと Vim の壁紙を使わせて頂いており改めて感謝できてよかった.</p>

<h3><a href="http://www.slideshare.net/raa0121/jenkinsvimenv-vim-vimconf2014">Jenkins + vimenv で 最新のVimを使おう！</a> (<a href="https://twitter.com/raa0121">@raa0121</a> さん)</h3>

<p>vimenv, anyenvに入って欲しい. git の log からパッチ番号取得していつも最近のVimをbuildできる. make test とかも行なって不具合検知ができてよさそうでした.</p>

<h2>懇親会, あとまとめとか</h2>

<p>去年の VimConf 2013 では発表なんてもってのほかで, Twitter や Lingr でみていた Vimmer のみなさんとお話すること自体殆ど出来なくて, 楽しかったけど悔いは残るものになってしまっていました. しかし今年の VimConf 2014 では発表もできて, 皆さんとリアルで対面してお話することができてとても楽しかったです. 感極まりました.</p>

<p>来年も是非参加したいし, もっと運営のお手伝いとかもできたらなーと思いますj</p>

<p>当日これなかったり, Ustream の配信も見ていなかった方は Togetter に 当日のTwitterの様子をまとめた(<a href="http://togetter.com/li/742963">VimConf2014まとめ - Togetterまとめ</a>)ので, 発表者のスライドや他の方の感想記事, これから<a href="http://vimconf.vim-jp.org/2014/">公式ページ</a>にリンクが貼られるであろう録画とかを見て, 興味がでたら是非是非来年のVimConfは参加してみると楽しいと思います!</p>

<p>それでは Happy Vim&#8217;ing ! ♥</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nagoya.vim 第2回に行ってきた]]></title>
    <link href="http://haya14busa.com/nagoya-vim-2/"/>
    <updated>2014-09-22T00:00:12+09:00</updated>
    <id>http://haya14busa.com/nagoya-vim-2</id>
    <content type="html"><![CDATA[<h2>Nagoya.vimに参戦!</h2>

<p>9/20(Sat)に開催された, <a href="http://nagoyavim.connpass.com/event/8299/">Nagoya.vim #2</a> に京都から参戦しに行きました!</p>

<p><img src="../images/post/haya14busa_nagoya_vim_sansen.png" alt="" /></p>

<h3>TL;DR</h3>

<p><a href="https://twitter.com/thinca">@thinca</a>さんと <a href="https://twitter.com/Linda_pp">@Linda_pp</a>さんと一緒にスマブラできて楽しかった</p>

<h2>Nagoya.vim #2</h2>

<ul>
<li><a href="http://nagoyavim.connpass.com/event/8299/">Nagoya.vim #2 - connpass</a></li>
</ul>


<p>いわゆるもくもく回として久々(らしい)に開催された Nagoya.vim に初参加してきました。 connpassページにある目的を振り返ってみると</p>

<blockquote><p>目的</p>

<p>Vim script でなんか書く
なごやの Vim 使いと交流する</p></blockquote>

<h3>1. Vim script でなんか書く -> ○</h3>

<p><a href="https://github.com/haya14busa/incsearch.vim">incsearch.vim</a> の進捗を出していました(進捗がでたとは言ってない).</p>

<p>主に内容としては <code>TODO:</code>, <code>FIXME:</code> がとっても増えたこと、テストをちょっとだけ拡充したことの2点です。 一応すでに実用段階にはあると思っているんですが、もう少しだけ足りない機能足して、テストちゃんとして早くバージョン1.0にしたさがあるのでまた頑張っておく予定です。</p>

<p>気になった方は是非使ってみてください&hellip;!</p>

<h3>2. なごやの Vim 使いと交流する -> ○()しかし◎の余地あり)</h3>

<p>東京勢の犬さん(<a href="https://twitter.com/Linda_pp">@Linda_pp</a>さん) と初対面出来たことを初めとして, TwitterやLingrのVim部屋, GitHubで見かける なごやの Vimmer の方々(<a href="http://nagoyavim.connpass.com/event/8299/participation/#participants">Nagoya.vim #2 - Attendee List - connpass</a>) と懇親会含めてお話できてとてもよかったです。 みなさんありがとうございました! またよろしくお願いします。</p>

<p>ただ、最初の自己紹介タイムだけでは自分の記憶力的にあまり覚えられなかったり、懇親会でもほとんど一緒に喋れなかった人がたくさんいたのでもうちょっと自分から話しかけて行きたい感が強まりました。 特にせっかく, なごやの関数型とか型界隈こわい勢 の方々がいらっしゃったのに、あんまり話さずじまいだったので、機会があれば関数型プログラミングとか教えてもらいたい(あわよくば)</p>

<p>ぜひ、又の機会によろしくお願いします.</p>

<h2>反省, あと進捗とか</h2>

<p>久々に時間取ってVim活できる機会だったので<a href="https://twitter.com/thinca">@thinca</a> さんのライブコーディングを見ながらも上述したような<a href="https://github.com/haya14busa/incsearch.vim">incsearch.vim</a> の改善を行なって, 最後に成果発表させていただきましたがあまり目に見える進捗ではなかったという反省が1点。そのあとに実は以前&hellip;.(ｺﾞﾎッ&hellip;) 作った Vim系オンライン読書会 の宣伝LTみたいなものをしたのですが, 全くしゃべる内容とか準備せずにスライドだけ作ってグダッた発表したという反省が2点目。 そして極めつけは最後に撤収しないといけない時間に始めてしまってそもそも時間を押してしまったという反省の1点を合わせ, だいたい計3点くらいの反省がありました。皆さん申し訳ありませんでした。</p>

<p>ということで(?) 一応発表に使ったスライドを少々手直して上げてました。</p>

<p><a href="http://haya14busa.github.io/slide/2014-09-20-nagoya-vim-2/#/">オンラインVim系読書会でVim力を高めよう</a></p>

<p>Nagoya.vimに参加した人も, 参加してないけどこの記事を読んで頂いてる人も, ぜひぜひvimrc読書会やvimプラグイン読書会に参加してくれると嬉しいです。</p>

<p>特にvimヘルプ読書会やると絶対ベンリだと思っているのでプッシュしてくれるかたを常に募集しています。よろしくお願いします。</p>

<h2>観光</h2>

<p>翌日の21(日)は名古屋観光しながら進捗を出したりスマブラをやったり, グルメ楽しんだりしました</p>

<p>一緒に観光した <a href="https://twitter.com/thinca">@thinca</a>さん, <a href="https://twitter.com/Linda_pp">@Linda_pp</a>さん, <a href="https://twitter.com/If_I_were_boxp">(@If_I_were_boxp</a> さん, 名古屋観光一緒にできて楽しかったです, ありがとうございました&hellip;! またぜひよろしくお願いします.</p>

<p><img src="../images/post/nagoya/2014-09-21%2011.45.47.jpg" alt="" />
<img src="../images/post/nagoya/2014-09-21%2014.44.26.jpg" alt="" />
<img src="../images/post/nagoya/2014-09-21%2015.03.44.jpg" alt="" />
<img src="../images/post/nagoya/2014-09-21%2015.12.12.jpg" alt="" />
<img src="../images/post/nagoya/2014-09-21%2018.49.17.jpg" alt="" /></p>

<p>ひつまぶし超ウマイ〜</p>
]]></content>
  </entry>
  
</feed>
