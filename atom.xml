<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[haya14busa]]></title>
  <link href="http://haya14busa.com/atom.xml" rel="self"/>
  <link href="http://haya14busa.com/"/>
  <updated>2016-05-31T01:24:15+09:00</updated>
  <id>http://haya14busa.com/</id>
  <author>
    <name><![CDATA[haya14busa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[6/2までKindle本50%オフセール!IT系の本で僕が欲しい本をまとめた!!!]]></title>
    <link href="http://haya14busa.com/amazon-kindle-sale-til-2016-06-02/"/>
    <updated>2016-05-30T22:41:43+09:00</updated>
    <id>http://haya14busa.com/amazon-kindle-sale-til-2016-06-02</id>
    <content type="html"><![CDATA[<p>2016年5月27日(金)00時00分～2016年6月2日(木)23時59分(日本時間)まで
<a href="http://www.amazon.co.jp/b/ref=s9_acss_bw_hsb_x_s1_s?_encoding=UTF8&amp;ie=UTF8&amp;node=4465565051&amp;pf_rd_m=AN1VRQENFRJN5&amp;pf_rd_s=merchandised-search-2&amp;pf_rd_r=1FY1PHQK4QC1KVKMZR6D&amp;pf_rd_t=101&amp;pf_rd_p=322009209&amp;pf_rd_i=2275256051">Kindle 50%OFF セール</a>
をやっているらしく，コンピュータ・IT系の本で僕が欲しい!!!よさそう!!!と思った本をまとめました．</p>

<p>先日 <a href="http://www.amazon.co.jp/gp/product/B00QJDQM9U/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=B00QJDQM9U&linkCode=as2&tag=haya14busa-22">Kindle Paperwhite Wi-Fi</a> を買った勢としてはこのKindle セールに乗るしかない!!!
積んでいた Soft skills の原著をKindle paperwhite で最近読んでますが，paperwhite かなり読みやすくて感動してます． いくつか固定レイアウト型の本がセールになってて， paperwhite で読むのはそこまでよさそうでもないけどそんなことは気にしない．</p>

<p>なおまとめてみると全部ポイント還元ではなく50%OFFセール本でした． 基本的にここから集めました． <a href="http://www.amazon.co.jp/gp/search/ref=sr_pg_1?rh=n%3A2250738051%2Cn%3A%212275265051%2Cn%3A%212275277051%2Cn%3A4469648051%2Cn%3A2275256051%2Cn%3A2291657051&amp;bbn=4469648051&amp;ie=UTF8&amp;qid=1464614758&amp;lo=digital-text">Amazon.co.jp: コンピュータ・IT - Kindle本: Kindleストア</a></p>

<h2>かなり欲しい!!!というか多分買う本</h2>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00CY9256C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41oruV%2BaJIL._SL160_.jpg" alt="プログラミングコンテストチャレンジブック [第2版]　～問題解決のアルゴリズム活用力とコーディングテクニックを鍛える～" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00CY9256C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">プログラミングコンテストチャレンジブック [第2版]　～問題解決のアルゴリズム活用力とコーディングテクニックを鍛える～</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2012-01-28)<br />売り上げランキング: 1,619<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00CY9256C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>昔，図書館で借りてたけど途中で返しちゃった．プロコンでオススメの本といえば蟻本が必ず上がるし欲しい! プロコン最近やってないけど時間とってやりたい&hellip;</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B017X3D3GE/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51OBAUr%2BcpL._SL160_.jpg" alt="セキュリティコンテストチャレンジブック　CTFで学ぼう！情報を守るための戦い方" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B017X3D3GE/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">セキュリティコンテストチャレンジブック　CTFで学ぼう！情報を守るための戦い方</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2015-09-30)<br />売り上げランキング: 553<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B017X3D3GE/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>(途中までしか読めてないけど)蟻本よかったしセキュリティコンテスト版もよいでしょ．という気持ち．CTFどんなもんか気になる．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HR19TSO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/416JLYmhVvL._SL160_.jpg" alt="世界で闘うプログラミング力を鍛える150問　トップIT企業のプログラマになるための本" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HR19TSO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">世界で闘うプログラミング力を鍛える150問　トップIT企業のプログラマになるための本</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2012-11-13)<br />売り上げランキング: 476<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HR19TSO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>去年インターンの面接の対策として物理本を借りて読んだ．コーディング面接&hellip;?なにそれ&hellip;?という状態の自分にとってめっちゃよかった．読んだことあるけど手元にKindle本としてあってもよいかも．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00MN5AO7E/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51TtVaDHjeL._SL160_.jpg" alt="世界で闘うプロダクトマネジャーになるための本　トップIT企業のPMとして就職する方法" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00MN5AO7E/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">世界で闘うプロダクトマネジャーになるための本　トップIT企業のPMとして就職する方法</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2014-08-22)<br />売り上げランキング: 560<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00MN5AO7E/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>「世界で闘うプログラミング力を鍛える150問　トップIT企業のプログラマになるための本」がよくて，プロジェクトマネージャー版がでるとの噂を聞いて本屋でちらっと立ち読みした．
全然内容覚えてないけどよさそうな雰囲気だったので欲しい．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GSHI04M/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51cCs-aJ6xL._SL160_.jpg" alt="闘うプログラマー［新装版］　ビル・ゲイツの野望を担った男達" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GSHI04M/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">闘うプログラマー［新装版］　ビル・ゲイツの野望を担った男達</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2013-11-20)<br />売り上げランキング: 299<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GSHI04M/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>名著感．確かちょっと読んだことがあるのは情熱プログラマーで，闘うプログラマーの方は読んだことなかった．よさそうなので欲しい．情熱プログラマーはKindle版がそもそもなかった&hellip;<a href="http://www.amazon.co.jp/gp/product/B00AYQNR5U/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00AYQNR5U&amp;linkCode=as2&amp;tag=haya14busa-22">洋書版</a>ならあるけど&hellip;洋書版セールじゃないけどほしいな．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01AN97W08/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51f-xfTWkkL._SL160_.jpg" alt="レガシーコード改善ガイド" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01AN97W08/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">レガシーコード改善ガイド</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">翔泳社 (2016-01-15)<br />売り上げランキング: 264<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01AN97W08/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>聞いたことある名著感．レガシーコード改善したいし，今回のセールで一番欲しいかも知れない．(上記に挙げてる本はほとんど固定レイアウトだし&hellip;)
レガシーコード改善ガイドを読んで <a href="https://github.com/easymotion/vim-easymotion">vim-easymotion</a> といった割とレガシーなメンテしてるプロダクトをリファクタリングするゾ!!!という気持ち．</p>

<h2>買うか迷ってるけど欲しい!!!本</h2>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00U5MVXZO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51GbST65OIL._SL160_.jpg" alt="プログラミングコンテスト攻略のためのアルゴリズムとデータ構造" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00U5MVXZO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">プログラミングコンテスト攻略のためのアルゴリズムとデータ構造</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2015-01-30)<br />売り上げランキング: 383<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00U5MVXZO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>プロコンとかアルゴリズム本の文脈でたまに聞く．ちらっと本屋で立ち読みしたことがあった気がするけどよさそうだった．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00L7FYBMK/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51onMQNa9sL._SL160_.jpg" alt="オンラインジャッジではじめるC/C++プログラミング入門" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00L7FYBMK/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">オンラインジャッジではじめるC/C++プログラミング入門</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2014-06-28)<br />売り上げランキング: 6,224<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00L7FYBMK/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>C/C++わかってなくて，オンラインジャッジでやれるところがよさそう．C言語学んで Vim のコードベースにコントリビュートするゾ!!!という気持ち．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HK6ZU0W/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51pJqy%2BHgzL._SL160_.jpg" alt="TCP/IP の基礎" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HK6ZU0W/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">TCP/IP の基礎</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2011-02-23)<br />売り上げランキング: 18,345<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HK6ZU0W/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>TCP/IP，よくみる有名な本ではないけど，評価も高そうだし基礎として読みたい．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B017SH8GZ8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51QVdlOsTiL._SL160_.jpg" alt="徳丸浩のWebセキュリティ教室（日経BP Next ICT選書）" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B017SH8GZ8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">徳丸浩のWebセキュリティ教室（日経BP Next ICT選書）</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2015-11-10)<br />売り上げランキング: 86<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B017SH8GZ8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>自分が書いたコードが知らないうちに脆弱性持ってたりすると怖いし，セキュリティ系は知識として知っておくと便利そう．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00FR78X64/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51bZA91ZWqL._SL160_.jpg" alt="世界でもっとも強力な9のアルゴリズム" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00FR78X64/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">世界でもっとも強力な9のアルゴリズム</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2013-10-10)<br />売り上げランキング: 246<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00FR78X64/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>聞いたことあるし読み物として面白そう?</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00SY2UKHY/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/5158xm%2BqWpL._SL160_.jpg" alt="Webエンジニアが知っておきたいインフラの基本" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00SY2UKHY/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Webエンジニアが知っておきたいインフラの基本</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">マイナビ出版 (2014-12-27)<br />売り上げランキング: 990<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00SY2UKHY/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>インフラ，わかってないので基本を知りたい!</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00UJ42A0K/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/61norbW9CfL._SL160_.jpg" alt="コンピュータの構成と設計 第5版 上" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00UJ42A0K/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">コンピュータの構成と設計 第5版 上</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2015-02-25)<br />売り上げランキング: 484<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00UJ42A0K/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>「パタ&amp;へネ」本．名著感．この辺の知識全然なさそうなので読むと便利そう．<a href="http://www.amazon.co.jp/gp/product/B00SF6JN7M/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00SF6JN7M&amp;linkCode=as2&amp;tag=haya14busa-22">「ヘネパタ」本</a>はセールじゃなかった&hellip;</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00UJ42A3C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/61BPSJwn03L._SL160_.jpg" alt="コンピュータの構成と設計 第5版 下" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00UJ42A3C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">コンピュータの構成と設計 第5版 下</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2015-02-25)<br />売り上げランキング: 475<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00UJ42A3C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G9QITO8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51yD4FCOXCL._SL160_.jpg" alt="OSの仕組みの絵本" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G9QITO8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">OSの仕組みの絵本</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">翔泳社 (2013-05-20)<br />売り上げランキング: 6,184<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G9QITO8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>OSの仕組みに関する知識も全然もってないのでよさそう．</p>

<h2>「なぜなのか」系</h2>

<p>コンピュータはなぜ動くのかは昔読んだことあってよかった．
なのでこの「なぜなのか」系統の本はよさそうというイメージ．
「なぜなのか」系は他にもセールだったけど気になるタイトルだけ抜粋．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GSHI02Y/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51lpK1KcNeL._SL160_.jpg" alt="コンピュータはなぜ動くのか　知っておきたいハードウエア＆ソフトウエアの基礎知識" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GSHI02Y/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">コンピュータはなぜ動くのか　知っておきたいハードウエア＆ソフトウエアの基礎知識</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2013-11-20)<br />売り上げランキング: 592<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GSHI02Y/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HRN7VK0/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51-RR1ZYgYL._SL160_.jpg" alt="プログラムはなぜ動くのか 第2版　　知っておきたいプログラムの基礎知識" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HRN7VK0/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">プログラムはなぜ動くのか 第2版　　知っておきたいプログラムの基礎知識</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2014-01-09)<br />売り上げランキング: 228<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00HRN7VK0/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00ISP0QB2/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/518CYcUVM1L._SL160_.jpg" alt="オブジェクト指向でなぜつくるのか 第2版" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00ISP0QB2/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">オブジェクト指向でなぜつくるのか 第2版</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2014-03-05)<br />売り上げランキング: 114<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00ISP0QB2/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IYE80X8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51ipTmzh7AL._SL160_.jpg" alt="情報はなぜビットなのか　知っておきたいコンピュータと情報処理の基礎知識" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IYE80X8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">情報はなぜビットなのか　知っておきたいコンピュータと情報処理の基礎知識</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2014-03-12)<br />売り上げランキング: 3,404<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IYE80X8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IYE7ROQ/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51FblFsvHnL._SL160_.jpg" alt="検索エンジンはなぜ見つけるのか　知っておきたいウェブ情報検索の基礎知識" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IYE7ROQ/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">検索エンジンはなぜ見つけるのか　知っておきたいウェブ情報検索の基礎知識</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2014-03-12)<br />売り上げランキング: 10,078<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IYE7ROQ/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00ISP0OM8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/510OA1JQZtL._SL160_.jpg" alt="システムはなぜダウンするのか" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00ISP0OM8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">システムはなぜダウンするのか</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2014-03-05)<br />売り上げランキング: 493<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00ISP0OM8/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<h2>ちょっと欲しい気もする</h2>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00I96CJWO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Dw%2BSbRbFL._SL160_.jpg" alt="ピープルウエア　第3版" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00I96CJWO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">ピープルウエア　第3版</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2014-02-05)<br />売り上げランキング: 339<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00I96CJWO/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>聴いたことあるし名著っぽいので</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IE3B522/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Jx3FqHtwL._SL160_.jpg" alt="テストから見えてくるグーグルのソフトウェア開発" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IE3B522/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">テストから見えてくるグーグルのソフトウェア開発</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2014-02-12)<br />売り上げランキング: 5,657<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00IE3B522/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>




<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GLFI5J6/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51jemnVucZL._SL160_.jpg" alt="Linuxサーバーセキュリティ徹底入門" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GLFI5J6/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Linuxサーバーセキュリティ徹底入門</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">翔泳社 (2013-11-12)<br />売り上げランキング: 4,856<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00GLFI5J6/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>サーバのセキュリティ，ちょっとくらい知っておいても損はなさそう．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00VHW3PKW/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51cVluyW7XL._SL160_.jpg" alt="Linuxコンテナー最新ツール Dockerを支える技術（日経BP Next ICT選書） 日経Linux技術解説書" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00VHW3PKW/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Linuxコンテナー最新ツール Dockerを支える技術（日経BP Next ICT選書） 日経Linux技術解説書</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2015-03-25)<br />売り上げランキング: 9,511<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00VHW3PKW/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>Docker わかってないので知っておきたい．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EH93MOQ/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51CW4gupfKL._SL160_.jpg" alt="ソーシャル・エンジニアリング" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EH93MOQ/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">ソーシャル・エンジニアリング</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経ＢＰ社 (2013-08-28)<br />売り上げランキング: 4,286<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00EH93MOQ/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>セキュリティ系は知っておいて損がなさそう．</p>

<h2>持ってるけどオススメ!本</h2>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01E5DYK1C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Sdan3jlwL._SL160_.jpg" alt="【電子合本版】Code Complete 第2版　完全なプログラミングを目指して" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01E5DYK1C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">【電子合本版】Code Complete 第2版　完全なプログラミングを目指して</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2016-04-14)<br />売り上げランキング: 658<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01E5DYK1C/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>持ってるけどまだ読んだとは言ってない! 読みたい!!!</p>

<h2>技術書・ビジネス書 大賞 部門</h2>

<p><a href="https://www.shoeisha.co.jp/campaign/award/result">ITエンジニアに読んでほしい！技術書・ビジネス書 大賞 2016</a> に含まれている本．Kindle セールになってるの2つしかなかったけど．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00W535LOU/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41NEFDfkNAL._SL160_.jpg" alt="HARD THINGS　答えがない難問と困難にきみはどう立ち向かうか" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00W535LOU/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">HARD THINGS　答えがない難問と困難にきみはどう立ち向かうか</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2015-04-17)<br />売り上げランキング: 14<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00W535LOU/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>おすすめされた． 2015年の電子書籍で一番売れたとか評判よさそうだし読み物として買いたい．</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B014UR9R3Y/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Z00YSPLcL._SL160_.jpg" alt="21世紀のビジネスにデザイン思考が必要な理由" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B014UR9R3Y/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">21世紀のビジネスにデザイン思考が必要な理由</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">クロスメディア・パブリッシング（インプレス） (2015-07-22)<br />売り上げランキング: 214<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B014UR9R3Y/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>55%なので6/2までのセール対象というわけではないかも．</p>

<h3>追記．記事書いた後に見つけた本</h3>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00F3UTIQY/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51EnYk6XEWL._SL160_.jpg" alt="リーン・スタートアップ　ムダのない起業プロセスでイノベーションを生みだす" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00F3UTIQY/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">リーン・スタートアップ　ムダのない起業プロセスでイノベーションを生みだす</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">日経BP社 (2013-09-11)<br />売り上げランキング: 343<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00F3UTIQY/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<h3>おわりに． テンプレ的な何か</h3>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B008H2USUK/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51Aw8JRwqdL._SL160_.jpg" alt="Amazonギフト券- Eメールタイプ - Amazon Kindle" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B008H2USUK/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazonギフト券- Eメールタイプ - Amazon Kindle</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 16.05.30</div></div><div class="amazlet-detail">Amazonギフト券 (2012-12-10)<br />売り上げランキング: 17<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B008H2USUK/haya14busa-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>


<p>Kindle 本は欲しいものリストでプレゼントできないらしいですが，Amazon ギフト券で<a href="https://twitter.com/haya14busa">僕</a> (hayabusa1419 at gmail.com) にプレゼントしてくれてもいいですよ???</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[revital.vim で vital.vim を爆速にしてお前らの Vim plugin を速くする]]></title>
    <link href="http://haya14busa.com/revital-vim-makes-vital-vim-a-lot-faster/"/>
    <updated>2016-03-23T04:45:43+09:00</updated>
    <id>http://haya14busa.com/revital-vim-makes-vital-vim-a-lot-faster</id>
    <content type="html"><![CDATA[<div class="github-card" data-github="haya14busa/revital.vim" data-width="500" data-height="150" data-theme="default"></div>


<p><a href="https://github.com/haya14busa/revital.vim">haya14busa/revital.vim</a></p>

<p>この度， revital.vim というプラグインを作って vital.vim のモジュールのローディングを爆速にしてお前らが使ってる Vim plugin を速くしました．</p>

<p>めでたい．</p>

<p>あと気づいたんですが今日は僕の誕生日のですね．これもまためでたい．</p>

<p>そして本当のところは vital.vim を使ってるプラグイン開発者が， revital.vim を使って初めて速くなるので実はまだ速くなってないものが多いです．
待ちきれない方はこの記事を読んで revital.vim の使い方を覚えてプルリクしていきましょう．
また爆速にはなったと思うんですが，体感には個人差・環境差があり，もともとほとんど速度が気にならない人も多いかと思うのでご注意ください．
Windows だか symlink だか virtualbox だか neovim だか何かはまだよくわかってませんが，特定の
環境が原因なのか vital.vim をヘビーに使用しているプラグインにまれによく「遅いぞ?」という issue が飛んできたりしていて，
そういった方には顕著に効果があると思います．(たぶん)</p>

<p>参考: <a href="https://github.com/easymotion/vim-easymotion/issues/242">遅いと</a>，<a href="https://github.com/easymotion/vim-easymotion/issues/136">言ってる</a>，<a href="https://github.com/haya14busa/incsearch.vim/issues/85">人たち</a>
(放置気味でｽｲﾏｾﾝ&hellip;いや workaround な修正なら前からできたんだけど手元でも再現しないものをその場対処はあんまりやりたくなくてやる気が&hellip;)</p>

<h2>vital.vim とは?</h2>

<p><a href="https://github.com/vim-jp/vital.vim">https://github.com/vim-jp/vital.vim</a></p>

<p>Vim script の最高のライブラリです．vital.vimのいいところとダメなところを個人的に上げるとこんな感じです．</p>

<h3>vital.vim のいいところ</h3>

<ol>
<li>組み込み式なので依存ライブラリがアップデートされても安心</li>
<li>プラグインのユーザはvital.vimを別途インストールする必要がない</li>
<li>めっちゃ気軽に外部ライブラリを作って使える</li>
<li>けっこういろんなものがそろっていて種類が豊富</li>
<li>日本人の凄腕 Vimmer 達が開発・メンテしているので品質も高い</li>
</ol>


<p><strong>とにかくベンリ</strong></p>

<h3>vital.vim のダメなところ</h3>

<ol>
<li>(ロードが) <strong>遅い</strong> (ケースがある)(基本的に気にならないけど)</li>
<li>ドキュメントがたぶん足りないので敷居が高い(ように見えるだけで使い方は簡単なんだけど&hellip;)</li>
<li>インストールやアップデートでハマることが多い印象</li>
</ol>


<p>他のところで，ファイルをコピーするのが無駄だとかキッチンシンクじゃない?みたいな
話を聞いたことがありますが，前者は全然気にする時代じゃないはずだし，後者は単なる勘違いで
vital.vim は使うライブラリのみ組み込めるので問題ないはずです．</p>

<p><a href="https://github.com/vim-jp/vital.vim">Githubのリポジトリ</a>では</p>

<blockquote><p>This is like a plugin which has both aspects of Bundler and jQuery at the same time.</p></blockquote>

<p>と(たぶん昔から)書いてあって，Bundler はともかく jQuery はちょっとあんまり良い印象ではないのかなぁと思う．
どちらかというと lodash とか Bundler に合わせるなら npm と言ってもいい気がする．</p>

<p>で，話が少々それていますが，今回 1つ目のモジュールの読み込みが<strong>遅い</strong>という部分を revital.vim で解決してみました．
2と3はドキュメントを拡充したり，<code>:Vitalizer</code>というコマンドをもうちょっとユーザフレンドリーにしてあげるといいのかなぁと個人的に思うのでなんとかしたいと思います．
(去年くらい前から思っているのでつらい)</p>

<p>とにかく <a href="https://github.com/vim-jp/vital.vim">vital.vim</a> 最高なので
<a href="https://github.com/haya14busa/revital.vim">revital.vim</a> と一緒に使っていきましょう．</p>

<h2>速くなったというならまずはベンチマークじゃん?(雑)</h2>

<h3>スクリプト</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>command<span class="p">!</span> <span class="p">-</span><span class="k">bar</span> TimerStart <span class="k">let</span> start_time <span class="p">=</span> reltime<span class="p">()</span>
</span><span class='line'>command<span class="p">!</span> <span class="p">-</span><span class="k">bar</span> TimerEnd echo reltimestr<span class="p">(</span>reltime<span class="p">(</span>start_time<span class="p">))</span> <span class="p">|</span> unlet start_time
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:_vital_of<span class="p">()</span> abort
</span><span class='line'>  <span class="k">let</span> V <span class="p">=</span> vital#of<span class="p">(</span><span class="s1">&#39;incsearch&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> V.<span class="k">load</span><span class="p">(</span><span class="s1">&#39;Data.List&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> V.unload<span class="p">()</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:_vital_incsearch_of<span class="p">()</span> abort
</span><span class='line'>  <span class="k">let</span> V <span class="p">=</span> vital#<span class="nb">incsearch</span>#of<span class="p">()</span>
</span><span class='line'>  <span class="k">call</span> V.<span class="k">load</span><span class="p">(</span><span class="s1">&#39;Data.List&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> V.unload<span class="p">()</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">s</span>:times <span class="p">=</span> <span class="m">100</span>
</span><span class='line'>
</span><span class='line'>TimerStart
</span><span class='line'><span class="k">for</span> _ <span class="k">in</span> range<span class="p">(</span><span class="k">s</span>:times<span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:_vital_of<span class="p">()</span>
</span><span class='line'><span class="k">endfor</span>
</span><span class='line'>TimerEnd
</span><span class='line'><span class="c">&quot; =&gt; 1.565324</span>
</span><span class='line'>
</span><span class='line'>TimerStart
</span><span class='line'><span class="k">for</span> _ <span class="k">in</span> range<span class="p">(</span><span class="k">s</span>:times<span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> <span class="k">s</span>:_vital_incsearch_of<span class="p">()</span>
</span><span class='line'><span class="k">endfor</span>
</span><span class='line'>TimerEnd
</span><span class='line'><span class="c">&quot; =&gt; 0.028437</span>
</span></code></pre></td></tr></table></div></figure>


<h4>結果: vital#of() と V.import(&lsquo;Data.List&rsquo;) 相当を100回回したベンチマーク</h4>

<table>
<thead>
<tr>
<th>vital.vim (x 100) </th>
<th> revital.vim (x 100)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.565324 sec </td>
<td> <strong>0.028437 sec</strong></td>
</tr>
</tbody>
</table>


<p>ref: <a href="https://github.com/haya14busa/incsearch.vim/pull/112#issue-142680963">https://github.com/haya14busa/incsearch.vim/pull/112#issue-142680963</a></p>

<p><strong>速くなってますね!!!</strong></p>

<p>(まぁ僕の環境ではもともと1回分にすると0.01秒くらいで全然遅いと感じたことなかったのですが)</p>

<p>上記のベンチマークは <a href="https://github.com/haya14busa/incsearch.vim">https://github.com/haya14busa/incsearch.vim</a> のコードで回しましたが，<a href="https://github.com/easymotion/vim-easymotion">https://github.com/easymotion/vim-easymotion</a> や 手元でテスト用に作った全部のvital モジュールをインストールしたプラグインでも同じような結果になりました．</p>

<h2>revital.vim の使い方</h2>

<p>さぁこれだけ速くなってるならvital.vimを既に使ってる人なんかは特に revital.vim を使ってみたくなりましたよね?
使い方は簡単です．</p>

<h3>わかってる人向けの簡単説明</h3>

<ol>
<li>vital.vim で :Vitalize しておく</li>
<li>revital.vim の :Revitalize コマンドを実行</li>
<li><code>vital#of('{plugin-name}')</code> の変わりに <code>vital#{plugin-name}#of()</code>を使う．</li>
</ol>


<p>これだけです．インターフェースは vital.vim をそのまま使う場合とほとんど変わりません．</p>

<h3>ちょっと丁寧な説明</h3>

<h4>a) モジュールをインストール</h4>

<p><code>{pluginname}</code> をあなたかが開発しているプラグインの名前に置き換えましょう．</p>

<ol>
<li><code>:cd /path/to/your/plugin</code> プラグインのディレクトリに移動．もちろん shell で移動してから Vim を起動するとかコマンドで指定してもOK.</li>
<li><code>:Vitalize --name={pluginname} . +Data.List</code> <code>Data.List</code> モジュールを組み込んでみる</li>
<li>※  <code>--name</code>には<code>.</code>や<code>-</code>が使えないので適宜<code>vim-</code>とか<code>.vim</code>とかいらない部分は削る．</li>
<li><code>:Revitalize .</code> Revitalize 実行!</li>
</ol>


<h4>b) モジュールの使い方</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">s</span>:V <span class="p">=</span> vital#{pluginname}#of<span class="p">()</span>
</span><span class='line'><span class="k">let</span> <span class="k">s</span>:List <span class="p">=</span> <span class="k">s</span>:V.import<span class="p">(</span><span class="s1">&#39;Data.List&#39;</span><span class="p">)</span>
</span><span class='line'>echo <span class="k">s</span>:List.uniq<span class="p">(</span>[<span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span>]<span class="p">)</span>
</span><span class='line'><span class="c">&quot; =&gt; [1, 2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>簡単で vital.vim のみで使うケースとほとんど変わりません．</p>

<h4>c) モジュールのアップデート</h4>

<p><code>:Vitalize</code>でアップデートしたあとにもう一度 <code>:Revitalize</code> する必要があります．</p>

<ol>
<li><code>:cd /path/to/your/plugin</code> プラグインのディレクトリに移動．</li>
<li><code>:Vitalize .</code> アップデートするときはこれだけ．</li>
<li><code>:Revitalize .</code> Revitalize 実行</li>
</ol>


<h2>どうして revitalize.vim は速いのか?</h2>

<p>vital.vim はモジュールをロードする際(<code>s:V.import('Module.Name')</code>)に</p>

<ol>
<li>モジュール名から目的のファイルを探す</li>
<li>そのファイルからモジュール用のオブジェクトを作る</li>
</ol>


<p>というざっくり2段階が必要です．このうち1などはsimlinkをたどるといった関数が遅
いせいで結構な時間が環境によってはかかっていますし，2はそこまで遅くはない気もし
ますがいろいろ内部でやっています．(ちゃんとprofileはしてない．)
vital.vim の組み込みライブラリであるという性質上，普通にやるなら上記の段階が必要です．
また歴史的経緯も含まれているかもしれないですが上記の2段階の前にはライブラリを
ロードするためのローダーを同じような手順で作成する必要があります(<code>vital#of({plugin-name})</code>)．</p>

<p>速くする方法はないものかなぁと考えると1つ思い当たります．</p>

<p>モジュール名から目的のファイルを Vim script で素早く探すのにはなかなか骨が折れますが，Vim script には
autoload function という機能があり，autoload 関数をいい感じに定義しいい感じに呼
べば(<code>path#to#module#file</code>)，対応したファイルを勝手に内部で見つけてきて関数を呼
んでくれるという仕組みが存在します．Vim script で頑張るよりも組み込み機能を
使ったほうが速いはずです!! autoload 関数使いたい!!!</p>

<p>しかし，autoload 関数をいい感じに定義する際にはファイルのパス情報が必要になります．
ここでvital.vim は別のプラグインに組み込まれることが前提のライブラリなのでパスが定まっていません．
よって autoload はそのままでは使えませんでした&hellip;</p>

<p>うーん．困ったな&hellip;</p>

<p>でもでも，よくよく考えてみると最初からパスが定まっていなくても，モジュールをプラグインに組み込んだあとのパスは決定しています．
つまり，<code>:Vitalize</code> でモジュールをプラグインに組み込んだあとにモジュールのファイルに適切な autoload 関数を追加してしまえばいいのです．</p>

<p>もうわかったでしょか?</p>

<p>revital.vim が提供する <code>:Revitalize</code> コマンドは組み込んだモジュールのファイルに
適切なautoload関数を追加し， <code>s:V.import('Module.Name')</code> の内部では追加した autoload 関数を呼ぶようになっているのです．
また，autoload関数を追加する際にモジュールのオブジェクトの雛形となるようなオブジェクトをついでに生成してやっているので，
そのオブジェクトの生成するプロセス分も速くなっています．</p>

<p>最後にファイルを探したりといろいろと大変な <code>vital#of({plugin-name})</code> の代わりに
直接 vital のローダーオブジェクトを返す <code>vital#{plugin-name}#of()</code> を作って revital.vim の仕事は終了です．</p>

<p>モジュールのファイルに autoload 関数を追加するというちょっと刺激的なハックをすることによって vital.vim のロードを爆速化することができました．
ただモジュールのファイルといっても組み込んだあとのモジュールのファイルを書き換
えるだけなのでオリジナルのファイルは書き換えないし，これくらいのハックは別に問題ないかなと思います．
一応vitalモジュールのファイルの途中で <code>:finish</code> されると使えなくなるという問題がありますが，まずそんなケースはないでしょう．</p>

<h2>本家に入れたいような気もするけど要相談?</h2>

<p>確実に速くなるし，本家ではテストされてないような部分もテストしているので，少々
ランニングして安定すれば本家にオプションかなにかで入れてもいいんじゃないかなぁと思います．</p>

<p>しかし，一応入り口のインターフェースが変わることと，ちょっと実装にハック感があ
ること，ドラスティックな変更なのでいろいろ待つよりもまずは実装して見てみるということで
revital.vim を作ってみました．</p>

<p>後方互換性は崩さないような仕組みになっているので時が来たらvital.vim 本家に同じ機能が実装されるとよさがありますね．</p>

<h2>おわり</h2>

<p><a href="https://github.com/haya14busa/revital.vim">haya14busa/revital.vim</a> で
vital.vim が爆速になるので vital.vim を使っている Vim プラグイン開発者各位や
これから <a href="https://github.com/vim-jp/vital.vim">vital.vim</a> を使ってみたいという
各位は是非お試しください!</p>

<p><strong>「爆ぜろリアル！ 弾けろシナプス！ Rev!talize Th!s World！」</strong></p>

<script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimのカーソル移動はもっともっと爆速になる! Vim-EasyMotion v3.0 をリリースしました]]></title>
    <link href="http://haya14busa.com/vim-easymotion-ver-3-dot-0-overwin-motions/"/>
    <updated>2016-01-19T03:14:43+09:00</updated>
    <id>http://haya14busa.com/vim-easymotion-ver-3-dot-0-overwin-motions</id>
    <content type="html"><![CDATA[<p>Vim-EasyMotion でウィンドウをまたいだ移動ができるようになりました!!!</p>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/2753bd4dd1dfdf5962dbdbffabf24244e4e14243/easymotion/overwin-motions.gif" alt="" /></p>

<div class="github-card" data-github="easymotion/vim-easymotion" data-width="500" data-height="150" data-theme="default"></div>


<p><a href="https://github.com/easymotion/vim-easymotion">easymotion/vim-easymotion</a></p>

<h3>過去の関連記事</h3>

<ul>
<li><a href="http://haya14busa.com/vim-lazymotion-on-speed/">Vim-Easymotionを拡張してカーソルを縦横無尽に楽々移動する - haya14busa</a>

<ul>
<li>まだ fork でやってた時代の記事． 自分のVim歴より始まりが古く，1年続いたという伝説のVim Advent Calendar 2012の363日目の記事で懐かしい．</li>
</ul>
</li>
<li><a href="http://haya14busa.com/mastering-vim-easymotion/">Vim-EasyMotionでカーソル移動を爆速にして生産性をもっと向上させる - haya14busa</a>

<ul>
<li>easymotionのメンテナになってからの便利機能まとめ的な記事.</li>
</ul>
</li>
</ul>


<p>そして今回の記事はvim-easymotionのリポジトリがorganization持ちになって<del>久々に</del>便利機能追加したという記事になります．</p>

<p>vim-easymotionとはVimのカーソル移動をブラウザでいうHit-A-Hint機能のように行うカーソル移動改善系プラグインです．
よく知らないよ〜という方は<a href="https://github.com/easymotion/vim-easymotion">README</a>眺めたり， 過去記事 (<a href="http://haya14busa.com/mastering-vim-easymotion/">Vim-EasyMotionでカーソル移動を爆速にして生産性をもっと向上させる - haya14busa</a> ) をさらっと読むと分かるかと思います．過去記事は<code>n-key Find Motion</code>の節以外はだいたい現役で使えると思います．</p>

<h2>vim-easymotion v3.0</h2>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/2753bd4dd1dfdf5962dbdbffabf24244e4e14243/easymotion/overwin-motions.gif" alt="" /></p>

<p><a href="https://github.com/easymotion/vim-easymotion/releases/tag/v3.0.0">Release EasyMotion now supports moving cursor over/across windows · easymotion/vim-easymotion</a></p>

<p>vim-easymotionではこれまでカーソルと同一ウィンドウ内にしか移動できなかったのですが，v3.0でとうとう他のウィンドウにも移動できるようになりました! めでたい．
実はv3.0 で追加するメイン機能はこれだけなんですが，個人的にかなり気に入ってしまい，「これはメジャーバージョンアップするしかない」と思い勢いだけでバージョンあげています．
他にはバグフィックスとか細かい修正で，とくに後方互換性は壊してないはずなので気軽にアップデートできると思います．</p>

<h3>追加したマッピング</h3>

<table>
<thead>
<tr>
<th> mapping </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;Plug&gt;(easymotion-overwin-f){char}</code> </td>
<td> <code>{char}</code> にマッチする位置を対象として移動 </td>
</tr>
<tr>
<td><code>&lt;Plug&gt;(easymotion-overwin-f2){char}{char}</code> </td>
<td> <code>{char}{char}</code> にマッチする位置を対象として移動 </td>
</tr>
<tr>
<td><code>&lt;Plug&gt;(easymotion-overwin-line)</code> </td>
<td> 行を対象として移動 </td>
</tr>
<tr>
<td><code>&lt;Plug&gt;(easymotion-overwin-w)</code> </td>
<td> 単語の先頭を対象として移動 </td>
</tr>
</tbody>
</table>


<h4>マッピング例</h4>

<p>ヴィジュアルモードやオペレータ待機モードで他のウィンドウに移動するというのは意味をなさないので，
他のウィンドウに移動する overwin モーションは <code>Normal</code> モードのマッピングのみ提供しています．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; &lt;Leader&gt;f{char} to move to {char}</span>
</span><span class='line'>map  <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">f</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">bd</span><span class="p">-</span><span class="k">f</span><span class="p">)</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">f</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>overwin<span class="p">-</span><span class="k">f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; s{char}{char} to move to {char}{char}</span>
</span><span class='line'>nmap <span class="k">s</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>overwin<span class="p">-</span>f2<span class="p">)</span>
</span><span class='line'>vmap <span class="k">s</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">bd</span><span class="p">-</span>f2<span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Move to line</span>
</span><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span>L <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">bd</span><span class="p">-</span>jk<span class="p">)</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>L <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>overwin<span class="p">-</span>line<span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Move to word</span>
</span><span class='line'>map  <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">w</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">bd</span><span class="p">-</span><span class="k">w</span><span class="p">)</span>
</span><span class='line'>nmap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">w</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>overwin<span class="p">-</span><span class="k">w</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>EasyMotion触ったことなくてミニマムに始めたい場合は上記設定から気に入ったもの +
以下の設定でデフォルトマッピングをオフにするとよいかなと思います．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:EasyMotion_do_mapping <span class="p">=</span> <span class="m">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>もしひとつだけおすすめするなら<code>nmap s &lt;Plug&gt;(easymotion-overwin-f2)</code>がオススメです．
このマッピングだと画面上の見えているところへならどこへでも <code>s{char}{char}{hint}</code>の4 キーストロークで移動できます．
<code>&lt;Plug&gt;(easymotion-overwin-f)</code>や<code>&lt;Plug&gt;(easymotion-overwin-w)</code>だと候補が多すぎてヒントを2回以上打たないとダメなケースがよくあるのですが，
<code>{char}{char}</code>と2文字打つと候補が劇的に減ってヒントは大抵のケースで1文字入力するだけですみます．</p>

<h4>incsearch.vim との連携</h4>

<p>vim-easymotionには<code>&lt;Plug&gt;(easymotion-sn)</code>という <code>N</code> 文字入力してマッチした位置
を対象として移動するモーション，言わばeasymotionの検索(<code>/</code>)版マッピングを提供していたのですが，
今回，それのウィンドウ間移動できるマッピングは提供していません．</p>

<p>というのも，<code>&lt;Plug&gt;(easymotion-sn)</code>はVimデフォルトの検索との互換性が甘いところがあり，
<a href="http://haya14busa.com/incsearch-dot-vim-ver-2/">Vimの検索はもっともっと便利になる! incsearch.vim v2.0 をリリースしました - haya14busa</a>
の記事で紹介した incsearch.vim と vim-easymotion を連携させたほうが基本的に便利になっていて，
こちらを推奨したいなという訳です．</p>

<h4>必要なもの</h4>

<ul>
<li><a href="https://github.com/easymotion/vim-easymotion">easymotion/vim-easymotion</a></li>
<li><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></li>
<li><a href="https://github.com/haya14busa/incsearch-easymotion.vim">haya14busa/incsearch-easymotion.vim</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; You can use other keymappings like &lt;C-l&gt; instead of &lt;CR&gt; if you want to</span>
</span><span class='line'><span class="c">&quot; use these mappings as default search and somtimes want to move cursor with</span>
</span><span class='line'><span class="c">&quot; EasyMotion.</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:incsearch_config<span class="p">(</span>...<span class="p">)</span> abort
</span><span class='line'>  <span class="k">return</span> <span class="nb">incsearch</span>#util#deepextend<span class="p">(</span>deepcopy<span class="p">(</span>{
</span><span class='line'>  \   <span class="s1">&#39;modules&#39;</span>: [<span class="nb">incsearch</span>#config#easymotion#module<span class="p">(</span>{<span class="s1">&#39;overwin&#39;</span>: <span class="m">1</span>}<span class="p">)</span>]<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;keymap&#39;</span>: {
</span><span class='line'>  \     <span class="s2">&quot;\&lt;CR&gt;&quot;</span>: <span class="s1">&#39;&lt;Over&gt;(easymotion)&#39;</span>
</span><span class='line'>  \   }<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;is_expr&#39;</span>: <span class="m">0</span>
</span><span class='line'>  \ }<span class="p">),</span> <span class="k">get</span><span class="p">(</span><span class="k">a</span>:<span class="p">,</span> <span class="m">1</span><span class="p">,</span> {}<span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> /  <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>incsearch_config<span class="p">())</span>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> ?  <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>incsearch_config<span class="p">(</span>{<span class="s1">&#39;command&#39;</span>: <span class="s1">&#39;?&#39;</span>}<span class="p">))</span>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> <span class="k">g</span>/ <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>incsearch_config<span class="p">(</span>{<span class="s1">&#39;is_stay&#39;</span>: <span class="m">1</span>}<span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>&lt;CR&gt;</code> を <code>&lt;C-l&gt;</code>とかにすることで普段は普通の incsearch.vim, <code>&lt;C-l&gt;</code>押した時に
easymotion発動といったことができたりします．僕はそういう設定にしていて，便利につかえてます．</p>

<h2>おまけ</h2>

<h3>incsearch-migemo 連携</h3>

<p><a href="https://github.com/haya14busa/incsearch-migemo.vim">haya14busa/incsearch-migemo.vim</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:config_migemo<span class="p">(</span>...<span class="p">)</span> abort
</span><span class='line'>  <span class="k">return</span> extend<span class="p">(</span>copy<span class="p">(</span>{
</span><span class='line'>  \   <span class="s1">&#39;converters&#39;</span>: [
</span><span class='line'>  \     <span class="nb">incsearch</span>#config#migemo#converter<span class="p">(),</span>
</span><span class='line'>  \   ]<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;modules&#39;</span>: [<span class="nb">incsearch</span>#config#easymotion#module<span class="p">(</span>{<span class="s1">&#39;overwin&#39;</span>: <span class="m">1</span>}<span class="p">)</span>]<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;keymap&#39;</span>: {<span class="s2">&quot;\&lt;C-l&gt;&quot;</span>: <span class="s1">&#39;&lt;Over&gt;(easymotion)&#39;</span>}<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;is_expr&#39;</span>: <span class="m">0</span><span class="p">,</span>
</span><span class='line'>  \ }<span class="p">),</span> <span class="k">get</span><span class="p">(</span><span class="k">a</span>:<span class="p">,</span> <span class="m">1</span><span class="p">,</span> {}<span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> <span class="k">m</span>/ <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>config_migemo<span class="p">())</span>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> <span class="k">m</span>? <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>config_migemo<span class="p">(</span>{<span class="s1">&#39;command&#39;</span>: <span class="s1">&#39;?&#39;</span>}<span class="p">))</span>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> mg/ <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>config_migemo<span class="p">(</span>{<span class="s1">&#39;is_stay&#39;</span>: <span class="m">1</span>}<span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>fuzzy search で easymotion</h3>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/eab1d12a8bd322223d551956a4fd8a21d5c4bfe9/easymotion/fuzzy-incsearch-easymotion.gif" alt="" /></p>

<ul>
<li><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></li>
<li><a href="https://github.com/haya14busa/incsearch-fuzzy.vim">haya14busa/incsearch-fuzzy.vim</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:config_easyfuzzymotion<span class="p">(</span>...<span class="p">)</span> abort
</span><span class='line'>  <span class="k">return</span> extend<span class="p">(</span>copy<span class="p">(</span>{
</span><span class='line'>  \   <span class="s1">&#39;converters&#39;</span>: [<span class="nb">incsearch</span>#config#fuzzyword#converter<span class="p">()</span>]<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;modules&#39;</span>: [<span class="nb">incsearch</span>#config#easymotion#module<span class="p">(</span>{<span class="s1">&#39;overwin&#39;</span>: <span class="m">1</span>}<span class="p">)</span>]<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;keymap&#39;</span>: {<span class="s2">&quot;\&lt;CR&gt;&quot;</span>: <span class="s1">&#39;&lt;Over&gt;(easymotion)&#39;</span>}<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;is_expr&#39;</span>: <span class="m">0</span><span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;is_stay&#39;</span>: <span class="m">1</span>
</span><span class='line'>  \ }<span class="p">),</span> <span class="k">get</span><span class="p">(</span><span class="k">a</span>:<span class="p">,</span> <span class="m">1</span><span class="p">,</span> {}<span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> <span class="p">&lt;</span>Space<span class="p">&gt;</span>/ <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>config_easyfuzzymotion<span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h2>実装とか背景の話</h2>

<p>実はこのウィンドウをまたいだ移動についてはvim-easymotionの開発を引き継いだころからずっと欲しいなぁ〜やりたいな〜と思っていた待望の機能でした．
emacs版easymotionである <a href="https://github.com/winterTTr/ace-jump-mode">winterTTr/ace-jump-mode</a> や atomのsmalls (<a href="http://qiita.com/t9md/items/bca96d45af1a5244b5d1">ATOM - smalls つくった - Qiita</a>)ではラベルジャンプでウィンドウ移動ができています．</p>

<p>どの拡張も，もともとはEasyMotion にインスパイアされて作ったもので，他の機能はともかく少なくともウィンドウ間をまたげるという一点ではvim-easymotionを上回っていました．
ではなぜ，vim-easymotionでもやりたいなぁと思っていたのに，これまで実装できていなかったかというと，
これは<strong>「vim-easymotionのコードがちょっと闇でつらかった&hellip;」</strong>というわけではなく Vim の機能でやるのがきつかったことに起因します．
Vimにはオーバーレイで文字を表示するといった機能がないのでvim-easymotionでは一旦バッファの文字を書き換えて戻すという実装になっていました．
この実装だと同じバッファを別ウィンドウに表示している場合にラベルがバッティングしてしまいます．</p>

<p>では今回どうしたかというと Vim の conceal 機能, <a href="http://vim-jp.org/vimdoc-ja/syntax.html#%3Asyn-cchar">:h syn-cchar</a> を使っています．
この機能を使えば直接バッファを書き換えずにラベルを表示できるので，同じバッファが別ウィンドウにあっても違ったラベルを表示することが可能です．</p>

<h3>Conceal の syn-cchar つらい問題</h3>

<p>しかし，このconcealでラベルを表示するというアイデア自体は以前からあって <a href="https://github.com/justinmk/vim-sneak">justinmk/vim-sneak</a>
がこのスタイルで表示しています(カーソルと同一ウィンドウだけですが)．
前からアイデアを知っていたのにやれなかったのは，決して<strong>「vim-easymotionのコードがちょっと闇でつらかった&hellip;」</strong>というわけではなく
conceal機能はかなり制限があってやりたいことができなさそうだなぁと長らく思っていたからです．
というも，syn-ccharでは1文字しか表示できないし，空白行といった無の部分に文字を表示することができません．
この制限からラベルが2文字以上の時でも1文字しか表示できなかったり，
Tab文字や文字幅が2以上のマルチバイトの文字をラベルに置き換えるとラベル表示時に表示にズレが生じてしまいます．</p>

<h3>結局<strong>「vim-easymotionのコードがちょっと闇でつらかった&hellip;」</strong></h3>

<p>じゃあどうすればいいかというと，ここまでの話・実装を組み合わせると実は答えは出ています．
ラベルを表示するさいに対象が空白行や行末，マルチバイト文字であれば一旦スペースを追加またはスペースに置き換えてしまう前処理をすればOKです．
そうすれば空白行や行末を対象とできるし，2文字のラベルも表示できるし，ラベルを表示した際に表示のズレが生じません!
やったぜこれで理論上実装可能じゃん!</p>

<p>なぜこれに気づくのに時間がかかったのかというと結局<strong>「vim-easymotionのコードがちょっと闇でつらかった&hellip;」</strong>
のでしばらくeasymotionにまともに向き合ってなかったからでした．
vim-easymotionはforkする前のもともとコードがそんなに綺麗じゃなかった上に，
プログラミング自体ほとんど初心者だった僕が以前に便利な機能を追加したりVimとの互換性を保ったりすることと引き換えに，
コードは比較的カオス状態になっていました．
僕の実装力ではこれを互換性を保った状態でリファクタして他のウィンドウへ移動する抜本的な機能改善なんて無理や&hellip;
と内心思っていましたし，実際無理感あります．
こういった理由でウィンドウ間移動という待望の機能は2年間ほど待望の機能であり続けました．</p>

<h3>1から作って互換性意識すればいいんじゃん?</h3>

<p>互換性保ちながらリファクタしていくのがつらいなら1から作って，インターフェースを既存のeasymotionと合わせればいいんじゃないか?
と気付き，今回の機能は実装されました．</p>

<p>「パンがなければお菓子を食べればいいじゃない」に通ずるものがあります(ない)</p>

<p>これに気づいてやってみると，一旦動くところまで実装する程度なら1日程度で待望の機能が実装できました．
やってみるものですね．</p>

<p>しかし，vim-easymotionを活発に開発していた2年前の僕にはできなかったかなぁと感じていて，
これまでに incsearch.vim といった他のプラグインを作った知見や，他の Vim プラグイン開発者から得た知見，
そして2年間でちょっと基本的な開発力があがったおかげで開発できたなぁと思います．
みなさまありがとうございました．そして自分，まだまだですがちょっと頑張ったなって思いました．</p>

<p>開発の実装や背景の話と2年前に熱を入れて取り組んでいたvim-easymotionに今の自分が取り組んでみたらちょっと感慨深かったなという話でした．</p>

<h2>おわりに</h2>

<p><a href="https://github.com/easymotion/vim-easymotion">vim-easymotion</a>, また一段と便利になったので是非使ってみてください!</p>

<p>僕はもうこの機能なしでは生きていけなさそうです．</p>

<p><strong>あぁ〜カーソルがぴょんぴょんするんじゃぁ〜</strong></p>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">vim-easymotion, あぁ〜カーソルがぴょんぴょんするんじゃぁ〜 って感じだ</p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/687679866175500288">January 14, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<script src="http://lab.lepture.com/github-cards/widget.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年夏，はてなインターンでMackerelをとにかく便利にして優勝してきた]]></title>
    <link href="http://haya14busa.com/hatena-intern-2015/"/>
    <updated>2015-12-31T22:15:00+09:00</updated>
    <id>http://haya14busa.com/hatena-intern-2015</id>
    <content type="html"><![CDATA[<p>インターン終わったときに書きたかったのですが，バタバタしていたのと，イカ
(<a href="https://www.nintendo.co.jp/wiiu/agmj/">Splatoon</a>)という麻薬に犯されたので2015
年の振り返りとして書いています． 乗り遅れた感しかないけど記録として残しておきま
す！
2015年全体の振り返りはこちら -> <a href="http://haya14busa.com/look-back-2015/">はてな，Googleインターン行ってイカやりすぎたイカVimmerの2015年の振り返り - haya14busa</a></p>

<p>今年の夏はどこかインターン行きたいなぁ〜，最高の夏を過ごしたいなぁ〜と思っていました．
そんな時に <a href="http://hatenacorp.jp/recruit/intern2015/">はてなサマーインターン2015</a> 情報，
特に今年は<a href="http://developer.hatenastaff.com/entry/2015/04/08/124053"> <strong>Scala</strong> や swift が書けるコースもある</a>
という話を聞いてこれは行きたい! と応募しました．
その結果幸運なことに選考に受かったので8月10日から9月4日まで最高の夏を過ごしにはてなインターンに行ってきました．</p>

<h3>はてなインターン TL;DR</h3>

<ul>
<li><del>噂の(?)今年のインターン生の Emacs 率が0だった</del>

<ul>
<li><blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr">【速報】今年のはてなインターン参加者のEmacs率はなんと 0 とのこと</p>&mdash; Shinji Tanaka (@stanaka) <a href="https://twitter.com/stanaka/status/630582977349595136">August 10, 2015</a></blockquote></li>
</ul>
</li>
<li>僕は言語がScalaのMackerelコースで， <a href="http://blog.hatena.ne.jp/tyage/">id:tyage</a> くんさんと一緒に Mackerel を便利にして優勝してきましたっ! めでたいっ 🎉🎉🎉</li>
<li>はてなインターンで優秀なはてなの社員さんや他のインターン生の仲間と開発できたのは最高の体験でした．もっかい体験したい．</li>
</ul>


<h3>参考情報</h3>

<ul>
<li>公式サイト <a href="http://hatenacorp.jp/recruit/intern2015/">はてなサマーインターン2015</a></li>
<li>公式レポート <a href="http://hatenacorp.jp/intern2015/">はてなサマーインターン2015 レポートサイト</a></li>
<li>GitHub

<ul>
<li>最高の教科書 <a href="https://github.com/hatena/Hatena-Textbook">hatena/Hatena-Textbook</a></li>
<li>最高のサンプルアプリ <a href="https://github.com/hatena/scala-Intern-Bookmark">hatena/scala-Intern-Bookmark</a></li>
<li>最高の事前課題 <a href="https://github.com/hatena/Hatena-Intern-Exercise2015">hatena/Hatena-Intern-Exercise2015</a></li>
<li>僕の事前課題回答 <a href="https://github.com/haya14busa/Hatena-Intern-Exercise2015">haya14busa/Hatena-Intern-Exercise2015</a></li>
</ul>
</li>
</ul>


<h3>はてなインターン応募と参加</h3>

<p>一昨年の2013年夏にインターン探していたときも，はてなインターン卒業生のブログな
どを読んで， はてなインターンよさそうだなぁ〜と思ってました．その時は能力たりな
さすぎて無理だろう&hellip;<del>というのと perl かぁ〜</del> という思いで応募すら出来ていま
せんでした．</p>

<p>今年は言語が Scala (!)のコースができていたこともあったこと，一昨年よりはアルバイトでScala
書いたりとある程度経験値積んでいて，Vim でよければいくつかアピールできるようなものもあったので
えいやっと応募しました．はてなインターンの選考では基本的にポートフォリオを提出するのみ
だったのですが，ポートフォリオは8割 Vim でした．評価されてよかった&hellip;</p>

<p>ところで実際にインターンに参加してから思ったことは，もし仮に書く言語が perl
だったとしても来たほうが良かったなということでした． もし来年度以降のインターン
に応募しようと思っているけど perl がちょっとネック&hellip;  くらいで参加を迷ってるな
ら勢いで参加申し込んでもよいと思います．</p>

<p>結局僕は perl 1行も書きませんでしたが．Scala最高!!!(コンパイル爆速になればより&hellip;)</p>

<h3>事前課題がScalaを基礎から勉強するのに最高</h3>

<p>さて，晴れてはてなインターンに行けることになったらインターンまでの学習としてちょっとした事前課題が課されます．</p>

<ul>
<li><a href="https://github.com/hatena/Hatena-Intern-Exercise2015">hatena/Hatena-Intern-Exercise2015</a></li>
<li>僕の解答: <a href="https://github.com/haya14busa/Hatena-Intern-Exercise2015">haya14busa/Hatena-Intern-Exercise2015</a></li>
</ul>


<p>この事前課題では perl か scala, それに JavaScript でいくつか課題が与えられ，問題を解いてテストを通していく形式でした．
事前課題は全体，課題ごとに課題のねらいが書いてあり，言語の基本を学ぶのに最高だと思いました．</p>

<p><a href="https://github.com/hatena/Hatena-Intern-Exercise2015/tree/master/scala">Scala の課 題</a>
は 与えられたログ用に <a href="http://ltsv.org/">Labeled Tab-separated Values (LTSV)</a>
パーサを書くという課題だったのですが，言語の基本やテストの仕方，テストの追加の
仕方はもちろんのこと，問題の性質上 エラーハンドリングをどうするか，<code>Option</code>型を
使うか，<code>Either</code>型を使うか，パース失敗時に エラーの行を収集するために
<a href="https://github.com/scalaz/scalaz">scalaz</a> でいう <code>Validation</code> 型を使えばベンリ
なんじゃないか&hellip;!といろいろやりがいがありました． もっと言うと指定されたログの
モデル以外にも対応できるような汎用的なLTSVパーサにしたら便利そうと思ったんですが
そこまでは時間と実力が足りなくてできませんでした．残念．</p>

<p>LTSV パーサ，Scalaの課題としてよかったなぁと思います．</p>

<p>またこの事前課題は単にテストを通して提出すると終了&hellip;というわけではなくインターンの初日あたりに
講評が行われるのが最高でした．自分のコードはどう書けばよりよかったのか，他のインターン生は
どう書いていてどこがよかったのかといったことも知れて便利でした．この講評はインターンの前半課題
でも行われました．</p>

<h3>前半の講義がウェブ開発を基礎から勉強するのに最高</h3>

<ul>
<li><a href="http://hatenacorp.jp/intern2015/lecture/">講義パート - はてなサマーインターン2015 レポートサイト</a></li>
<li>教科書 <a href="https://github.com/hatena/Hatena-Textbook">hatena/Hatena-Textbook</a></li>
</ul>


<h4>スケジュール</h4>

<ul>
<li>1日目 Perl/Scalaによるプログラミングの基礎</li>
<li>2日目 Perl/Scalaによるデータベースプログラミング</li>
<li>3日目 Perl/ScalaによるWebアプリケーション開発</li>
<li>4日目 JavaScriptによるイベント・ドリブンプログラミング</li>
<li>5日目 自由課題</li>
<li>6日目 インフラ</li>
<li>7日目 SwiftでのiOSアプリ開発</li>
</ul>


<p>前半の講義パートは言語の基礎からWebアプリケーション，インフラ，それにSwift
コースや希望者はSwiftのiOSアプリ開発までを1週間で学べるようになっていました．
それぞれのコースのインターン生ごとにメンターさんがついてくれます．僕の場合は
<a href="http://sixeight.hatenablog.com/">id:sixeight</a> さん でした．</p>

<p>毎日課題が課されてそれをメンターさんに質問したり，レビューを受けたり，講評をも
らったりとﾋｲﾋｲこなして行くことで後半に向けて基礎力を向上できる仕組みになってい
ました．大変でしたが楽しかった&hellip;!</p>

<p>課題としては自由課題が最後で，その内容はそれまでに学んできた技術と課題で作って
きたブログシステムを活かして好きなWeb アプリケーションを作るというものでした．</p>

<p>ここで作ったサービスは社内で投票で順位もつく前半の集大成という課題で厳しくも楽
しい，燃える課題となっていました．僕はあんまり独創的なアイデアのなくこれがあれ
ばベンリやろ〜というノリでちょっとしたものしか作れなかったのですが，他のイン
ターン生のアプリケーションのクオリティが高くて刺激になりました．</p>

<p>完全に言い訳になるのですが僕は自由課題の日の前の土日で開催されたオープンイン
ターネッツに公開されてない，はてなで行われたもくもく回ハッカソンで途中まで
作ってた <a href="http://haya14busa.com/vim-vital-power-assert/">Vim script版 power-assert</a>
に夢中になってました．
他のインターン生のつくったサービスをみてもっと自由課題に力入れればよかった&hellip;と
思ったので来年度以降はてなインターンへの参加を考えている各位は前半最後の自由
課題はやりがいあってよいよ！と言っておきます．</p>

<h3>後半の実践パートでサービスにコミットしていく実践経験が得られて最高</h3>

<p><a href="http://hatenacorp.jp/intern2015/projects/">実践パート - はてなサマーインターン2015 レポートサイト</a></p>

<p>今年から前半/後半の比率が代わり前半が少し短く，その分後半の実践パートが長く
なったようです．開発に時間がとれてベンリ．</p>

<p>後半は僕は <a href="http://blog.hatena.ne.jp/tyage/">id:tyage</a> くんさんと一緒にMackerelコースに配属され，
ちょっとしたバグ修正によるインターン生最速リリース(ちょっとｽﾞﾙｲ)から始まり4つほ
ど多方面からMackerelの機能改善や新機能のリリースを行い，最終成果発表で1位を獲得できました!</p>

<p>だいたい <a href="http://blog.hatena.ne.jp/tyage/">id:tyage</a> くんやメンターの
<a href="http://sixeight.hatenablog.com/">id:sixeight</a>さんをはじめとするMackerelチーム
の皆さんのおかげでした．</p>

<p><a href="http://blog.hatena.ne.jp/tyage/">id:tyage</a> くんさんはインターンまでScalaほとんど書いてなかったらしいのに，
後半過程では1年くらいScala経験あった僕と同じかそれ以上のレベルでScalaかけちゃうし，
JavaScriptまわりでペアプロして相談しても的確に正しい方向に導いていってくれるし最強かよ〜という感じでした．
<a href="http://blog.hatena.ne.jp/tyage/">id:tyage</a> くんさんとのペアプロ，最高に便利体験でした.</p>

<p><a href="http://sixeight.hatenablog.com/">id:sixeight</a>さんやMackerelチームの方には
方針を一緒に考えてもらったり，ダメなところをダメと指摘してもらったり，実装・仕様の相談をさせてもらったりと，
最高の体験でした．</p>

<p><a href="http://blog.hatena.ne.jp/tyage/">id:tyage</a>くんや優秀なMackerelチームのメンバーと
少しの間とは言えチームとして働く経験ができて，しかも最後には優勝というおまけまでついてきて
最高の夏を過ごせました．ありがとうございました!</p>

<h3>はてなインターン最高でした</h3>

<p>上述したカリキュラム上の話だけじゃなく毎日おいしいはてなのまかないをはてなの社員さんと
お話しながら食べたり，他の優秀なインターン生の話を聞いたり，実力を垣間見たり，
インターン途中に参加したYAPCや社内TGIF，ごはん連れてってもらったりしたときにはてなの社員さんの
話を聞いたりなどなど，最高の夏を過ごせました．</p>

<p>逆に慣れなかったことといえばはてなの 「<a href="http://hitode909.hatenablog.com/entry/2014/12/02/205958">シュッと</a>」
っという言葉だけは いやいや「サッと」とかのほうが馴染むじゃん&hellip;?とあんまり慣れな
かったのですが， インターン終わってから「シュッと」，いいじゃん使いやすいじゃん&hellip;?
となぜかインターン終わってから馴染むようになってしまいました．不思議だ&hellip;</p>

<h3>他のインターン生の紹介</h3>

<p>イカしたやつらを紹介するぜ! ってやつ．終始凄い人多すぎてびびってました&hellip;
僕も頑張りたい．</p>

<ul>
<li><a href="http://blog.hatena.ne.jp/akiym/">id:akiym</a> perl, CTFのプロ</li>
<li><a href="http://blog.hatena.ne.jp/daiiz/">id:daiiz</a> インターン委員長のプロ! 同窓会すき焼き(?)おねがいします

<ul>
<li><a href="http://daiiz.hatenablog.com/entry/2015/09/11/101815">はてなサマーインターンが終わり、エンジニアへの道が始まった - daizの日記</a></li>
</ul>
</li>
<li><a href="http://blog.hatena.ne.jp/SWIMATH2/">id:SWIMATH2</a> idが定まらないプロ(?). いろいろつくっていて面白い

<ul>
<li><a href="http://swimath2.hatenablog.com/entry/2015/09/29/181805">中2の頃から大好きなはてなのインターンで最高の経験をした話 - クフでダローバルな日記</a></li>
</ul>
</li>
<li><a href="http://blog.hatena.ne.jp/hiroqn/">id:hiroqn</a> 常識人ミュージシャンのプロ</li>
<li><a href="http://blog.hatena.ne.jp/kakira96/">id:kakira96</a> 競プロとかWebGLとか多彩に出来るょぅじょのプロ．kakiraさんには関心しっぱなしだった&hellip;</li>
<li><a href="http://blog.hatena.ne.jp/karur4n/">id:karur4n</a> ポッドキャスト(<a href="http://kumocast.jp/">くもキャスト</a>)やってるプロ．Vimの回あれば呼んでください</li>
<li><a href="http://blog.hatena.ne.jp/Lepton/">id:Lepton</a> 競プロのプロ

<ul>
<li><a href="http://leptont.hatenablog.jp/entry/hatenaintern2015">最高のはてなサマーインターン - うに</a></li>
</ul>
</li>
<li><a href="http://blog.hatena.ne.jp/tom__bo/">id:tom__bo</a> インターン最終日に最高最高言うプロ

<ul>
<li><a href="http://tombo2.hatenablog.com/entry/2015/09/07/023655">はてなサマーインターン2015に参加してきた - tom__bo’s blog</a></li>
</ul>
</li>
<li><a href="http://blog.hatena.ne.jp/tyage/">id:tyage</a> 最高の相方プロ

<ul>
<li><a href="http://tyage.hatenablog.com/entry/2015/09/30/235943">Scalaの夏、はてなインターンの夏 - tyage&rsquo;s diary</a></li>
</ul>
</li>
<li><a href="http://blog.hatena.ne.jp/daguniko/">id:daguniko</a> eemonさん似のプロ</li>
<li><a href="http://blog.hatena.ne.jp/eemon18/">id:eemon18</a> dagunikoさん似のプロ

<ul>
<li><a href="http://emon18.hateblo.jp/entry/2015/09/30/222214">はてなサマーインターンシップ2015に行ってきました - e-mon</a></li>
</ul>
</li>
</ul>


<p><strong>最高の夏〜</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はてな，Googleインターン行ってイカやりすぎたイカVimmerの2015年の振り返り]]></title>
    <link href="http://haya14busa.com/look-back-2015/"/>
    <updated>2015-12-31T21:15:00+09:00</updated>
    <id>http://haya14busa.com/look-back-2015</id>
    <content type="html"><![CDATA[<p>今年は4月から大きく環境が変わったり，インターンに行ったりちょくちょくVim活したりイカ(<a href="https://www.nintendo.co.jp/wiiu/agmj/">Splatoon</a>)したりと振り返ってみる
と色んな事がありました．</p>

<p>最初にネタバレをすると最も進捗があったのは Splatoon で最高ウデマエS+90まで行ったことでした．</p>

<p><strong>マンメンミ!</strong></p>

<h2>去年や一昨年の</h2>

<ul>
<li>Vim歴換算1年目 -> <a href="http://haya14busa.com/vim_driven_learning/">1年間『Vim駆動学習』してきて最高に楽しかったのでオススメしたい - haya14busa</a></li>
<li>プログラミング2年目 -> <a href="http://haya14busa.com/haya14busa-s-happy-vimming-year-2014/">2014年の振り返り. またはプログラミング2年目をVimに捧げるとこうなるという話 - haya14busa</a></li>
</ul>


<p>今年はプログラミング初めてからだいたい3年目でした．もう初心者とか言ってられないようになって気がしますが，まだまだ勉強不足・力不足すぎるので精進したい.</p>

<h2>はてなサマーインターン</h2>

<p>長くなったので記事分けた -> <a href="http://haya14busa.com/hatena-intern-2015/">2015年夏，はてなインターンでMackerelをとにかく便利にして優勝してきた - haya14busa</a></p>

<p><strong>最高の夏〜</strong></p>

<h2>Google Japan Software Engineer インターン</h2>

<p>はてなインターンが終わった後，3ヶ月ほどGoogle Japanのインターンに行っていました．
Googleは内側ではオープンで全然違う国の違うチームの情報を見れたりするオープンさなのですが，
外側にはオープンではないので基本的にブログに書いたらだめっぽい，というか線引きがわ
からないので参加した内容に関する感想は書けません&hellip;残念&hellip;</p>

<p>Googleの優秀なエンジニアさんたちとGoogleという会社で開発できたのは学びもやりが
いもたくさんあって最高の体験でした．</p>

<h2>インターン対策とか競技プログラミング</h2>

<p>はてなとGoogle以外にもいくつか応募して受かったり落ちたりしたのですが，
そのうち1回ホワイトボードコーディング面接があり，超基本的なことを聞かれているの
にぜんぜん答えられない&hellip;という苦い経験がありました．</p>

<p>頭のどこかで僕は情報学部じゃなかったし，プログラミングも独学で好きなことやってる段階だし
基礎的も知らなくてもまだ仕方ない&hellip;と思ってた節があったりしました．
しかしこれは完全に言い訳です．
<strong>基礎</strong>は土台．最低限理解して説明できる程度にはなってないと面接とか関係なく
マズいな&hellip;と思いデータ構造，アルゴリズムなど勉強しなおしました．</p>

<p>その一環として前から興味はあったんだけどなかなか手がでなかった競技プログラミングにも今年はちょくちょく手をだしはじめました．
最近ちょっとイカしすぎておろそかになってますがやっていきたいです．</p>

<h3>面接対策でつかった本とか</h3>

<h4>世界で闘うプログラミング力を鍛える150問</h4>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=haya14busa-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00HR19TSO" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h4>The Joel on Software 採用面接ゲリラガイド</h4>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=haya14busa-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4274066304" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p><a href="http://local.joelonsoftware.com/wiki/%E6%8E%A1%E7%94%A8%E9%9D%A2%E6%8E%A5%E3%82%B2%E3%83%AA%E3%83%A9%E3%82%AC%E3%82%A4%E3%83%89(version_3.0">採用面接ゲリラガイド(version 3.0) - The Joel on Software Translation Project</a>)</p>

<h2>Vim 活</h2>

<h3>incsearch.vim v2.0</h3>

<ul>
<li><a href="https://github.com/haya14busa/incsearch.vim/releases/tag/v2.0.0">Release Version 2.0 · haya14busa/incsearch.vim</a></li>
<li><a href="http://haya14busa.com/incsearch-dot-vim-ver-2/">Vimの検索はもっともっと便利になる! incsearch.vim v2.0 をリリースしました - haya14busa</a></li>
<li>関連リポジトリ

<ul>
<li><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></li>
<li><a href="https://github.com/haya14busa/incsearch-migemo.vim">haya14busa/incsearch-migemo.vim</a></li>
<li><a href="https://github.com/haya14busa/incsearch-fuzzy.vim">haya14busa/incsearch-fuzzy.vim</a></li>
<li><a href="https://github.com/haya14busa/incsearch-easymotion.vim">haya14busa/incsearch-easymotion.vim</a></li>
<li><a href="https://github.com/haya14busa/vital-string-converter">haya14busa/vital-string-converter</a></li>
</ul>
</li>
</ul>


<p>incsearch.vimをカイゼンしてv2.0にしてました．もっと昔にやってた気がするけど今年
の7月でした．リファクタリングしてコンポーザブルにしたりと拡張性をましてincsearch.vimをより便利にできました．</p>

<h3>vital-power-assert と VimConf | Vim script 版 powerassert!</h3>

<ul>
<li><a href="https://github.com/haya14busa/vital-power-assert">haya14busa/vital-power-assert</a></li>
<li><a href="http://haya14busa.com/vim-vital-power-assert/">Vim script版 power-assert! テスト書いてないとかお前それ Vim script の前でも同じこと言えんの? - haya14busa</a></li>
<li><a href="http://vimconf.vim-jp.org/2015/">VimConf 2015</a></li>
</ul>


<p>はてなインターン中に作ってその後もちょくちょくと触ってました．またVimConfで発表したりもしました．</p>

<iframe src="https://docs.google.com/presentation/d/1Nkll31jRFpKCFUA-5ruEFoa1-ODAHBU7wRM5s5DyETk/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p>去年も大概だったのですが今年は個人的にVimConfに向けての準備がゼンゼン足りてなくて来年こそはちゃんとするゾ!!という気持ちです．</p>

<h3>underscore.vim</h3>

<ul>
<li><a href="https://github.com/haya14busa/underscore.vim">haya14busa/underscore.vim</a></li>
</ul>


<p>underscore.jsのVim scriptバージョンを作ってました．実装は去年からなんだかんだやっていましたがエイプリルフールにリリースしました．
実用性がないわけではないけど，ラムダが無いとかスコープの関係上凝ったことしようとすると微妙に使いづらいのが残念ですが開発してて面白かったです．</p>

<h3>勢い Vim プラグイン系</h3>

<h4>niconicomment.vim</h4>

<ul>
<li><a href="https://github.com/haya14busa/niconicomment.vim">haya14busa/niconicomment.vim</a></li>
</ul>


<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/niconicomment.vim/niconicomment2.gif" alt="niconicomment2.gif (1366×747)" /></p>

<p>思い出したように実行すると面白い．</p>

<h4>vim-undoreplay</h4>

<ul>
<li><a href="https://github.com/haya14busa/vim-undoreplay">haya14busa/vim-undoreplay</a></li>
</ul>


<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/vim-undoreplay/undoreplay_fizzbuzz2.gif" alt="undoreplay_fizzbuzz2.gif (1366×747)" /></p>

<p>思い出したように実行すると面白い2．</p>

<h3>vital.vim にPullRequest</h3>

<ul>
<li><a href="https://github.com/vim-jp/vital.vim/pull/258">Vim.ScriptLocal: Add ScriptLocal (get script-local things) by haya14busa · Pull Request #258 · vim-jp/vital.vim</a></li>
<li><a href="https://github.com/vim-jp/vital.vim/pull/239">Add Data.Set module by haya14busa · Pull Request #239 · vim-jp/vital.vim</a></li>
<li><a href="https://github.com/vim-jp/vital.vim/pull/348">Data.Counter: Implement &ldquo;Data.Counter&rdquo; by haya14busa · Pull Request #348 · vim-jp/vital.vim</a></li>
</ul>


<p><a href="https://github.com/vim-jp/vital.vim">vim-jp/vital.vim</a> というVim scriptのライブラリにいくつか欲しいモジュールをPRで送ったりした．
Vim.ScriptLocal は Vim scriptのスクリプトローカル変数を外からハックするモジュールでVim scriptのテストフレームワークである
<a href="https://github.com/thinca/vim-themis">thinca/vim-themis</a> で使ってもらったりした．
他にはPythonあたりにある便利なデータ構造をVim scriptにポートする業などしていました．</p>

<h3>Vim Advent Calendar</h3>

<ul>
<li><a href="http://haya14busa.com/vim-mnemonic/">Vim Mnemonic | Vim のコマンドの覚え方大全 - haya14busa</a></li>
</ul>


<p>前から自分が欲しかった，まとめたかった記事を書きました．今までで最高ブクマ数を頂いてありがたい．</p>

<h3>vim-operator-flashy</h3>

<ul>
<li><a href="https://github.com/haya14busa/vim-operator-flashy">haya14busa/vim-operator-flashy</a></li>
</ul>


<p>年末駆け込みプラグイン．VimConfで<a href="https://github.com/t9md">t9md</a>さんが開発してる
<a href="https://github.com/t9md/atom-vim-mode-plus">t9md/atom-vim-mode-plus</a> でヤンク対象を
フラッシュしていてわかりやすいというのを見せて頂いたのがきっかけになってます．
地味にUX向上してよい．</p>

<h2>参加・発表したミートアップ・勉強会系</h2>

<h3>YAPC</h3>

<ul>
<li><a href="http://yapcasia.org/2015/">YAPC::Asia Tokyo 2015</a></li>
<li><a href="http://haya14busa.com/yapcasia-2015/">ブログを書くまでが #yapcasia なのでブログでLT発表して感想かく ― Vim駆動学習 - haya14busa</a></li>
</ul>


<p>YAPCに初めて参加しました．学生無料便利すぎました．LT発表は応募したのですが残念ながら落ちて残念．</p>

<h3>Yokohama.vim</h3>

<ul>
<li><a href="http://yokohamavim.connpass.com/event/21069/">Yokohama.vim.osaka? #7 - connpass</a></li>
</ul>


<p>Yokohama.vimではなぜか基調講演という名の戦犯をしてきました．
内容はYAPCでしようとしていたVim駆動学習の話の微調整という感じでした．
ちゃんと基調講演と言えるような発表をできるようになってまたYokohama.vim参加したい．</p>

<h3>VimConf 2015</h3>

<p>上述した．</p>

<h3>fpinscala読書会完走</h3>

<ul>
<li><a href="https://www.manning.com/books/functional-programming-in-scala">Functional Programming in Scala</a></li>
<li><a href="http://fpscala-osaka.connpass.com/">fpscala-osaka - connpass</a></li>
</ul>


<p>大阪で定期的に開催されていたfpinscala読書会でFunctional Programming in Scalaを(一応)読了しました．
が，まだまだ理解しきれてないところ，飛ばしたところなどたくさんあるので2週目に参加してしっかり
関数型プログラミング身につけたいなと思います．</p>

<h2>GitHub 記録</h2>

<ul>
<li><a href="https://github.com/search?utf8=%E2%9C%93&amp;q=is%3Apr+author%3Ahaya14busa+created%3A%222015-01-01+..+2016-01-01%22+">2015年に出したPull Request一覧</a></li>
<li><a href="https://github.com/pulls?utf8=%E2%9C%93&amp;q=is%3Aissue+author%3Ahaya14busa+created%3A%222015-01-01+..+2016-01-01%22+">2015年に開いたPull Request一覧</a></li>
</ul>


<p>あんまり大したことできてなかった</p>

<h2>Splatoon</h2>

<p><img src="../images/splatoon/IMG_0424.JPG" alt="Splatoon S+ 90" /></p>

<p>インターン中に買ってインターン終了までにS+になるという目標は達成したのですが，
年内にカンストするという目標は残念ながらできませんでした．
しかし，今年の後半は本当にイカしかやってないというベルでやっていてイカ進捗が一番でてました．
イカちゃん楽しすぎる&hellip;</p>

<p>よかったらみなさん一緒にイカしましょう!</p>

<h2>その他</h2>

<p>ちょくちょくReact触ったり, 引き続きScala書いたり, golang はじめたりしましたが，
OSSっぽいこと，ここに書くようなことはほとんどできませんでした．</p>

<h2>最後に</h2>

<p>今年は環境が変わっただとか，インターン長期間行ってたとか，Splatoonやってたとか
で特に今年後半はあんまり見える活動できてなかったです．もっと頑張りたい．</p>

<p>去年も似たようなこと言ってたような気がしますが来年はVimはもちろんのことVim以外のこともやっていきたいなぁと思います．
あともう少し大きいレベルで目標を定めてそれに向かってやれるとよさそう(まだふわふわだけど真剣に考えなきゃ&hellip;)．</p>

<p>それと今年最も苦労して迷惑かけたのは英語ではないかという説があるので，
来年は英語でコミュニケーションとれるように頑張って勉強していきたいですね．</p>

<p>以上, <a href="https://twitter.com/haya14busa">@haya14busa</a> の 2015年の振り返り記録でした.</p>

<p><strong>来年もイカよろしく〜</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Mnemonic | Vim のコマンドの覚え方大全]]></title>
    <link href="http://haya14busa.com/vim-mnemonic/"/>
    <updated>2015-12-21T02:55:02+09:00</updated>
    <id>http://haya14busa.com/vim-mnemonic</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://qiita.com/advent-calendar/2015/vim">Vim Advent Calendar 2015</a> の21日目の記事です．</p>

<h2>もくてき</h2>

<p>本記事では Vim のコマンドの&#8221;覚え方&#8221;を紹介します．
基本的にはトリッキーな&#8221;覚え方&#8221;ではなく由来の紹介となります．
例えば <code>J</code> で行連結は <strong>J</strong>oin が元だとか， <code>gf</code>が&#8221;<strong>g</strong>oto <strong>f</strong>ile&#8221;の略だといったことを
知っておくとなにかと憶えやすいと思います．</p>

<h2>対象読者</h2>

<p>主にこれから Vim を使ってみよう! でもなかなかコマンドを覚えられないっ! という Vim 初心者の方に由来を知ることで少しでも
コマンドを憶えやすいようにすることが目的です．
初心者を想定しているのでコマンドの動作などもなるべく紹介していきます．</p>

<p>中・上級者の方には普段何気なく使ってたあのコマンドの由来を知って「フハハハハ」と
ほくそ笑んでもらえるような記事になれば嬉しいです．</p>

<h2>注意</h2>

<p>注意点として公式のものから公式<strong>っぽい</strong>もの，独自の調査結果によるものなど信憑性はまちまちです．
そしてVimのコマンドは無数にあるので覚え方大全と言っておきながらすべてを網羅できているわけではなくかなり偏っています．
抜けてるものとか間違ってるものとか俺はこう覚えてるぜ!というものがあったら教えてください!</p>

<p>出典は</p>

<ul>
<li>ヘルプファイル</li>
<li>ソースコード</li>
<li>出典不明だけどどこかで見聞きした話</li>
</ul>


<p>などです．基本英語に直して理解する方針のものが多いです．</p>

<p>またこれからたくさんのコマンドを羅列していきますがすべてを覚える必要は一切ないこと，
そして逆にここに載ってない便利な覚えるべきVimコマンドはきっとたくさんあるので覚えようと気負ったり，
だいたいわかるからokと思ったりしないようにおねがいします．</p>

<p>そして何よりの注意点としては結局覚え方よりも実際にやってみることが大事だということです!!!</p>

<p>ただ単にやってみるだけでなく由来や覚え方も知ることでより憶えやすくなったらよいなというのが本記事の趣旨なので，
深く考えすぎずにそうなんだ〜へぇ〜と思いながら読むとよいと思います．</p>

<p>ではスタートっ</p>

<h2>基本のカーソル移動 hjkl</h2>

<h3>vimtutor Lesson1</h3>

<pre><code class="``">        ^
        k              Hint:  The h key is at the left and moves left.
  &lt; h       l &gt;               The l key is at the right and moves right.
        j                     The j key looks like a down arrow.
        v
</code></pre>

<p>出典: vimtutor</p>

<p>右手のホームポジションから1つ左にあるので<code>h</code>は左方向に移動し, 右にある<code>l</code>が右方向への移動です．
<code>j</code>はどことなく<code>↓</code>(下矢印)に似ているので下方向に移動すると憶えましょう．
<code>k</code>に関してはどことなく上にとんがってるので上方向に移動すると考えてもいいかも知れません．</p>

<h3>もともとのhjklの由来</h3>

<ul>
<li>出典: <a href="https://groups.google.com/forum/#!searchin/vim_use/hjkl/vim_use/Hz6x-jwUd-k/QsOmjBvZ1UsJ">h j k l &ndash; keys - Google Groups</a></li>
</ul>


<p>viの開発者である<a href="https://ja.wikipedia.org/wiki/%E3%83%93%E3%83%AB%E3%83%BB%E3%82%B8%E3%83%A7%E3%82%A4">ビル・ジョイ</a>さんが
当時使っていたPCが<a href="https://en.wikipedia.org/wiki/ADM-3A">ADM-3A - Wikipedia, the free encyclopedia</a>であり，
そのキーボードには矢印キーはなくHJKLを使ってカーソルを移動していたのが由来とのこと．</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/KB_Terminal_ADM3A.svg/931px-KB_Terminal_ADM3A.svg.png" alt="931px-KB_Terminal_ADM3A.svg.png (931×301)" /></p>

<p>この由来は知っても憶えやすくならない単なる豆知識でした．</p>

<h2>VIM の保存，終了と! (<code>&lt;bang&gt;</code>)</h2>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>:q</code> <code>:q[uit]</code> </td>
<td> カレントウィンドウを閉じる．<strong>q</strong>uit から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/editing.html#%3Aq">:h :q</a></td>
</tr>
<tr>
<td> <code>:qa</code> <code>:qa[ll]</code> </td>
<td> <strong>q</strong>uit <strong>all</strong> から． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/editing.html#%3Aqa">:h :qa</a></td>
</tr>
<tr>
<td> <code>:q!</code>, <code>:qa!</code>  </td>
<td> バッファに変更点があっても閉じる． <strong>q</strong>uit + <code>!</code>． </td>
<td></td>
</tr>
<tr>
<td> <code>:w</code> <code>:w[rite]</code> </td>
<td> バッファ全体をカレントファイルに書き込む．<strong>w</strong>riteから </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/editing.html#%3Aw">:h :w</a></td>
</tr>
<tr>
<td> <code>:wq</code> <code>:wqall</code> </td>
<td> <code>:w</code>と<code>:q</code>の組み合わせ </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/editing.html#%3Awq">:h :wq</a></td>
</tr>
</tbody>
</table>


<h3>コマンド末尾の<code>!</code></h3>

<p><a href="http://vim-jp.org/vimdoc-ja/map.html#%3Acommand-bang">:h :command-bang</a></p>

<p>Vim のコマンドは<code>!</code>修飾子を取ることができ，<code>!</code>の有無によって動作が変わる場合があります．
基本的には強制的に実行するという意味合いが多いので憶えておくと未知のコマンド + <code>!</code>に出会った時に
びっくりしないですみますね．</p>

<h2>挿入コマンド</h2>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>i</code> </td>
<td> カーソルの前にテキストを[count]回挿入する．<strong>i</strong>nsertから </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#i">:h i</a></td>
</tr>
<tr>
<td> <code>I</code> </td>
<td> 行の先頭の非空白文字の前にテキストを[count]回挿入する．<strong>i</strong>nsertの大文字バージョン．大文字は行指向になるパターンが多い印象 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#I">:h I</a></td>
</tr>
<tr>
<td> <code>a</code> </td>
<td> カーソルの後ろにテキストを[count]回追加する．<strong>a</strong>ppendから </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#a">:h a</a></td>
</tr>
<tr>
<td> <code>A</code> </td>
<td> 行末にテキストを[count]回追加する． <strong>a</strong>ppendの大文字バージョン </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#A">:h A</a></td>
</tr>
<tr>
<td> <code>o</code> </td>
<td> カーソルのある行の下に新しい行を作り、そこにテキストを[count]回繰り返し挿入する．<strong>o</strong>pen line から. </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#o">:h o</a></td>
</tr>
<tr>
<td> <code>O</code> </td>
<td> カーソルのある行の上に新しい行を作り、そこにテキストを[count]回繰り返し挿入する．<strong>o</strong>pen line の大文字バージョン. </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#O">:h O</a></td>
</tr>
<tr>
<td> <code>gi</code> </td>
<td> 最後に入力がされた場所にテキストを入力. <strong>g</strong>oto last <strong>i</strong>nsert position and start <strong>i</strong>nsert と思ってたが<strong>g</strong>は単なるprefixかも．後述する<code>gv</code>は<code>gi</code>のヴィジュアル版っぽい </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#gi">:h gi</a></td>
</tr>
</tbody>
</table>


<h2>モーション，オペレータ, テキストオブジェクト, ヴィジュアルモードについて</h2>

<p>個々のモーション(<code>hjlk</code>, <code>w</code>, etc&hellip;)やオペレータ(<code>d</code>,<code>c</code>, <code>y</code>&hellip;)について
それぞれ説明する前に全体的な動作について理解しておくと覚えることが減って,
しかもとても便利なのでぜひ理解しましょう.</p>

<h3>モーション {motion}</h3>

<pre><code class="``">  [count] {motion}
</code></pre>

<p><a href="http://vim-jp.org/vimdoc-ja/motion.html#motion.txt">:h motion.txt</a></p>

<p>モーションとはカーソル移動コマンドです．<code>[count]</code>を前置すると<code>[count]</code> x <code>{motion}</code>分だけ移動します．
すでに見た<code>hjkl</code>ももちろんモーションなので<code>4h</code>などすると左に4文字移動するという意味になります．</p>

<h3>オペレータ {operator} とモーション {motion}</h3>

<p><a href="http://vim-jp.org/vimdoc-ja/motion.html#operator">:h operator</a></p>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/8d8cb3eab06d240dbb1c1e2057fd80f8a6d4378b/misc/d2w.gif" alt="d2w.gif (661×157)" /></p>

<pre><code class="``">  {operator} {motion}
</code></pre>

<p>厳密にはカウントを<code>{operator}</code>,<code>{motion}</code>のそれぞれに前置することができるので以下のようになります．
(<code>[count]</code>を両者に前置させると掛け算になります. <code>2d3w</code> -> 6つの単語を削除.
普通に<code>6dw</code>や<code>d6w</code>としたほうが基本的にわかりやすそうですね)</p>

<pre><code class="``">  [count] {operator} [count] {motion}
</code></pre>

<p>またオペレータによってはレジスタを前置できます．<a href="http://vim-jp.org/vimdoc-ja/change.html#registers">:h registers</a></p>

<pre><code class="``">  ["x] [count] {operator} [count] {motion}
</code></pre>

<p>Vimは変更する，削除するといった操作を表すオペレータ<code>{operator}</code>と，
その操作の適用範囲であるモーション<code>{motion}</code>を組み合わせることでテキストを編集できます．
先ほどみた<code>{motion}</code>に操作を加えている形になっています．</p>

<h3>オペレータ {operator} とテキストオブジェクト {text-objects}</h3>

<p><a href="http://vim-jp.org/vimdoc-ja/motion.html#text-objects">:h text-objects</a></p>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/b4e5cb04da9fee94c676d16eb38e5dec2d131690/misc/di'.gif" alt="di'.gif (657×128)" /></p>

<pre><code class="``">  {operator} {text-objects}
</code></pre>

<p>また，移動コマンドとしては使えないけれど<code>{operator}</code>と組み合わせた時の操作範囲
となるテキストオブジェクトを先ほどの<code>{motion}</code>の代わりに使うことができます．
例えば文字列の中身を削除(オペレータの1つ)したい場合の&#8221;文字列の中身&#8221;は移動するような概念
ではないですが，オペレータの操作対象として妥当です．</p>

<h3>ヴィジュアルモード とモーション，テキストオブジェクト</h3>

<p>そして厳密にはオペレータではないですがヴィジュアルモードでもモーションやテキストオブジェクトと
組み合わせることができ，対象の範囲を選択できます．</p>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/b4e5cb04da9fee94c676d16eb38e5dec2d131690/misc/vi'.gif" alt="vi'.gif (657×177)" /></p>

<pre><code class="``">  {visual-operation} {motion|text-objects}
</code></pre>

<p>ヴィジュアルモードを&#8221;選択する&#8221;という&#8221;操作&#8221;とみれば自然に理解できるかと思います．</p>

<h3>オペレータの対象範囲としてのヴィジュアル選択範囲 {Visual}</h3>

<p>そしてヴィジュアルモードで選択した範囲<code>{Visual}</code>は<code>{motion}</code>や<code>{text-objects}</code>
と同様にオペレータの対象範囲として使えます．</p>

<pre><code class="``">  {Visual} {operator}
</code></pre>

<h3>{operator}{operator} は行指向オペレーション!</h3>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/8d8cb3eab06d240dbb1c1e2057fd80f8a6d4378b/misc/gqq.gif" alt="gqq.gif (1131×312)" /></p>

<pre><code class="``">  [count] {operator} {operator}
</code></pre>

<p>そして上記の組み合わせの特殊なケースとしてオペレータ
(2コマンド以上のオペレータの場合は最後の文字のみでも可)，
を繰り返して入力すると操作範囲が行指向になります．</p>

<p>例えば<code>dd</code> や <code>yy</code> といったオペレータを繰り返すと行を削除したりヤンクできるといった具合です．</p>

<p>僕が観測している範囲ではこの挙動は<code>dd</code>や<code>yy</code>といった基本的な編集オペレータだけでなく，
全てのオペレータに当てはまっているので憶えておくと便利です．(ソースコードは読んでないので確証がない.)</p>

<p>例えば2文字のオペレータである<code>gq</code>(<a href="http://vim-jp.org/vimdoc-ja/change.html#gq">:h gq</a>)は
<code>gqq</code>や<code>gqgq</code>と打つことでカーソル下の行を整形できたりします．</p>

<h2>1つの変更単位としての {operator} {motion|text-objects}</h2>

<p><strong>Vim のおすすめコマンド10選!!!</strong> として &ldquo;<code>diw</code> でカーソル下の単語を消す&rdquo; といったここで述べた
オペレータとテキストオブジェクトをいっしょにまとめたものを1つのコマンドとして
紹介するような記事がたくさんあったりしますが，これらは1つのコマンドでもなんでもないです．
オペレータやモーション，テキストオブジェクトの概念を理解すれば無限大の組み合わせをそれぞれ
覚える必要はなく，便利なオペレータとモーションを別々に覚えてそれらを組み合わせればよいです．</p>

<p>これは覚え方とはまた別ですが上述したオペレータとモーション，テキストオブジェクトの組み合わせは
1つの&#8221;変更単位&#8221;となっておりドット<code>.</code>コマンドで同じ操作を繰り返すことも可能です (<a href="http://vim-jp.org/vimdoc-ja/repeat.html#.">:h .</a>)．</p>

<p>説明が長くなりましたが，ここからそれぞれのオペレータやモーションの覚え方について見ていきましょう．</p>

<h2>オペレータ {operator}</h2>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>c</code> </td>
<td> 変更する．<strong>c</strong>hangeから． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#c">:h c</a></td>
</tr>
<tr>
<td> <code>d</code> </td>
<td> 削除する．<strong>d</strong>eleteから． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#d">:h d</a></td>
</tr>
<tr>
<td> <code>y</code> </td>
<td> コピーする．<strong>y</strong>ankから． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#y">:h y</a></td>
</tr>
<tr>
<td> <code>gU</code> </td>
<td> 大文字にする．おそらくprefixとして<code>g</code> + <strong>U</strong>ppercaseから． 大文字にマッチする正規表現の <code>\U</code>． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#gU">:h gU</a></td>
</tr>
<tr>
<td> <code>gu</code> </td>
<td> 小文字にする．おそらく<code>gU</code>の逆で小文字にするから．小文字にマッチする正規表現の <code>\u</code>． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#gu">:h gu</a></td>
</tr>
<tr>
<td> <code>&gt;</code> </td>
<td> 右にインデントをシフトする．見た目から?． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#shift-left-right">:h &lt;</a></td>
</tr>
<tr>
<td> <code>&lt;</code> </td>
<td> 左にインデントをシフトする．見た目から?． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#shift-left-right">:h &gt;</a></td>
</tr>
<tr>
<td> <code>zf</code> </td>
<td> 折畳を作成する．<code>z</code>は後述するが&#8221;z&#8221; は紙片を折った様子を横からみた姿に見えるから．<code>f</code>は折りたたみを作成するのが一番基本コマンドと考えて<strong>f</strong>oldから?</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zf">:h zf</a></td>
</tr>
</tbody>
</table>


<p>他にも由来わからないけど便利なオペレータはあるので使って憶えましょう．個人的に憶えておくと便利そうなものをリストアップ．</p>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>=</code> </td>
<td> フィルタ処理. インデント整形 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#%3D">:h =</a></td>
</tr>
<tr>
<td> <code>gq</code> </td>
<td> 整形する．80文字で折り返すよう整形とかできる </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#gq">:h gq</a></td>
</tr>
</tbody>
</table>


<p>先ほどオペレータを連続させると対象が行指向になると説明したように,
<code>cc</code>なら行を変更，<code>==</code>や<code>gqq</code>で行を整形できます．個別に覚える必要はないですね.</p>

<p>また ヴィジュアルモードでの<code>&lt;</code> や <code>&gt;</code>を連続で操作するために下記のようなマッピング
をしている人もいますが，他の選択範囲に対するオペレータによる操作となんら変わらないので
代わりにドットリピート<code>.</code>を使って繰り返すことができます．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">vnoremap</span> <span class="p">&gt;</span> <span class="p">&gt;</span>gv
</span><span class='line'><span class="nb">vnoremap</span> <span class="p">&lt;</span> <span class="p">&lt;</span>gv
</span></code></pre></td></tr></table></div></figure>


<h3>ちょっと脱線してその他の変更コマンド系</h3>

<p><code>c</code>, <code>d</code>, <code>y</code>, <code>gU</code>&hellip;の他にもオペレータではない変更系コマンドがたくさんあります．<a href="http://vim-jp.org/vimdoc-ja/change.html">:h change</a></p>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>C</code> </td>
<td> 行末まで変更する．<strong>c</strong>hangeの大文字バージョン． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#C">:h C</a></td>
</tr>
<tr>
<td> <code>D</code> </td>
<td> 行末まで削除する．<strong>d</strong>eleteの大文字バージョン． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#D">:h D</a></td>
</tr>
<tr>
<td> <code>Y</code> </td>
<td> 行をコピーする．<strong>y</strong>ankの大文字バージョン．viの互換性から行末までではなく行． </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#Y">:h Y</a></td>
</tr>
<tr>
<td> <code>p</code> </td>
<td> テキストをレジスタから貼付ける．<strong>p</strong>ut から．<strong>p</strong>aste と憶えてもよさそう </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#p">:h p</a></td>
</tr>
<tr>
<td> <code>P</code> </td>
<td> カーソルの前にテキストを貼り付ける. <code>p</code>の逆 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#P">:h P</a></td>
</tr>
<tr>
<td> <code>x</code> </td>
<td> カーソル下の文字を削除. バツマークに似てるから? </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#x">:h x</a></td>
</tr>
<tr>
<td> <code>X</code> </td>
<td> カーソルの前の文字を削除. <code>x</code>の逆 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#x">:h x</a></td>
</tr>
<tr>
<td> <code>s</code> </td>
<td> カーソル下の文字を削除して挿入を始める. <strong>s</strong>ubstituteから. </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#s">:h s</a></td>
</tr>
<tr>
<td> <code>S</code> </td>
<td> 行を削除して挿入を始める. <code>s</code>の大文字バージョン. </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#S">:h S</a></td>
</tr>
<tr>
<td> <code>r</code> </td>
<td> カーソル下の文字を置き換える. <strong>r</strong>eplaceから. </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#r">:h r</a></td>
</tr>
<tr>
<td> <code>R</code> </td>
<td> 置換モードに入る. <strong>r</strong>eplaceから. </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#R">:h R</a></td>
</tr>
<tr>
<td> <code>gr</code> <code>gR</code> </td>
<td> <code>r</code>, <code>R</code>の仮想文字バージョン. <strong>g</strong> prefix </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#gr">:h gr</a> <a href="http://vim-jp.org/vimdoc-ja/change.html#gR">:h gR</a></td>
</tr>
<tr>
<td> <code>J</code>, <code>gJ</code> </td>
<td> 行を連結する. <strong>J</strong>oin から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#J">:h J</a></td>
</tr>
<tr>
<td> <code>:s///</code> </td>
<td> 置換コマンド. 省略しないと<strong>s</strong>ubstitute </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#:substitute">:h :substitute</a></td>
</tr>
</tbody>
</table>


<h4>由来ナゾ変更コマンド</h4>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>&lt;C-a&gt;</code> </td>
<td> カーソルの下または後の数またはアルファベットに [count] を加える. <strong>a</strong>ddから? </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#CTRL-A">:h CTRL-A</a></td>
</tr>
<tr>
<td> <code>&lt;C-x&gt;</code> </td>
<td> カーソルの下または後の数またはアルファベットに [count] を減じる. 英語ではsubtractなので何故xかは不明．<code>CTRL-S</code>が端末によっては使えない．<code>X</code>が<code>A</code>に近いから? </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/change.html#CTRL-A">:h CTRL-A</a></td>
</tr>
</tbody>
</table>


<h2>モーション {motion}</h2>

<p><a href="http://vim-jp.org/vimdoc-ja/motion.html">:h motion.txt</a></p>

<h3>左右の移動</h3>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>0</code> </td>
<td> その行の最初の文字に移動. 0文字目??? </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#0">:h 0</a></td>
</tr>
<tr>
<td> <code>^</code> </td>
<td> その行の最初の文字に移動. 正規表現の<strong>^</strong></td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#^">:h ^</a></td>
</tr>
<tr>
<td> <code>$</code> </td>
<td> その行の最後の文字に移動. 正規表現の<strong>$</strong></td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#$">:h $</a></td>
</tr>
<tr>
<td> <code>g0</code> <code>g^</code> <code>g$</code> </td>
<td> それぞれのスクリーン行バージョン(折り返し考慮) </td>
<td></td>
</tr>
<tr>
<td> <code>gm</code> </td>
<td> スクリーンの幅の真ん中に移動. <strong>m</strong>idleから．出典: ソースコード. middle of &ldquo;g0&rdquo; and &ldquo;g$&rdquo;.</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#gm">:h gm</a></td>
</tr>
<tr>
<td> <code>f{char}</code> </td>
<td> 右に向かって [count] 番目に現れる {char} に移動．<strong>f</strong>indから&hellip;と思いきやヘルプ/ソースコード的にはfindとは一切書いてない．確かにfindに移動するニュアンスはないか&hellip;?</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#f">:h f</a></td>
</tr>
<tr>
<td> <code>F{char}</code> </td>
<td><code>f</code>の左に向かうバージョン.</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#F">:h F</a></td>
</tr>
<tr>
<td> <code>t{char}</code> </td>
<td> 右に向かって [count] 番目に現れる {char} <strong>まで</strong>移動．<strong>t</strong>ill(〜まで) から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#f">:h f</a></td>
</tr>
<tr>
<td> <code>T{char}</code> </td>
<td> <code>t</code>の左バージョン </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#f">:h f</a></td>
</tr>
</tbody>
</table>


<h4>由来ナゾ</h4>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>;</code> </td>
<td> [count] 回最後の f, t, F, T を繰り返す. 余った記号で<code>;</code>を順方向,<code>,</code>を逆方向にした? </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#;">:h ;</a></td>
</tr>
<tr>
<td> <code>,</code> </td>
<td> [count] 回最後の f, t, F, T を反対方向に繰り返す. </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#,">:h ,</a></td>
</tr>
</tbody>
</table>


<h3>上下の移動</h3>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>G</code> </td>
<td> [count] 行目の最初の非空白文字に移動.カウントがなければ最後の行． <strong>G</strong>oto から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#G">:h G</a></td>
</tr>
<tr>
<td> <code>gg</code> </td>
<td> [count] 行目の最初の非空白文字に移動.カウントがなければ最初の行． <strong>g</strong>oto から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#gg">:h gg</a></td>
</tr>
<tr>
<td> <code>{count}%</code> </td>
<td>ファイルの {count} パーセントの位置に移動．そのままパーセントで直感的! </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#%">:h %</a></td>
</tr>
</tbody>
</table>


<h3>単語単位の移動</h3>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>w</code> </td>
<td> [count] words前方に移動. <strong>w</strong>ord から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#w">:h w</a> <a href="http://vim-jp.org/vimdoc-ja/motion.html#word">:h word</a></td>
</tr>
<tr>
<td> <code>W</code> </td>
<td> [count] WORDS(非空白文字の連続)前方に移動. <strong>w</strong>ord から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#G">:h G</a> <a href="http://vim-jp.org/vimdoc-ja/motion.html#WORD">:h WORD</a></td>
</tr>
<tr>
<td> <code>e</code> </td>
<td> [count] word 前方の単語の終わりに移動. <strong>e</strong>nd of word から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#e">:h e</a></td>
</tr>
<tr>
<td> <code>E</code> </td>
<td> [count] WORD 前方の単語の終わりに移動. <strong>E</strong>nd of WORD から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#E">:h E</a></td>
</tr>
<tr>
<td> <code>b</code> </td>
<td> [count] words後方に移動. <strong>b</strong>ackward から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#b">:h b</a></td>
</tr>
<tr>
<td> <code>B</code> </td>
<td> [count] WORDS後方に移動. <strong>b</strong>ackward から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#B">:h B</a></td>
</tr>
<tr>
<td> <code>ge</code> </td>
<td> [count] word 後方の単語の終わりに移動. <strong>g</strong> prefix + <strong>e</strong>nd of word から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#ge">:h ge</a></td>
</tr>
<tr>
<td> <code>gE</code> </td>
<td> [count] WORD 後方の単語の終わりに移動. <strong>g</strong> prefix + <strong>E</strong>nd of WORD から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#gE">:h gE</a></td>
</tr>
</tbody>
</table>


<h3>オブジェクト単位で移動</h3>

<p>3つのオブジェクト,
<a href="http://vim-jp.org/vimdoc-ja/motion.html#sentence">sentence(文)</a>,
<a href="http://vim-jp.org/vimdoc-ja/motion.html#paragraph">paragraph(段落)</a>,
<a href="http://vim-jp.org/vimdoc-ja/motion.html#section">section(セクション)</a>
が存在し，それぞれ<code>()</code>, <code>{}</code>, <code>[]</code>が対応する．
セクションのみ少し例外で1桁目の&#8217;{&lsquo; か &rsquo;}&lsquo;への移動を2コマンド目で表現する.</p>

<p>他に特に覚え方はわからないので表は省略．</p>

<p><a href="http://vim-jp.org/vimdoc-ja/motion.html#object-motions">:h object-motions</a></p>

<h3>ジャンプ</h3>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>CTRL-O</code> </td>
<td>ジャンプリストの中の [count] だけ古いカーソル位置に移動({motion}ではない). <strong>O</strong>lder cursor position から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#CTRL-O">:h CTRL-O</a></td>
</tr>
<tr>
<td> <code>CTRL-I</code> </td>
<td>ジャンプリストの中の [count] だけ新しいカーソル位置に移動({motion}ではない). キーボードで<code>O</code>の左に<code>I</code>がある </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#CTRL-I">:h CTRL-I</a></td>
</tr>
<tr>
<td> <code>g;</code> </td>
<td>変更リスト中の [count] 個前の位置に移動. <code>;</code>が順方向への移動っぽい</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#g;">:h g;</a></td>
</tr>
<tr>
<td> <code>g,</code> </td>
<td>変更リスト中の [count] 個後の位置に移動. <code>,</code>が逆方向への移動っぽい</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#g,">:h g,</a></td>
</tr>
</tbody>
</table>


<h3>様々な移動</h3>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>%</code> </td>
<td> 対応するアイテム([{}])にジャンプ. percent と parentheses(丸括弧) をかけている? <code>%</code>の文字が<code>/</code>を挟んで対応した<code>○</code>があると憶えてもよいかも  </td>
<td><a href="http://vim-jp.org/vimdoc-ja/motion.html#%">:h %</a></td>
</tr>
<tr>
<td> <code>H</code> </td>
<td> スクリーンの最上行から [count] 行目(デフォルト: スクリーンの最上行)に移動, <strong>H</strong>ome(top) of window とhelpに書いてあるがhomeってそんなニュアンスあるんだろうか&hellip; <strong>H</strong>igh と覚えてもよいかもしれない．</td>
<td><a href="http://vim-jp.org/vimdoc-ja/motion.html#H">:h H</a></td>
</tr>
<tr>
<td> <code>M</code> </td>
<td> スクリーンの中央に移動．<strong>M</strong>iddle line of windowから</td>
<td><a href="http://vim-jp.org/vimdoc-ja/motion.html#M">:h M</a></td>
</tr>
<tr>
<td> <code>L</code> </td>
<td>スクリーンの最下行から [count] 行目(デフォルト: スクリーンの最下行)に移動．<strong>L</strong>ast line on the windowから．<code>H</code>を<strong>H</strong>ighと覚えた場合は<code>L</code>は<strong>L</strong>owと覚えてもよいかも</td>
<td><a href="http://vim-jp.org/vimdoc-ja/motion.html#L">:h L</a></td>
</tr>
</tbody>
</table>


<h4>角括弧コマンド: <code>[</code> + &ldquo;?&rdquo;, <code>]</code> + &ldquo;?&rdquo; 系</h4>

<p><a href="http://vim-jp.org/vimdoc-ja/vimindex.html#[">:h [</a></p>

<p>ブロックやメソッド，コメントといった何かしら決められたものの始まり，終わりに移動する．
&ldquo;?&#8221;には<code>({mM#*/</code>などが入る．</p>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来</th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>[{</code>, <code>[(</code>, <code>]}</code> or <code>])</code></td>
<td> マッチしない &lsquo;{&rsquo;, &lsquo;(&rsquo;, &lsquo;}&rsquo; &lsquo;)&rsquo; に移動</td>
</tr>
<tr>
<td> <code>[#</code>, <code>]#</code></td>
<td> マッチしない #if..#endif の最初か最後に移動.</td>
</tr>
<tr>
<td> <code>[/</code>, <code>[*</code>, <code>]/</code>, <code>]*</code></td>
<td> Cスタイルコメントの最初か最後に移動.</td>
</tr>
<tr>
<td> <code>[m</code> or <code>]m</code> </td>
<td> Javaスタイルメソッドの最初に移動.</td>
</tr>
<tr>
<td> <code>[M</code> or <code>]M</code> </td>
<td> Javaスタイルメソッドの最後に移動.</td>
</tr>
</tbody>
</table>


<h2>テキストオブジェクト {text-objects}</h2>

<p>基本的なテキストオブジェクトは<code>i</code>, <code>a</code>の2種類がそれぞれprefixとしてつくものが多い．
<code>i</code>は <strong>i</strong>nner(内部)を表し，<code>a</code>は<strong>a</strong>(1つの)まとまり(&ldquo;a&#8221;n object)を表している．
<code>i</code>を<strong>i</strong>nside, <code>a</code>のをオブジェクトの<strong>a</strong>round(まわり)まで含むと覚えてたりしてもよいと思いますが公式は&#8221;inner&#8221;と&#8221;a&#8221;です．</p>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>aw</code>, <code>iw</code> </td>
<td> wordを選択. &ldquo;<strong>a</strong> word&rdquo;, &ldquo;<strong>i</strong>nner word&rdquo;. <code>a</code>は周りのホワイトスペースを含む</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#aw">:h aw</a> <a href="http://vim-jp.org/vimdoc-ja/motion.html#iw">:h iw</a></td>
</tr>
<tr>
<td> <code>aW</code>, <code>iW</code> </td>
<td> WORDを選択. &ldquo;<strong>a</strong> WORD&rdquo;, &ldquo;<strong>i</strong>nner WORD&rdquo;</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#aW">:h aW</a> <a href="http://vim-jp.org/vimdoc-ja/motion.html#iW">:h iW</a></td>
</tr>
<tr>
<td> <code>as</code>, <code>is</code> </td>
<td> &ldquo;sentence&rdquo;(文)を選択</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#as">:h as</a> <a href="http://vim-jp.org/vimdoc-ja/motion.html#is">:h is</a></td>
</tr>
<tr>
<td> <code>ap</code>, <code>ip</code> </td>
<td> &ldquo;paragraph&rdquo;(段落)を選択</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#ap">:h ap</a> <a href="http://vim-jp.org/vimdoc-ja/motion.html#ip">:h ip</a></td>
</tr>
<tr>
<td> <code>ab</code>, <code>a(</code>, <code>a)</code>, <code>ib</code> <code>i(</code>, <code>i)</code> </td>
<td> <code>(</code>,<code>)</code>ブロック，またはその内部を選択. <strong>b</strong>races block から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#ab">:h ab</a></td>
</tr>
<tr>
<td> <code>aB</code>, <code>a{</code>, <code>a}</code>, <code>iB</code> <code>i{</code>, <code>i}</code> </td>
<td> <code>{</code>,<code>}</code>ブロック，またはその内部を選択. <strong>B</strong>rackets block から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#aB">:h aB</a></td>
</tr>
<tr>
<td> <code>a[</code>, <code>a]</code>, <code>i[</code>, <code>i]</code> </td>
<td> <code>[</code>,<code>]</code>ブロック，またはその内部を選択 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#a[">:h a[</a></td>
</tr>
<tr>
<td> <code>a&lt;</code>, <code>a&gt;</code>, <code>i&lt;</code>, <code>i&gt;</code> </td>
<td> <code>&lt;</code>,<code>&gt;</code>ブロック，またはその内部を選択 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#a>&#8221;>:h a></a></td>
</tr>
<tr>
<td> <code>at</code>, <code>it</code> </td>
<td> (xml, html)のタグブロック，またはその内部を選択．<strong>t</strong>ag block から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#at">:h at</a> <a href="http://vim-jp.org/vimdoc-ja/motion.html#it">:h it</a></td>
</tr>
<tr>
<td> <code>a"</code>, <code>a'</code>, <code>a`</code>, <code>i"</code>, <code>i'</code>, <code>i`</code> </td>
<td> 前の引用符から次の引用符まで, またはその内部を選択</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/motion.html#aquote">:h aquote</a></td>
</tr>
<tr>
<td> <code>gn</code> </td>
<td> 最後に使われた検索パターンを前方/後方検索してマッチを選択. <strong>g</strong> prefix + <code>n</code>, <code>N</code>から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/visual.html#gn">:h gn</a> <a href="http://vim-jp.org/vimdoc-ja/visual.html#gN">:h gN</a></td>
</tr>
</tbody>
</table>


<p>テキストオブジェクトの部分をハイライトした例
<img src="https://raw.githubusercontent.com/haya14busa/i/b61a096517e2f4b358da17724dc833104c5973f3/misc/textobjects-example.gif" alt="textobjects-example.gif (1366×721)" /></p>

<p>削除オペレータとの組み合わせ例</p>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 動作      </th>
</tr>
</thead>
<tbody>
<tr>
<td> &ldquo;dl&rdquo; </td>
<td> 1文字削除 (&ldquo;x&rdquo; と同じです)</td>
</tr>
<tr>
<td> &ldquo;diw&rdquo; </td>
<td> inner word を削除</td>
</tr>
<tr>
<td> &ldquo;daw&rdquo; </td>
<td> a word を削除</td>
</tr>
<tr>
<td> &ldquo;diW&rdquo; </td>
<td> inner WORD を削除 (参照: |WORD|)</td>
</tr>
<tr>
<td> &ldquo;daW&rdquo; </td>
<td> a WORD を削除 (参照: |WORD|)</td>
</tr>
<tr>
<td> &ldquo;dgn&rdquo; </td>
<td> 次に検索パターンにマッチするものを削除</td>
</tr>
<tr>
<td> &ldquo;dd&rdquo; </td>
<td> 1行削除</td>
</tr>
<tr>
<td> &ldquo;dis&rdquo; </td>
<td> inner sentence を削除</td>
</tr>
<tr>
<td> &ldquo;das&rdquo; </td>
<td> a sentence を削除</td>
</tr>
<tr>
<td> &ldquo;dib&rdquo; </td>
<td> inner &lsquo;(&rsquo; &lsquo;)&rsquo; block を削除</td>
</tr>
<tr>
<td> &ldquo;dab&rdquo; </td>
<td> a &lsquo;(&rsquo; &lsquo;)&rsquo; block を削除</td>
</tr>
<tr>
<td> &ldquo;dip&rdquo; </td>
<td> inner paragraph を削除</td>
</tr>
<tr>
<td> &ldquo;dap&rdquo; </td>
<td> a paragraph を削除</td>
</tr>
<tr>
<td> &ldquo;diB&rdquo; </td>
<td> inner &lsquo;{&rsquo; &lsquo;}&rsquo; Block を削除</td>
</tr>
<tr>
<td> &ldquo;daB&rdquo; </td>
<td> a &lsquo;{&rsquo; &lsquo;}&rsquo; Block を削除</td>
</tr>
</tbody>
</table>


<h2>検索コマンド</h2>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>/</code> </td>
<td> 前方検索．由来はナゾ </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/pattern.html#/">:h /</a></td>
</tr>
<tr>
<td> <code>?</code> </td>
<td> 後方検索．<code>SHIFT</code> + <code>/</code> で<code>/</code>の逆から </td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html#?">:h ?</a></td>
</tr>
<tr>
<td> <code>n</code> </td>
<td> 最後の &ldquo;/&rdquo; か &ldquo;?&rdquo; を [count] 回繰り返す．<strong>n</strong>ext から</td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html#n">:h n</a></td>
</tr>
<tr>
<td> <code>N</code> </td>
<td> 最後の &ldquo;/&rdquo; か &ldquo;?&rdquo; を逆方向に [count] 回繰り返す．<code>n</code>の大文字で<code>n</code>の逆 </td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html#N">:h N</a></td>
</tr>
<tr>
<td> <code>*</code> </td>
<td> カーソルに最も近い単語で前方検索．USキーボードで4段目右手の中指 </td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html#*">:h *</a></td>
</tr>
<tr>
<td> <code>#</code> </td>
<td> カーソルに最も近い単語で後方検索．USキーボードで4段目左手の中指 </td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html##">:h #</a></td>
</tr>
<tr>
<td> <code>g*</code> <code>g#</code> </td>
<td> <code>*</code>, <code>#</code> の&#8221;\&lt;&ldquo; と &rdquo;>&ldquo;(単語区切り)を加えないバージョン </td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html#g*">:h g*</a></td>
</tr>
<tr>
<td> <code>gd</code> </td>
<td> カーソルからローカル宣言を検索．<strong>g</strong>oto + <strong>d</strong>eclaration から.</td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html#gd">:h gd</a></td>
</tr>
<tr>
<td> <code>gD</code> </td>
<td> カーソルからグローバル宣言を検索．<code>gd</code>の大文字バージョン</td>
<td>  <a href="http://vim-jp.org/vimdoc-ja/pattern.html#gD">:h gD</a></td>
</tr>
</tbody>
</table>


<h2>スクロールコマンド</h2>

<h3>上/下方スクロール</h3>

<pre><code class="``">                                 +----------------+
                                 | some text      |
                                 | some text      |
                                 | some text      |
  +---------------+              | some text      |
  | some text     |  CTRL-U  --&gt; |                |
  |               |              | 123456         |
  | 123456        |              +----------------+
  | 7890          |
  |               |              +----------------+
  | example       |  CTRL-D --&gt;  | 7890           |
  +---------------+              |                |
                                 | example        |
                                 | example        |
                                 | example        |
                                 | example        |
                                 +----------------+
</code></pre>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>CTRL-E</code> </td>
<td> 下へ[count]行ウィンドウをスクロール．<strong>E</strong>xtra lines から(vimdocでは割増との訳注あり. 追加の行?) </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#CTRL-E">:h CTRL-E</a></td>
</tr>
<tr>
<td> <code>CTRL-Y</code> </td>
<td> 上へ[count]行ウィンドウをスクロール．由来ナゾ&hellip; </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#CTRL-Y">:h CTRL-Y</a></td>
</tr>
<tr>
<td> <code>CTRL-D</code> </td>
<td> ウィンドウをバッファ内で下にスクリーンの半分スクロールする．Scroll <strong>D</strong>ownwards から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#CTRL-D">:h CTRL-D</a></td>
</tr>
<tr>
<td> <code>CTRL-U</code> </td>
<td> ウィンドウをバッファ内で上にスクリーンの半分スクロールする．Scroll <strong>U</strong>pwards から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#CTRL-U">:h CTRL-U</a></td>
</tr>
<tr>
<td> <code>CTRL-F</code> </td>
<td> ページ前方(下方)にスクロール．Scroll <strong>F</strong>orwards から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#CTRL-F">:h CTRL-F</a></td>
</tr>
<tr>
<td> <code>CTRL-B</code> </td>
<td> ページ後方(上方)にスクロール．Scroll <strong>B</strong>ackwards から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#CTRL-B">:h CTRL-B</a></td>
</tr>
</tbody>
</table>


<h3>カーソル相関スクロール</h3>

<pre><code class="``">  +------------------+            +------------------+
  | some text        |            | some text        |
  | some text        |            | some text        |
  | some text        |            | some text        |
  | some text        |  zz  --&gt;   | line with cursor |
  | some text        |            | some text        |
  | some text        |            | some text        |
  | line with cursor |            | some text        |
  +------------------+            +------------------+
</code></pre>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>zt</code> </td>
<td> [count]行(省略時はカーソルのある行)をウィンドウの最上行にして再描画. <strong>z</strong> prefix + <strong>t</strong>op of window から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#zt">:h zt</a></td>
</tr>
<tr>
<td> <code>zz</code> </td>
<td> [count]行(省略時はカーソルのある行)をウィンドウの中央にして再描画. 由来はナゾ&hellip; </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#zz">:h zz</a></td>
</tr>
<tr>
<td> <code>zb</code> </td>
<td> [count]行(省略時はカーソルのある行)をウィンドウの最下行にして再描画. <strong>z</strong> prefix + <strong>b</strong>ottom of window から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/scroll.html#zz">:h zz</a></td>
</tr>
</tbody>
</table>


<h2>折畳コマンド</h2>

<p>全ての折畳コマンドは <code>z</code> で始まっている．<code>z</code> は紙片を折った様子を横からみた姿に見える．</p>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>zf</code> </td>
<td> 折畳を作成する．(再掲) <code>f</code>は折りたたみを作成するのが一番基本コマンドと考えて<strong>f</strong>oldから?</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zf">:h zf</a></td>
</tr>
<tr>
<td> <code>zd</code> </td>
<td> 折畳を1つ削除する． <strong>d</strong>elete から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zd">:h zd</a></td>
</tr>
<tr>
<td> <code>zD</code> </td>
<td> 折畳を再帰的に削除する． 折りたたみコマンドにおける大文字は&#8221;再帰的&#8221;, &ldquo;すべて&#8221;といった意味合いのものが多い</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zD">:h zD</a></td>
</tr>
<tr>
<td> <code>zE</code> </td>
<td> 折畳をすべて削除する． <strong>E</strong>liminate から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zE">:h zE</a></td>
</tr>
<tr>
<td> <code>zo</code> </td>
<td> 折畳を1つ開く． <strong>o</strong>pen から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zo">:h zo</a></td>
</tr>
<tr>
<td> <code>zO</code> </td>
<td> 折畳を再帰的に開く． <code>zo</code>の大文字版</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zo">:h zO</a></td>
</tr>
<tr>
<td> <code>zc</code> </td>
<td> 折畳を1つ閉じる． <strong>c</strong>lose から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zc">:h zc</a></td>
</tr>
<tr>
<td> <code>zC</code> </td>
<td> 折畳を再帰的に閉じる． <code>zc</code>の大文字版</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zo">:h zC</a></td>
</tr>
<tr>
<td> <code>za</code> </td>
<td> 折畳をトグル(開いていたら閉じ，閉じていたら開く)． 由来はナゾ&hellip;</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#za">:h za</a></td>
</tr>
<tr>
<td> <code>zA</code> </td>
<td> 折畳を再帰的にトグル． <code>za</code>の大文字版</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#za">:h za</a></td>
</tr>
<tr>
<td> <code>zv</code> </td>
<td> カーソルのある行がちょうど表示されるレベルまで折畳を開く. <strong>V</strong>iew cursor から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zv">:h zv</a></td>
</tr>
<tr>
<td> <code>zx</code>, <code>zX</code> </td>
<td> 折畳を更新する. 由来はナゾ&hellip;というかそもそもhelp読んでも動作がいまいちわからない&hellip; </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zx">:h zx</a></td>
</tr>
<tr>
<td> <code>zm</code> </td>
<td> 折畳をより閉じる(&lsquo;foldlevel&rsquo; を1減少させる) Fold <strong>M</strong>ore から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zm">:h zm</a></td>
</tr>
<tr>
<td> <code>zM</code> </td>
<td> 全ての折畳を閉じる(&lsquo;foldlevel&rsquo; に0を設定する) <code>zm</code> の大文字版 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zM">:h zM</a></td>
</tr>
<tr>
<td> <code>zr</code> </td>
<td> 折畳をより開く(&lsquo;foldlevel&rsquo; を1増加させる) <strong>R</strong>educe folding から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zr">:h zr</a></td>
</tr>
<tr>
<td> <code>zR</code> </td>
<td> 全ての折畳を開く(&lsquo;foldlevel&rsquo; に最大の折畳レベルを設定する) <code>zr</code> の大文字版 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zR">:h zR</a></td>
</tr>
<tr>
<td> <code>zn</code> </td>
<td> 折畳しない(&lsquo;foldenable&rsquo; をリセットする。全ての折畳が開かれる) Fold <strong>n</strong>one から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zn">:h zn</a></td>
</tr>
<tr>
<td> <code>zN</code> </td>
<td> 折畳する(&lsquo;foldenable&rsquo; をセットする。全ての折畳が &lsquo;foldenable&#8217;がリセットされる以前と同様になる) Fold <strong>n</strong>ormalから．しかし<strong>n</strong>が2つあって正直意味ない&hellip;</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zN">:h zN</a></td>
</tr>
<tr>
<td> <code>zi</code> </td>
<td> &lsquo;foldenable&rsquo; を反転する． <strong>I</strong>nvert から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zi">:h zi</a></td>
</tr>
<tr>
<td> <code>[z</code>, <code>]z</code> </td>
<td> 現在の開いている折畳の先頭/末尾へ移動する．角括弧コマンド(<a href="http://vim-jp.org/vimdoc-ja/vimindex.html#[">:h [</a>)は似た動作をする </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#z[">:h z[</a></td>
</tr>
<tr>
<td> <code>zj</code> </td>
<td> カーソルより下方の折畳へ移動. 折りたたみにおける<code>hjkl</code>の<code>j</code>移動 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zj">:h zj</a></td>
</tr>
<tr>
<td> <code>zk</code> </td>
<td> カーソルより上方の折畳へ移動. 折りたたみにおける<code>hjkl</code>の<code>k</code>移動 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/fold.html#zk">:h zk</a></td>
</tr>
</tbody>
</table>


<p>(<code>zx</code>とか<code>zn</code>,<code>zN</code>などは覚えなくてもたいていの動作に支障ないのではという気がする．．．)</p>

<h2>undo と redo のコマンド</h2>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>u</code> </td>
<td> [count] 個の変更を元に戻す．<strong>u</strong>ndo から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/undo.html#u">:h u</a></td>
</tr>
<tr>
<td> <code>CTRL-R</code> </td>
<td> undo された変更を [count] 個やり直す．<strong>r</strong>edo から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/undo.html#CTRL-R">:h CTRL-R</a></td>
</tr>
</tbody>
</table>


<h2>ビジュアルモード</h2>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>v</code> </td>
<td> 文字単位のビジュアルモードを開始する．<strong>v</strong>isualから </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/visual.html#v">:h v</a></td>
</tr>
<tr>
<td> <code>V</code> </td>
<td> 行単位のビジュアルモードを開始する．<code>v</code>の大文字版 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/visual.html#V">:h V</a></td>
</tr>
<tr>
<td> <code>CTRL-V</code> </td>
<td> 矩形ビジュアルモードを開始する．<code>v</code>のctrl版 </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/visual.html#CTRL-V">:h CTRL-V</a></td>
</tr>
<tr>
<td> <code>gv</code> </td>
<td> 最後に使用したのと同じ範囲のビジュアルモードを開始する. <strong>g</strong>otoか単なるprefix. 最後に入力がされた場所にテキストを入力する<code>gi</code>のヴィジュアル版と言える </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/visual.html#gv">:h gv</a></td>
</tr>
<tr>
<td> <code>v_o</code> </td>
<td> 選択されたテキストのもう一方の端へ移動する．Go to <strong>o</strong>ther end of highlighted text から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/visual.html#v_o">:h v_o</a></td>
</tr>
<tr>
<td> <code>v_O</code> </td>
<td> 選択されたテキストのもう一方の端へ移動する．矩形選択では行内のもう一方のコーナーに移動する．Go to <strong>o</strong>ther end of highlighted text から</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/visual.html#v_O">:h v_O</a></td>
</tr>
</tbody>
</table>


<h2>その他</h2>

<p>すべてのコマンドを体型的に網羅するとを諦めてその他で残りの言及すべきっぽいコマンドをいっしょくたにまとめる男の姿がそこにはあった&hellip;</p>

<table>
<thead>
<tr>
<th> コマンド </th>
<th> 説明と由来      </th>
<th> help </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>CTRL-W</code> + &ldquo;?&rdquo; </td>
<td>ウィンドウコマンド. <strong>W</strong>indow commandsから. Windowの操作や&#8221;?&ldquo;の結果を新規ウィンドウで開いたりする</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/vimindex.html#CTRL-W">:h CTRL-W</a></td>
</tr>
<tr>
<td> <code>i_CTRL-R</code> <code>c_CTRL-R</code> </td>
<td>レジスタの内容を挿入する. <strong>R</strong>egisterから</td>
<td> <a href="http://vim-jp.org/vimdoc-ja/insert.html#i_CTRL-R">:h i_CTRL-R</a></td>
</tr>
<tr>
<td> <code>gf</code> </td>
<td> カーソルの下か後ろの名前のファイルを編集する． <strong>g</strong>oto <strong>f</strong>ile から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/editing.html#gf">:h gf</a></td>
</tr>
<tr>
<td> <code>K</code> </td>
<td> カーソル位置のキーワードを調べるためのプログラムを実行．<strong>K</strong>eyword から </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/various.html#K">:h K</a></td>
</tr>
<tr>
<td> <code>q</code> </td>
<td> タイプした文字をレジスタ{0-9a-zA-Z&#8221;}にレコーディングする．特に覚え方は見つからなかったが，macro -> ma<strong>q</strong>ro みたいな覚え方もあり&hellip;? </td>
<td> <a href="http://vim-jp.org/vimdoc-ja/repeat.html#q">:h q</a></td>
</tr>
</tbody>
</table>


<h2>おわりに，そして覚えるのもよいけれど&hellip;</h2>

<p>以上で本記事のコマンドの覚え方大全は終了です．
ここまで読んだ方お疲れ様です．そして「アレ&hellip;?まだまだあるはずじゃない?」と思ったそこのあなた，正解です．
挿入モード，コマンドモードのコマンドはほとんどかけてないですし，単純に抜けてるものもあるかと思います．
チカラ付きました&hellip;  ただこう理解するとわかりやすいよ〜というコマンドはなるべく網羅したような気がします．
もっとこれ追加しろとかあったらコメントかtwitterか何かで言っていただけると嬉しいです．
そしてVimを始めたころの初々しい気持ちを忘れていて，いやもっとここ丁寧に書かなきゃわからんぜ!ってとこも遠慮無くおねがいします．</p>

<p>そして覚えるのも大事ですが，それと同じくらいわからないことをドキュメントから調べる力を
つけるのも重要かなぁと思います．最初は覚えられなくても調べることができればかなり便利です．
たとえば <code>:help</code>だけでなく<code>:helpgrep</code>を使いこなしたり,
<a href="http://vim-jp.org/vimdoc-ja/index.html#help-context">:h help-context</a> を読んで引きたい項目の指定ができるようになるとはかどります．
(他にも<code>(</code>を末尾につけることで関数のヘルプを引くといった書いてないプチハックとかもあります)</p>

<table>
<thead>
<tr>
<th> 種類                     </th>
<th> 修飾子                         </th>
<th> 例                  </th>
</tr>
</thead>
<tbody>
<tr>
<td> ノーマルモードコマンド   </td>
<td> (無し)                         </td>
<td> <code>:help x</code>           </td>
</tr>
<tr>
<td> ビジュアルモードコマンド </td>
<td> <code>v_</code>                           </td>
<td> <code>:help v_u</code>         </td>
</tr>
<tr>
<td> 挿入モードコマンド       </td>
<td> <code>i_</code>                           </td>
<td> <code>:help i_&lt;Esc&gt;</code>     </td>
</tr>
<tr>
<td> コマンドラインコマンド   </td>
<td> <code>:</code>                            </td>
<td> <code>:help :quit</code>       </td>
</tr>
<tr>
<td> コマンドライン編集       </td>
<td> <code>c_</code>                           </td>
<td> <code>:help c_&lt;Del&gt;</code>     </td>
</tr>
<tr>
<td> Vim の起動引数           </td>
<td> <code>-</code>                            </td>
<td> <code>:help -r</code>          </td>
</tr>
<tr>
<td> オプション               </td>
<td> <code>'</code>                            </td>
<td> <code>:help 'textwidth'</code> </td>
</tr>
<tr>
<td> 正規表現                 </td>
<td> <code>/</code>                            </td>
<td> <code>:help /[</code>          </td>
</tr>
</tbody>
</table>


<p>僕が思うhelp周辺の便利ツールとかは <a href="http://haya14busa.com/reading-vim-help/">Vimのhelpを快適に引こう - haya14busa</a> にまとめているのでよかった読んでみてください．</p>

<p>おわり．</p>

<p><strong>Vim のコマンドを覚えて思考のスピードで編集しましょう!!!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブログを書くまでが #yapcasia なのでブログでLT発表して感想かく ― Vim駆動学習]]></title>
    <link href="http://haya14busa.com/yapcasia-2015/"/>
    <updated>2015-08-23T10:24:12+09:00</updated>
    <id>http://haya14busa.com/yapcasia-2015</id>
    <content type="html"><![CDATA[<p>YAPC::Asia 2015 に1日目・2日目と参加してきました．</p>

<h2>ブログを書くまでがYAPCで，LTしてみたかったならやぷしー終了するまでにブログで発表すればいいじゃない</h2>

<p>YAPC 2015 初めての参加でしたが一言で言うと<strong>最高</strong>でした!!! 刺激になるトーク多すぎました．</p>

<p>ただひとつ悔やまれるのは1日目の前日くらいに勢いでLT応募したけど，そのまま勢いで落ちたのでﾁｮｯﾄ発表してみたかった&hellip;倍率高すぎる〜</p>

<p>(本当に悔やまれるのはトラック被って見れなかった裏トラックを見れてないということで，資料とかまとめとかYouTube見ていくゾ!!!)</p>

<p>&hellip;ところで，YAPCはブログを書くまで終わらないんだからブログでLTしたかった内容発表すれば，
それはもうYAPCでLTしたことになるのでは&hellip;!?!?!?(混乱)</p>

<p>と考えたのでブログで発表したかった資料をあげる最高にカッコワルイことを今からします．
その後参加記みたいな何かを書いています．</p>

<p>いろいろと，読む前でも読んだ上でも思うことはあると思いますが自分でも思うことはあるので
察してそっとしておいてください!! いろいろと反省はしている．</p>

<h2>Vim 駆動学習</h2>

<script async class="speakerdeck-embed" data-id="62d0b9127b664ae5aad0e14742371fcc" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<ul>
<li><a href="http://yapcasia.org/2015/talk/show/8f1aad32-474d-11e5-a80e-c7de7d574c3a">Vim 駆動学習 - YAPC::Asia Tokyo 2015</a></li>
<li><a href="https://speakerdeck.com/haya14busa/vim-driven-learning">Vim Driven Learning // Speaker Deck</a></li>
</ul>


<p>※ 1箇所gifが表現できないのでクリックして見てと言っているけどSpeaker Deckだとクリックできないのでスルーしてください(PDFをダウンロードすれば一応クリックできるけど)</p>

<h2>LT説明や資料の反省とか．あと参考記事</h2>

<p>エモイ話だ&hellip;</p>

<p>基本的にはこれまでにどこかでアウトプットした内容で，なるべくそうならないように意識はしてたのだけど，
説明文とか内容とか何か聴衆に有益情報話すというより，単なる自分語り感が強すぎるのがｳｰﾝっていう感じだと思っています．</p>

<p>まぁ技術的な説明とかは他の人のほうが断然できるはずだし，
僕ができるのは僕の経験を話すこと．それが一番僕にしかできない発表で，
そこで何か聴衆に響かせることができたらいいなって考えたのでこういった内容になってます．</p>

<p>内容がだいたいどこかで以前アウトプットしたものになった原因は，これまで基本的には記事書くようにしていたからっていうことや，
聴衆がどうよりも経験としてYAPCみたいな舞台で発表したいというエゴによって自分のなかでGoサインが勢いで出てしまった感じになってます．</p>

<p>資料できてここまで書いて思ったけどたぶん落ちてよかったんじゃないかなぁみたいな思いもある．
普通に5minオーバーすると思うし．</p>

<p>これからまた頑張っていくゾイ!!!</p>

<h3>参考記事</h3>

<p>だいたい僕のブログ読んでたらLT資料読まなくてもだいたいわかる感じになっている．
もし興味出たっていう優しいかたは気になった記事を読んでいただけると少し詳しく書かれています．</p>

<ul>
<li>全体:

<ul>
<li><a href="http://haya14busa.com/vim_driven_learning/">1年間『Vim駆動学習』してきて最高に楽しかったのでオススメしたい - haya14busa</a></li>
<li><a href="http://haya14busa.com/haya14busa-s-happy-vimming-year-2014/">2014年の振り返り. またはプログラミング2年目をVimに捧げるとこうなるという話 - haya14busa</a></li>
</ul>
</li>
<li>vim-easymotionの話: <a href="http://haya14busa.com/mastering-vim-easymotion/">Vim-EasyMotionでカーソル移動を爆速にして生産性をもっと向上させる - haya14busa</a></li>
<li>incsearch.vimの話:

<ul>
<li><a href="http://haya14busa.com/enrich-your-search-experience-with-incsearch-vim/">incsearch.vimでVimの検索体験をリッチにする - haya14busa</a></li>
<li><a href="http://haya14busa.com/incsearch-dot-vim-ver-2/">Vimの検索はもっともっと便利になる! incsearch.vim v2.0 をリリースしました - haya14busa</a></li>
</ul>
</li>
<li>おもしろ開発系:

<ul>
<li><a href="https://github.com/haya14busa/eew.vim">緊急地震速報 on Vim</a> とか <a href="https://github.com/haya14busa/niconicomment.vim">Vimでニコニコlikeコメント</a> は記事は書いてなくてTwitterでやってた</li>
</ul>
</li>
<li>Vim script へ移植

<ul>
<li>underscore.vim は記事かいてなかった&hellip;</li>
<li>Vim版power-assert: <a href="http://haya14busa.com/vim-vital-power-assert/">Vim script版 power-assert! テスト書いてないとかお前それ Vim script の前でも同じこと言えんの? - haya14busa</a></li>
</ul>
</li>
</ul>


<p>自分の LT のくだり終了．</p>

<h2>YAPC::Asia 2015 Day1 感想</h2>

<h3>聴いたTalkと感想</h3>

<p>1日目は朝5時半くらいから起きて東京に向かったのでなかなか大変でしたが，早起きチャレンジ成功してよかった．</p>

<h4>1) <a href="http://yapcasia.org/2015/talk/show/a636430c-0fbf-11e5-8a02-43ec7d574c3a">メリークリスマス！ - YAPC::Asia Tokyo 2015</a></h4>

<p>perl を書いたことは無かったけど歌って踊るラリーウォールみれてよかった．
perl6 面白そうなようなので(又聞き)，クリスマス期待．</p>

<h4>2) <a href="http://yapcasia.org/2015/talk/show/9ec2791c-05e5-11e5-81fa-79c97d574c3a">世界展開する大規模ウェブサービスのデプロイを支える技術 - YAPC::Asia Tokyo 2015</a></h4>

<p>Miiverse のデプロイを支える技術の話だった．海を超えたgit pullとかその不可を抑えるためのランダムスリープみたいな
つらい話からはじまって，それを解決していった話が聞けました．
大規模ウェブサービスのデプロイ，やったこと一切なくてあまり個人の実感がわかないのでムズカシイけどこういう話も勉強していきたい．</p>

<h4>3) <a href="http://yapcasia.org/2015/talk/show/cc0ec485-1879-11e5-aca1-525412004261">TBD - YAPC::Asia Tokyo 2015</a></h4>

<p>Rubyのパパ Matz が Rubyの話しを封印したと思ったら10分で封印を解いたり，
Ruby のディスと見せかけて間接的にperlディスってたりしておもしろかった．
内容も面白くて，主流のアーキテクチャが変わると言語デザインも変わってきて，それに対応してデザインされているのが streem ならしい．</p>

<h4>4) <a href="http://yapcasia.org/2015/talk/show/de9e7a1e-136d-11e5-a9fc-d9f87d574c3a">Perlの上にも三年 〜 ずっとイケてるサービスを作り続ける技術 〜 - YAPC::Asia Tokyo 2015</a></h4>

<p>おもしろトークだった上にめっちゃ開発の参考になる話が多かった．紹介されていた本読みたい -> <a href="http://hitode909.hatenablog.com/entry/yapc2015books">YAPCの発表で紹介した本 - hitode909の日記</a>．
DDDとかユビキタス言語の導入の話とかがとてもいい話で，僕もやっていきたい．
最近自分でもプログラムやドキュメントに書いてる単語がブレていたりするのを感じていて，
<code>ユビキタス言語.md</code> (ファイル名違う気がする) とかをリポジトリに置いて管理するのとかもよさそうと思った．</p>

<p>事前条件/事後条件とかあってそこで 責任外のことをチェックせずお互いを信頼するとスッキリするという話もなんとなくスッキリして面白かった．</p>

<h4>5) <a href="http://yapcasia.org/2015/talk/show/523b9508-0d77-11e5-8174-67dc7d574c3a">うっかりをなくす技術 - YAPC::Asia Tokyo 2015</a></h4>

<p>うっかりすることよくあるので，うっかりをなくす技術を聞きに行った．
assertion ライブラリ的なものを最近作っていたのでassertionの話とかもっと聞きたかった．契約プログラミングとか???(わかってない)
defer/guard object とかスゴイよさそうだった．golang に defer とかあるようだし，goやっていきたい．</p>

<p>追記: あとせっかくうっかりをなくす技術聴いたのに2日目に会場に荷物忘れるうっかりをやらかした． そしてこの文をブログに書くのを忘れるといううっかりもして，うっかりしないようにするのはムズカシイ&hellip;</p>

<h4>6) <a href="http://yapcasia.org/2015/talk/show/22957e9c-1872-11e5-aca1-525412004261">Lightning Talks Day 1 - YAPC::Asia Tokyo 2015</a></h4>

<p>Slack + Hubot でお前の一番好きな二次元嫁キャラと一緒に仕事をする 話とかが思考がぶっ飛んでいて面白かった．
PHPでregister_globalsの話をしてた方が最初に<a href="https://github.com/gongo/emacs-ikku">gongo/emacs-ikku</a>とか作っていて
「Vimでやらなきゃ&hellip;負けてられない&hellip;」とか考えていたけどまだできていない．</p>

<h2>YAPC::Asia 2015 Day2 感想</h2>

<h3>聴いたTalkと感想</h3>

<h4><a href="http://yapcasia.org/2015/talk/show/5b1cd536-07ed-11e5-9e42-79c97d574c3a">Mackerel開発におけるScalaとGo、そしてPerl - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>複数の言語，技術を用途によって適切に使い分けてるのがすごい．</li>
<li>Scalaのimplicit conversion の解決遅すぎ問題のつらさわかる〜みたいな気持ちになったりした．</li>
<li>ちょっと最初の10minくらい遅れていってしまってツライ&hellip;ちゃんと見直したい．</li>
</ul>


<h4><a href="http://yapcasia.org/2015/talk/show/f2816038-10ec-11e5-89bf-d7f07d574c3a">我々はどのように冗長化を失敗したのか - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>式年遷宮面白かった．</li>
<li>発表前から資料がアップロードされていてよさ．</li>
<li>冗長化ムズカシイ．</li>
</ul>


<h4><a href="http://yapcasia.org/2015/talk/show/0af26fe4-0b7b-11e5-a29c-67dc7d574c3a">MySQLで2億件のシリアルデータと格闘したチューニングの話 - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>自分にとっては難しかったのとあまり集中して聞けてなかったのであまり記憶がない&hellip;(LT採択どうかな〜みたいな気持ちで気が気じゃなかったのもある)</li>
<li>あとから資料見てみたい．</li>
</ul>


<h4><a href="http://yapcasia.org/2015/talk/show/bd04b86c-f9de-11e4-b996-8ab37d574c3a">Adventures in Refactoring - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>GitHubの中の人のリファクタリングの話でめっちゃよかった!!! リファクタリングしたい気持ちが高まりまくった．</li>
<li>リファクタリングは挙動を変えては行けなくて，それはバグも同じで一緒に修正したら問題の切り分けができなくてダメだよという話は，
わかるという思いと共に，そうは言ってもムズカシイので意識してデキルようにしていきたい．</li>
<li>リファクタリングをナゼするのかとか，成果を計測しなくてはならないというのは全然意識したことがなかった．資料とか見直しながらやっていきたい．</li>
<li>(変数・)メソッド名のアンダースコアはリファクタリングチャンス．なるほどという感じだった．</li>
<li>とにかくリファクタリングやっていくゾ!!!</li>
</ul>


<h4><a href="http://yapcasia.org/2015/talk/show/e466d60a-11db-11e5-b07b-d7f07d574c3a">Posture for Engineers - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>肩こりがひどいので姿勢の話を聞きに行った．</li>
<li>いくつかヨガのポーズみたいなものを教えてもらったので実践できればいいのだけどデキルだろうか&hellip;</li>
<li>バランスボールのって開発してたら逆に肩こりと首こりがヤバくなった経験があってすぐにやめちゃったのでいい座り方・使い方がしりたい．(質問しそこねた)</li>
</ul>


<h4><a href="http://yapcasia.org/2015/talk/show/b03162be-0052-11e5-ba92-89c77d574c3a">Run containerized workloads with Lattice - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>正直わからんかったマン(ムズカシイ&hellip;)</li>
</ul>


<h4><a href="http://yapcasia.org/2015/talk/show/6bde6c69-187a-11e5-aca1-525412004261">Profiling &amp; Optimizing in Go - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>とにかくライブコーディングがカッコヨサで Go の標準で提供されている tool すごい強いし，コンパイル速くて書きやすそうだし，
まだ Go はかけてないけど，Go 書いていくゾ！という気持ちになった． Go 書き始めたらまた参照して学んで行きたい．</li>
</ul>


<h4><a href="http://yapcasia.org/2015/talk/show/69caedbd-1872-11e5-aca1-525412004261">Lightning Talks Day 2 - YAPC::Asia Tokyo 2015</a></h4>

<ul>
<li>どのLT もこれぞLTってカンジで良かった&hellip;あんなLTできるようになりたい．</li>
<li><a href="https://twitter.com/orga_chem">@orga_chem</a> さんの Vim script 静的解析の闇がトリで Vim script の闇を暴露していていい話だった．
Vim script はああいった感じでカワイイのでぜひ興味を持った皆さんには vint のチカラを借りながら Vim script を書いてみて欲しい．
基本静的解析のときツライという話で，<code>v:count</code>, 関数と変数のネームスペース， <code>map()</code> の引数とかが文字列って以外は普通に書いてるときの
闇としては避けられそう．(十分多い&hellip;???)</li>
</ul>


<h2>個人的な悔やまれることとか</h2>

<ul>
<li>最近Vim版power-assert作って補足して頂いたりしたので <a href="https://twitter.com/t_wada">@t_wada</a> さんに会ってご挨拶くらいしておきたかった．
Vim版 power-assert もっと便利にしておきたい．</li>
<li>世界の <a href="https://twitter.com/miyagawa">@miyagawa</a> さんを見かけて Rebuild.fm 大好きでめっちゃ聴いてますって言ってみたかったけど，誰かと話されていて，
Rebuild.fm 聴いてますとか耳たこかもしれないし，その後何か話せるか考えたけど訳分からんくておそらく Rebuild.fm で
Vim とかエディタの話をしてほしいとかは言わないまでも，Vimmerのゲスト増やしてくださいみたいな困らせるようなことを喋りそうで
そうこう言ってるうちに機会が過ぎてしまった&hellip;フベン&hellip;</li>
<li>Twitter のタイムラインを見る限り，オープンインターネッツ上で見たことあるひとがたくさんいたけど，現実の顔と一致しなくて結局
会わずじまいな人が多かったのでまた何かの機会にお会いしたい．会えたひとも何人かいてそれはよかった．</li>
<li>発表しようと思うならもっと早めに用意しないと，僕のレベルだと時間をいっぱいかけてやっと聴くに耐えるものになるかどうかギリギリみたいな
感じだと思うし，ちゃんと準備したい．</li>
</ul>


<h2>全体的に</h2>

<p>YAPC::Asia 2015，YAPC初めての参加でしたが本当に最高でした!!!
同時通訳の方の同時通訳がすごくて圧巻されたり，会場のWifiはあの人数だったのに個人的にはほとんど繋がっていて CONBU さん凄かった．
無限に湧き出てくるコーヒーも美味しかったし，懇親会も豪華だしスポンサーの皆様ありがとうございました．</p>

<p>そして発表者の皆様，<a href="https://twitter.com/lestrrat">@lestrrat</a>さんをはじめとした運営の皆様，他の参加者の方々，
(漏れていたとしたらその方々!)， 最高のYAPC本当にありがとうございました．楽しかったです!!!</p>

<p>絶対来年も参加したい！！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim script版 power-assert! テスト書いてないとかお前それ Vim script の前でも同じこと言えんの?]]></title>
    <link href="http://haya14busa.com/vim-vital-power-assert/"/>
    <updated>2015-08-19T22:13:51+09:00</updated>
    <id>http://haya14busa.com/vim-vital-power-assert</id>
    <content type="html"><![CDATA[<h2>Vim script で最高の assertion 体験，vital-power-assert を作りました</h2>

<p><a href="https://gyazo.com/d044f6e7135cfb4314a0d88f0d02e572"><img src="https://i.gyazo.com/d044f6e7135cfb4314a0d88f0d02e572.png" alt="Gyazo" /></a></p>

<div class="github-card" data-github="haya14busa/vital-power-assert" data-width="500" data-height="150" data-theme="default"></div>


<p><a href="https://github.com/haya14busa/vital-power-assert">haya14busa/vital-power-assert</a></p>

<blockquote><p><strong>テスト書いてないとかお前それ Vim script の前でも同じこと言えんの?</strong></p></blockquote>

<p>ということで Vim script 版 power-assert, vital-power-assert を作りました.</p>

<p>Vim script でも power-assert できてテストをバリバリ書けるんだから
Vim で書いてる他の言語でテスト書いてないとか Vim が泣いちゃいますね&hellip;(煽り，そしてブーメラン)</p>

<h3>使い方とか <strong>力こそパワー!! 百聞よりパワー!!</strong></h3>

<p>使っている様子です</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>" in your vimrc
</span><span class='line'>NeoBundle 'vim-jp/vital.vim'
</span><span class='line'>NeoBundle 'haya14busa/vital-vimlcompiler'
</span><span class='line'>NeoBundle 'haya14busa/vital-power-assert'</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let s:V = vital#of('vital')
</span><span class='line'>let s:PowerAssert = s:V.import('Vim.PowerAssert')
</span><span class='line'>let s:assert = s:PowerAssert.assert
</span><span class='line'>execute s:PowerAssert.define('PowerAssert')
</span><span class='line'>function! s:power_assert() abort
</span><span class='line'>  let x = { 'ary': [1, 2, 3], 'power': 'assert' }
</span><span class='line'>  let l:zero = 0
</span><span class='line'>  let s:two = 2
</span><span class='line'>  PowerAssert index(x.ary, l:zero) is# s:two
</span><span class='line'>  " or
</span><span class='line'>  execute s:assert('index(x.ary, l:zero) is# s:two')
</span><span class='line'>endfunction
</span><span class='line'>call s:power_assert()</span></code></pre></td></tr></table></div></figure>


<p>上記コードを実行するとこうなります．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vital: PowerAssert:
</span><span class='line'>index(x.ary, l:zero) is# s:two
</span><span class='line'>     |||     |       |   |
</span><span class='line'>     |||     |       |   2
</span><span class='line'>     |||     |       0
</span><span class='line'>     |||     0
</span><span class='line'>     ||[1, 2, 3]
</span><span class='line'>     |{'ary': [1, 2, 3], 'power': 'assert'}
</span><span class='line'>     -1</span></code></pre></td></tr></table></div></figure>


<p>インストールや詳しい使い方は GitHub/help を参照してください．</p>

<p>-> <a href="https://github.com/haya14busa/vital-power-assert">haya14busa/vital-power-assert</a></p>

<p>基本的に関数とコマンドのassert方法を用意しているのですが，プラグインのコードに残しておいたりするものは
関数の <code>.assert()</code>, Vimのテスティングフレームワークで使う際などはコマンドでやることを推奨してます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>" 関数で assert. 引数は文字列として渡す必要がある
</span><span class='line'>execute s:assert('index(x.ary, l:zero) is# s:two')
</span><span class='line'>" コマンドで assert. 文字列で囲う必要がないのでシンタックスハイライトも効く
</span><span class='line'>PowerAssert index(x.ary, l:zero) is# s:two</span></code></pre></td></tr></table></div></figure>


<p>両者ともデバッグ用変数をONにしないとassertは実行されないので，プラグインに埋め込んでおいても
プラグインのユーザが使ってる時は発動しないし，評価なにもされないのでコードに残しておいても
問題ないようになっています．(コマンドの方はユーザのVimにコマンドが新たに定義されてしまうので推奨しません)</p>

<h2>power-assert 最高! 一番好きな assertion ライブラリです！</h2>

<p>vital-power-assert はもちろん JavaScript の assertion ライブラリである
<a href="https://github.com/power-assert-js/power-assert">https://github.com/power-assert-js/power-assert</a>
にインスパイアされて作っています．</p>

<p>何がベンリなのかとかは <a href="https://twitter.com/t_wada">@t_wada</a>さんが本家のpower-assertの紹介とかで
各所で説明なされているので説明は不要だとおもいますが，</p>

<p>個人的にはやはり</p>

<ol>
<li>assert 失敗時の式がどうなってるか一目瞭然のグラフィカルな見た目</li>
<li>たくさんの matcher を一つ一つ憶えたりドキュメントを見なくても <code>assert</code> 一つだけ知ってれば使える優しさ</li>
</ol>


<p>あたりのよさが使ってみて，開発してみて本当によいなと思います．</p>

<p>マッチャーは自然言語的な書き方ができたり，
テストのコード自体が間違えにくいみたいなところがよいとチラッと聞いたことがありますが
僕は断然power-assertのほうが好きという思いが強まりました (間違ってたり他にもある場合は教えてください)</p>

<h2>Vim script 版 vital-power-assert のよさ</h2>

<p>(このあたりは特に Vim script 書いてる人/興味あるひと向けです)</p>

<p>power-assert としてのよさはもちろんのところ，
Vim script の assertion ライブラリとしての vital-power-assert
のいいところがあります．</p>

<p>それはassertionを実行する際のスコープが assert する行と
同じなので， スクリプトローカル変数やローカル関数など何でもassert する
式の中で使えるということです!!! (わかりづらい)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:let s:x = 2
</span><span class='line'>:PowerAssert s:x == 1
</span><span class='line'>" or
</span><span class='line'>:execute s:assert('s:x == 1')
</span><span class='line'>" =&gt; ちゃんとs:xも使える
</span><span class='line'>"   s:x == 1
</span><span class='line'>"   |   |
</span><span class='line'>"   |   0
</span><span class='line'>"   2</span></code></pre></td></tr></table></div></figure>


<p>例えば Vimのテスティングフレームワークの一つの <a href="https://github.com/thinca/vim-themis">thinca/vim-themis</a>
の assert コマンドではスクリプトローカル変数が使えなくて不便&hellip;ということがあったりするのですが
vital-power-assert を使えばそのあたりを気にせず使うことができます．ベンリ．</p>

<h2>どうやって実装しているか</h2>

<h3>Vim script のパース &amp; コンパイル</h3>

<ul>
<li><a href="https://github.com/ynkdir/vim-vimlparser">ynkdir/vim-vimlparser</a></li>
<li><a href="https://github.com/haya14busa/vital-vimlcompiler">haya14busa/vital-vimlcompiler</a></li>
</ul>


<p>power-assert のようにassert が失敗したときに式中のそれぞれの変数や関数，
演算子の評価結果を得るためにはまず与えられた式をパースする必要があります．
そこでは Vim script で Vim script をパースできる <a href="https://github.com/ynkdir/vim-vimlparser">ynkdir/vim-vimlparser</a>
を使用させていただいています． 使っていて改めて ynkdir さんすごすぎる&hellip;</p>

<p>vitalのライブラリとして使うために<a href="https://github.com/haya14busa/vital-vimlcompiler">haya14busa/vital-vimlcompiler</a>にバンドルしちゃっています．(ライセンス的に問題なさそうだったのでynkdirさんに相談するまえに衝動的にVim版power-assertを作ってしまいました&hellip;ｽｲﾏｾﾝ)</p>

<p>とにかく，vimlparser のおかげでVim scriptをパースしてASTを得ることができたので，
あとはASTをトラバースして評価したいノードを集めることができました．</p>

<h3>そして再コンパイル</h3>

<p>あとは集めたASTのノードの式中の位置を記録，
そしてASTをVim scriptに戻してスコープに気を付けながら評価すれば必要なものが揃います．</p>

<p>vimlparser に付属している <code>Compiler</code> オブジェクトはS式的なものにコンパイルするものだったので，
Vim scriptにコンパイルする <a href="https://github.com/haya14busa/vital-vimlcompiler">haya14busa/vital-vimlcompiler</a>
というライブラリを作って使用しています．</p>

<p>注意点としてまだ<code>expr</code>のコンパイルしか実装してないので関数とかはコンパイルできないです．
ドキュメントもないし今のところ完全に vital-power-assert 用になっていますが，何かできたら面白そう．</p>

<h3>Vim script スコープハック</h3>

<p>Vim のコマンドの引数は<code>String</code>として渡されてその場で評価しているわけではないので
普通にやるとスクリプトローカル変数が無いと怒られます．
もちろん文字列で受け取って <code>eval()</code> してもスコープは変わってるので対応できません．</p>

<p>これを完全に解消するためにはassertする行と同じ位置で評価する必要がありますが，
そこで <code>execute</code> を使うことによって実現しています．</p>

<p>どういうことかというと，<code>{rhs}</code> である <code>s:assert('...')</code> が評価され返り値が帰ってくるのですが，
その返り値に実行したいコマンドを文字列として返すと <code>:execute</code>によってそのコマンドが同じスコープで
実行できて&hellip; という感じで実装しております．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:execute s:assert('x == 1')
</span><span class='line'>" -&gt;
</span><span class='line'>:execute 'execute' "s:assert2(x == 1, 'x == 1')"
</span><span class='line'>" -&gt; {expr} と 文字列の '{expr}' を別の関数に渡し直す
</span><span class='line'>:execute s:assert2(x == 1, 'x == 1')
</span><span class='line'>" -&gt; 評価したいノードリストを引数にとる関数を返す
</span><span class='line'>:execute 'execute' "s:assert3('x == 1', [{pos: `xの位置`, value: x}])"
</span><span class='line'>" -&gt; { "value": x } で xが評価される
</span><span class='line'>:execute s:assert3('x == 1', [{"pos": `xの位置`, "value": x}])
</span><span class='line'>" -&gt; 実はこのあとここで `:throw` コマンドを返してthrowすることによってエラー位置をこの行にしたり...
</span><span class='line'>:throw ...</span></code></pre></td></tr></table></div></figure>


<p>コマンドも基本は同じでコマンドの<code>{rhs}</code>が<code>execute</code>になってるのですが，
どうしてもスクリプトローカル変数だけはコマンドを定義したファイルの方で評価されてしまうので
ファイルごとにコマンドは定義する必要があるのはこれが理由です．</p>

<p>つまりスクリプトローカル変数諦めるなら一回定義すればあとは同じように使えますが
そもそもコマンドは雑な開発用スクリプトとかテスティングフレームワークで使うことを想定しているので
そんな感じで察してください．</p>

<h3>グラフィカルな描画</h3>

<p>ところで見た目とユーザの驚き的には power-assert のあのグラフィカルな表示を作るところが華と見ることもできそうですが，
今のところとりあえず線が被らない最低限のアルゴリズムで作っているのでもっと改善した表示ができると思います．</p>

<p>もしいい感じのグラフ描画のアルゴリズムわかる人は僕に教えてくださると大変ウレシイです</p>

<h2>最後に</h2>

<p>勢いでﾜｰッと作っていてまだまだ改善点はあるのですが，一通り開発してテストしてる限りではめっちゃよい感じに動くので Vim script 書いてる方や興味あるかたは是非使って見ていただけると嬉しいです．</p>

<p>あと themis との連携を書いてますが，別に themis の作者である
<a href="https://github.com/thinca">thinca</a> さんに使い方とか確認をとったわけでもないので
もしかしたらもうちょっと良く出来たりするかもしれません．</p>

<p>フィードバックとか使い方の質問とか
github: <a href="https://github.com/haya14busa/vital-power-assert">https://github.com/haya14busa/vital-power-assert</a> ,
twitter: <a href="https://twitter.com/haya14busa">https://twitter.com/haya14busa</a> ,
Lingr: <a href="http://lingr.com/room/vim">http://lingr.com/room/vim</a>
あたりにいただけると嬉しさあります．</p>

<p><strong>Vim script でも power-assert して最高の assertion 書いていくゾ!!!</strong></p>

<script src="http://lab.lepture.com/github-cards/widget.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimの検索はもっともっと便利になる! incsearch.vim v2.0 をリリースしました]]></title>
    <link href="http://haya14busa.com/incsearch-dot-vim-ver-2/"/>
    <updated>2015-07-06T01:34:01+09:00</updated>
    <id>http://haya14busa.com/incsearch-dot-vim-ver-2</id>
    <content type="html"><![CDATA[<div class="github-card" data-github="haya14busa/incsearch.vim" data-width="500" data-height="150" data-theme="default"></div>


<p><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></p>

<p>incsearch.vim について知らないかたはこちらの記事を参照してください．
簡単に言えばVimのインクリメンタル検索をカイゼンするプラグインです．
-> <a href="http://haya14busa.com/enrich-your-search-experience-with-incsearch-vim/">incsearch.vimでVimの検索体験をリッチにする - haya14busa</a></p>

<h2>incsearch.vim v2.0 をリリースした!</h2>

<p>v0.9, v1.0, v1.1, v1.2, &hellip; とこれまで incsearch.vim をインクリメンタルにカイゼンにカイゼンを重ねてきました&hellip;
そして本日， incsearch.vim は晴れて一段階進化し， バージョン2.0 となりました!</p>

<p>この進化を一言で言えば，incsearch.vim はもっともっと Vim の検索を便利にすべく <strong>進化・拡張可能</strong> になりました．</p>

<h2>2.0で何ができるようになったか?</h2>

<p>百聞は一見に如かず．以下のgifとともに拡張プラグイン達をご覧ください!</p>

<h3>曖昧検索 | fuzzy search</h3>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/incsearch.vim/extensions/incsearch-fuzzy.gif" alt="incsearch-fuzzy.gif" /></p>

<ul>
<li>GitHub: <a href="https://github.com/haya14busa/incsearch-fuzzy.vim">haya14busa/incsearch-fuzzy.vim</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;haya14busa/incsearch-fuzzy.vim&#39;</span>
</span><span class='line'><span class="c">&quot; マッピング例</span>
</span><span class='line'>map z<span class="sr">/ &lt;Plug&gt;(incsearch-fuzzy-/</span><span class="p">)</span>
</span><span class='line'>map z? <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>fuzzy<span class="p">-</span>?<span class="p">)</span>
</span><span class='line'>map zg/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>fuzzy<span class="p">-</span>stay<span class="p">)</span>
</span><span class='line'><span class="c">&quot; サクッとためす</span>
</span><span class='line'><span class="c">&quot; :call incsearch#call(incsearch#config#fuzzy#make())</span>
</span></code></pre></td></tr></table></div></figure>


<h3>曖昧スペル検索 | fuzzy spell search</h3>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/incsearch.vim/extensions/incsearch-fuzzyspell.gif" alt="incsearch-fuzzyspell.gif" /></p>

<ul>
<li>GitHub: <a href="https://github.com/haya14busa/incsearch-fuzzy.vim">haya14busa/incsearch-fuzzy.vim</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;haya14busa/incsearch-fuzzy.vim&#39;</span>
</span><span class='line'><span class="c">&quot; マッピング例</span>
</span><span class='line'>map z<span class="sr">/ &lt;Plug&gt;(incsearch-fuzzyspell-/</span><span class="p">)</span>
</span><span class='line'>map z? <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>fuzzyspell<span class="p">-</span>?<span class="p">)</span>
</span><span class='line'>map zg/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>fuzzyspell<span class="p">-</span>stay<span class="p">)</span>
</span><span class='line'><span class="c">&quot; サクッとためす</span>
</span><span class='line'><span class="c">&quot; :call incsearch#call(incsearch#config#fuzzyspell#make())</span>
</span></code></pre></td></tr></table></div></figure>


<h3>高速でインクリメンタルなmigemo検索 | migemo search</h3>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/incsearch.vim/extensions/incsearch-migemo.gif" alt="incsearch-migemo.gif" /></p>

<ul>
<li>GitHub: <a href="https://github.com/haya14busa/incsearch-migemo.vim">haya14busa/incsearch-migemo.vim</a></li>
<li>参照: <a href="http://0xcc.net/migemo/">Migemo: ローマ字のまま日本語をインクリメンタル検索</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;haya14busa/incsearch-migemo.vim&#39;</span>
</span><span class='line'><span class="c">&quot; マッピング例</span>
</span><span class='line'>map <span class="k">m</span><span class="sr">/ &lt;Plug&gt;(incsearch-migemo-/</span><span class="p">)</span>
</span><span class='line'>map <span class="k">m</span>? <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>migemo<span class="p">-</span>?<span class="p">)</span>
</span><span class='line'>map mg/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>migemo<span class="p">-</span>stay<span class="p">)</span>
</span><span class='line'><span class="c">&quot; サクッとためす</span>
</span><span class='line'><span class="c">&quot; :call incsearch#call(incsearch#config#migemo#make())</span>
</span></code></pre></td></tr></table></div></figure>


<h3>EasyMotion との連携 | integration with vim-easymotion</h3>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/incsearch.vim/extensions/incsearch-easymotion.gif" alt="incsearch-easymotion.gif" /></p>

<ul>
<li>GitHub:

<ul>
<li><a href="https://github.com/haya14busa/incsearch-easymotion.vim">haya14busa/incsearch-easymotion.vim</a></li>
<li><a href="https://github.com/easymotion/vim-easymotion">easymotion/vim-easymotion</a></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;haya14busa/incsearch-easymotion.vim&#39;</span>
</span><span class='line'><span class="c">&quot; マッピング例</span>
</span><span class='line'>map z<span class="sr">/ &lt;Plug&gt;(incsearch-easymotion-/</span><span class="p">)</span>
</span><span class='line'>map z? <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>easymotion<span class="p">-</span>?<span class="p">)</span>
</span><span class='line'>map zg/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>easymotion<span class="p">-</span>stay<span class="p">)</span>
</span><span class='line'><span class="c">&quot; サクッとためす</span>
</span><span class='line'><span class="c">&quot; :call incsearch#call(incsearch#config#easymotion#make())</span>
</span></code></pre></td></tr></table></div></figure>


<h3>拡張はcomposable!</h3>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/incsearch.vim/extensions/incsearch-fuzzy-easymotion.gif" alt="incsearch-fuzzy-easymotion.gif" />
incsearch.vim x fuzzy x easymotion</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; incsearch.vim x fuzzy x vim-easymotion</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:config_easyfuzzymotion<span class="p">(</span>...<span class="p">)</span> abort
</span><span class='line'>  <span class="k">return</span> extend<span class="p">(</span>copy<span class="p">(</span>{
</span><span class='line'>  \   <span class="s1">&#39;converters&#39;</span>: [<span class="nb">incsearch</span>#config#fuzzy#converter<span class="p">()</span>]<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;modules&#39;</span>: [<span class="nb">incsearch</span>#config#easymotion#module<span class="p">()</span>]<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;keymap&#39;</span>: {<span class="s2">&quot;\&lt;CR&gt;&quot;</span>: <span class="s1">&#39;&lt;Over&gt;(easymotion)&#39;</span>}<span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;is_expr&#39;</span>: <span class="m">0</span><span class="p">,</span>
</span><span class='line'>  \   <span class="s1">&#39;is_stay&#39;</span>: <span class="m">1</span>
</span><span class='line'>  \ }<span class="p">),</span> <span class="k">get</span><span class="p">(</span><span class="k">a</span>:<span class="p">,</span> <span class="m">1</span><span class="p">,</span> {}<span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> <span class="p">&lt;</span>Space<span class="p">&gt;</span>/ <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>config_easyfuzzymotion<span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h2>仕組み</h2>

<h3>converter 機能</h3>

<ul>
<li><code>:h incsearch-config-converters</code></li>
</ul>


<p>バージョン2.0でのメイン追加機能，パターンコンバート機能です．
入力したパターンを変換して正規表現を返すコンバーター(複数可)を指定することによって，
入力した正規表現だけでなく，変換された正規表現も追加で検索してくれます．</p>

<p>fuzzy, fuzzyspell, migemo の拡張はどれもこの新たに入った仕組み，converter機能を使っています．</p>

<p>他にも スネークケースとキャメルケースを相互変換してどちらも検索できるようにするとか，
<code>{a,b}</code>を<code>\(a\|b\)</code>に変換するようなオレオレ簡易正規表現シンタックス(?)シュガーを作るとか，
inputを受け取って正規表現を返すというシンプルな機能ながら，活用可能性はたくさんあります！
(※  これらはそのうち実装していくと思います)</p>

<h3>module 機能</h3>

<ul>
<li>GitHub: <a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a></li>
<li><code>:h incsearch-config-modules</code></li>
<li><code>:h Vital.Over.Commandline-modules</code></li>
</ul>


<p>vital-over という incsearch.vim が使用しているライブラリにおけるモジュールを追加できる機能です．
これがどんなことができて，どうやって作ればいいかといったことはそれだけで別の一つの記事どころか数十記事書ける内容なので割愛しますが，
かなりいろんなことができるようになるはずです．(が，その分何でもできすぎるので注意は必要そうですが)．</p>

<p><a href="https://github.com/haya14busa/incsearch-easymotion.vim">haya14busa/incsearch-easymotion.vim</a>
がこの機能を使って検索後に <a href="https://github.com/easymotion/vim-easymotion">easymotion/vim-easymotion</a> の機能を呼び出しています．</p>

<h2>自分で拡張を作ることも可能！※ ただしAPIが固まってるとは言ってない</h2>

<p>もちろんもっと便利な拡張を自分で作っていくことも可能です．
ここでは例としてちょっとした <code>converter</code> を作ってみましょう</p>

<h3>参照</h3>

<ul>
<li><code>:h incsearch#go()</code></li>
<li><code>:h incsearch-config()</code></li>
</ul>


<h3>仕様</h3>

<ul>
<li>正規表現をエスケープして単なる文字列として返し，検索する．</li>
<li>つまりは<code>\V</code>の機能．ただし，普通の正規表現に<strong>加えて</strong>検索できるところが違う．</li>
</ul>


<h3>実装</h3>

<p><code>pattern</code> を受け取って正規表現を返す関数 (<code>s:noregexp()</code>) を実装して，
<code>incsearch#go()</code>に渡すconfigの<code>converters</code>として渡してあげるだけ．
※ converterオブジェクトを作って渡してあげる方法もありますが，現時点では関数を渡してできること大差ない．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:noregexp<span class="p">(</span>pattern<span class="p">)</span> abort
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;\V&#39;</span> . escape<span class="p">(</span><span class="k">a</span>:pattern<span class="p">,</span> <span class="s1">&#39;\&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:config<span class="p">()</span> abort
</span><span class='line'>  <span class="k">return</span> {<span class="s1">&#39;converters&#39;</span>: [<span class="k">function</span><span class="p">(</span><span class="s1">&#39;s:noregexp&#39;</span><span class="p">)</span>]}
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> z/ <span class="nb">incsearch</span>#<span class="k">go</span><span class="p">(&lt;</span>SID<span class="p">&gt;</span>config<span class="p">())</span>
</span><span class='line'><span class="c">&quot; 例: /\vpattern と検索したら \vpattern がマッチする．普通の検索なら pattern だけ</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>めっちゃ簡単!!!</strong></p>

<h2>Special Thanks</h2>

<p>おしょーさん(<a href="https://github.com/osyo-manga">github@osyo-manga</a>)のライブラリには
毎度お世話になっており，incsearch.vim v2.0 はコマンドラインライブラリである
<a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a> の拡張性があってこそ
リリースできたことだったり，cmigemoコマンドでも高速に migemo 検索できるのはそのまま
<a href="https://github.com/osyo-manga/vital-migemo">osyo-manga/vital-migemo</a> のおかげだったりします．</p>

<p>また <a href="http://lingr.com/room/vim/">Lingrのvim部屋</a> でもincsearch.vimの開発に関わる質問をしたりして参考にしたりフィードバックをもらったりしました．
皆さんありがとうございますっ！</p>

<h2>終わりに．そして次のカイゼンへ&hellip;</h2>

<p>incsearch.vim はシンプルかつVimデフォルトの検索と同じように快適に使用できるオススメプラグインです．
それがバージョン2.0 になり，望めばもっともっと便利に，拡張可能なものになりました．
気になった方は是非つかってみてください．</p>

<p>そして incsearch.vim にはまだまだ改善点があるかと思います(ｼﾞｯｻｲあります)．
なにか見つけた方や「おまえーっ&hellip;APIがなーっ&hellip;ふわふわでなぁーっ&hellip;使いにくくてなーっ&hellip;ゆるさーん(バシーン)」
という方は <a href="https://github.com/haya14busa/incsearch.vim/issues">Issues</a> や
<a href="https://twitter.com/haya14busa">twitter:@haya14busa</a>, はたまた <a href="http://lingr.com/room/vim/">Lingrのvim部屋</a>
あたりなどでフィードバックいただければカイゼンしていきたいと思うのでよろしくお願いしますっ</p>

<div class="github-card" data-github="haya14busa/incsearch.vim" data-width="500" data-height="150" data-theme="default"></div>


<p><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></p>

<script src="http://lab.lepture.com/github-cards/widget.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年の振り返り. またはプログラミング2年目をVimに捧げるとこうなるという話]]></title>
    <link href="http://haya14busa.com/haya14busa-s-happy-vimming-year-2014/"/>
    <updated>2014-12-30T00:00:00+09:00</updated>
    <id>http://haya14busa.com/haya14busa-s-happy-vimming-year-2014</id>
    <content type="html"><![CDATA[<h2>この記事について</h2>

<p>この記事は <a href="http://qiita.com/advent-calendar/2014/vim">Vim Advent Calendar 2014</a> の30日目かもしれません(または来年, Vim記事集約系のイベントやりたいという気持ちの1つです).</p>

<p>今年の2月に <a href="http://haya14busa.com/vim_driven_learning/">1年間『Vim駆動学習』してきて最高に楽しかったのでオススメしたい - haya14busa</a> というVim歴換算で1年を振り返ったエントリーを書いたのですが, 今回は2014年を振り返ってみたら, やっぱりVim活たのしかったなぁという日記的エントリーです.</p>

<p>また思い返してみると僕がプログラミング始めたのは2年と少し前だったので, 2014年はプログラミング2年目の年でもありました.
この文脈でみると<strong>「プログラミング2年目をVimに捧げるとどうなるか?」</strong> というエントリーとも言えそうです. (※1年目からかなりの割合をVimに捧げていました)</p>

<h2>2014年, 今年のVim活を振り返る</h2>

<p>※Vim活が9割です</p>

<h3>カーソル移動系人気プラグインの vim-easymotion の開発を乗っ取った!</h3>

<div class="github-card" data-github="Lokaltog/vim-easymotion" data-width="400" data-height="153" data-theme="default"></div>


<p><img src="../images/easymotion/20141230_easymotion_contribution_graph.png" alt="20141230_easymotion_contribution_graph" />
<img src="../images/gif/easymotion_on_speed_ex.gif" alt="easymotion_on_speed_ex" /></p>

<ul>
<li><a href="https://github.com/Lokaltog/vim-easymotion">Lokaltog/vim-easymotion</a></li>
<li><a href="https://github.com/haya14busa/vim-easyoperator-phrase">haya14busa/vim-easyoperator-phrase</a></li>
<li><a href="https://github.com/haya14busa/vim-easyoperator-line">haya14busa/vim-easyoperator-line</a></li>
<li>ブログ記事: <a href="http://haya14busa.com/mastering-vim-easymotion/">Vim-EasyMotionでカーソル移動を爆速にして生産性をもっと向上させる - haya14busa</a></li>
<li>執筆時GitHubスター数: 1556</li>
</ul>


<p>これは2013年の後半からforkして活動していて, 今年の2月くらいに起こった出来事なのですでに下記の記事に少し感想を書いています.</p>

<p>-> <a href="http://haya14busa.com/vim_driven_learning/">1年間『Vim駆動学習』してきて最高に楽しかったのでオススメしたい - haya14busa</a></p>

<p>記事執筆現在, GitHub のStar数 1556 で, 開発を引き継いだ時点での Star数は 1000 にちょっと届かない程度でした.
もともとほっといた場合の伸び具合がどれくらいかはわからないですが, 自分が引き継いだ時点で Star数 約1000 のリポジトリが, さらに500強増えたという事実は本当に嬉しいです.
GitHub Star 500+ めでたい.</p>

<p>これだけ 「たくさんのスター数がついている≒たくさんの人に使っていただけている」 プロジェクトを開発 &amp; メンテするというのはなかなかに学ぶことがおおくてとても楽しかったです.
今後はリファクタリング含めもっと便利にしたいなぁと思っているんですが, そう思ってから半年くらい経過しております(すでに十分に便利&amp;安定してきているのでモチベが低い).</p>

<h3>最高の検索体験を提供したい! incsearch.vim つくった</h3>

<div class="github-card" data-github="haya14busa/incsearch.vim" data-width="400" data-height="153" data-theme="default"></div>


<p><img src="../images/gif/incsearch/incremental_regex_building.gif" alt="incremental_regex_building" /></p>

<ul>
<li><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></li>
<li><a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a></li>
<li>ブログ記事: <a href="http://haya14busa.com/enrich-your-search-experience-with-incsearch-vim/">incsearch.vimでVimの検索体験をリッチにする - haya14busa</a>

<ul>
<li><a href="http://qiita.com/advent-calendar/2014/vim">Vim Advent Calendar 2014</a> の 14日目の記事でもあります</li>
</ul>
</li>
<li>執筆時GitHubスター数: 231</li>
</ul>


<p>今年の前半がvim-easymotionだとしたら, 後半はほとんど incsearch.vim でした.
実はこのプラグインは最初はサクッと気晴らしにつくったぜーというレベルのものだったのですが,
なんだかんだちゃんとしたものにしようという流れになり目一杯頑張りました.</p>

<p>また使用しているライブラリの <a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a>
にもコントリビューションという名のリクエスト丸投げや, 設計についてコメント, ダメダメな Pull Request
を交えながらいろいろ関わらせていただきました.
おしょーさんありがとうございます, 迷惑いっぱいかけてスイマセンッ, これからもよろしくお願いします..!</p>

<p>便利さの9割は vital-over のおかげなのですが, 自分が1から開発してるリポジトリーでスター数3桁を達成してこれもまた非常に嬉しいです. これもめでたい.</p>

<p>GitHubの VimL trending で Repositories &amp; Developers の両方で1位も獲得できました&hellip;! 嬉しさ.</p>

<p><img src="../images/github/github-trending-viml-today-incsearch-2014-10-21%2009:26:33.png" alt="github-trending-viml-today-incsearch" />
<img src="../images/github/github-developer-today-vimL-2014-10-22%2022:51:58.png" alt="github-developer-today-vimL-2014-10-22 22:51:58" /></p>

<h3>VimConf 2014 で発表した</h3>

<ul>
<li><a href="http://vimconf.vim-jp.org/2014/">VimConf 2014</a></li>
<li>皆さんの発表などなど: <a href="http://vimconf.vim-jp.org/2014/reports/">Reports - VimConf 2014</a></li>
<li>ブログ記事: <a href="http://haya14busa.com/vimconf2014/">VimConf2014 で検索とその拡張について発表した - haya14busa</a></li>
<li>スライド: <a href="https://docs.google.com/presentation/d/1ie2VCSt9onXmoY3v_zxJdMjYJSbAelVR-QExdUQK-Tw/pub">/-improved</a></li>
<li>発表動画: <a href="https://www.youtube.com/watch?v=yB1H5V8e1j4&amp;list=PLx8bw5NQypsnuX8NJPRHvURhXqj2NUnGZ&amp;index=12">/-improved #VimConf2014 - YouTube</a></li>
</ul>


<p>VimConf2014 という感極まるVimのカンファレンスが今年も開催されたのですが, そこでLT枠で発表させていただきました.
Vimの便利な検索機能と上述した incsearch.vim の紹介をしました. 発表グダったりもしましたが, よかったという反応をいただけたり, スライドを英語で書いたので英語圏の人にも見てもらって便利さを伝えられたのは良かったです. 英語というより gif をふんだんに活用したので伝わったという説もある.
(<a href="http://usevim.com/2014/11/14/vimconf/">usevim</a>, <a href="http://www.reddit.com/r/vim/comments/2lwrv0/vimconf_2014_reports/">reddit</a> )</p>

<p>ちなみに動画はテンパッて間違ったことも多々言ってるので鵜呑みにしないでください&hellip; この辺慣れるには場数を踏む必要がありそう</p>

<h3>最高の検索体験を提供したい + α!. vim-asterisk 勢いでつくった</h3>

<div class="github-card" data-github="haya14busa/vim-asterisk" data-width="400" data-height="153" data-theme="default"></div>


<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/vim-asterisk/asterisk_z_star.gif" alt="asterisk_z_star" /></p>

<ul>
<li><a href="https://github.com/haya14busa/vim-asterisk">haya14busa/vim-asterisk</a></li>
<li>執筆時GitHubスター数: 34</li>
</ul>


<p>Vim の <code>*</code> ってとても便利なのですが, 自分のユースケースとしては次のマッチにジャンプして欲しくないという不満があったので, そこを解消するために作りました.
<code>*</code> からの <code>gn</code> テキストオブジェクト活用でスムーズに編集できるようになってとても気に入っています.</p>

<p>結構小さいプラグインではあるのですが, 今まで得たVim scriptの知識や経験をたくさん使っていたり, ビジュアルモードにおける <code>*</code> 機能は <a href="https://github.com/thinca/vim-visualstar">thinca/vim-visualstar</a> の部分をお借りしたり, マルチバイトの扱いを<a href="https://github.com/haya14busa/vim-asterisk/pulls?q=is%3Apr+is%3Aclosed">プルリク</a>貰って直したりとなかなかよさ気なものになりました.</p>

<p>実は似たような機能を提供してるプラグインはいくつかあるのですが, どれも不満がまだありました(Vimの検索機能周りの拡張は結構落とし穴が多い).
incsearch.vim の経験などが活きて落とし穴はうまく回避できました. 気になった方は是非使ってみてください.</p>

<h3>vimrc 読書会にいっぱい参加 &amp; 管理のデータ化・自動化 &amp; 統計ページ をつくった</h3>

<ul>
<li><a href="http://vim-jp.org/reading-vimrc/">vimrc読書会</a></li>
<li><a href="http://vim-jp.org/reading-vimrc/stat/#/">vimrc読書会 Stat</a></li>
<li>ブログ記事: <a href="http://haya14busa.com/reading-vimrc-stat/">vimrc読書会Stat作った - haya14busa</a></li>
<li><a href="http://vim-jp.org/reading-vimrc/stat/#/u/haya14busa">たくさん参加してる様子</a></li>
</ul>


<p>確か管理者権限貰ったのは恐らく今年(すこしあやしい&hellip;厳密には去年だったかも&hellip;)で, 参加するだけでなくちょっとずつ運営面でも関わらせていただきました.
Jekyll を覚えて 読書会のデータを yaml でデータ化したり,
そのデータを使って Angularとd3.jsで 読書会の統計ページをつくったり,
データ化によって扱いやすくなったので python や ruby で簡単なスクリプトを作成して更新作業を自動化したりしました.
読書会は毎週やるので更新が一瞬でできるようになって非常に便利になりました. 統計ページのJS, よくない部分多々あるのでそのうち書き直したい.</p>

<p><strong>毎週土曜日23:00からやっているので皆さん参加しましょう!</strong> -> <a href="http://lingr.com/signup?letmein=vim">http://lingr.com/signup?letmein=vim</a></p>

<h3>Vim プラグイン読書会やってた</h3>

<ul>
<li><a href="http://haya14busa.github.io/reading-vimplugin/">Vimプラグイン読書会</a></li>
</ul>


<p>こちらも1ヶ月周期でやっていました. Vim プラグイン開発, 興味ある. という方にオススメです! 一緒に読みましょう.
またvimrc読書会とVim プラグイン読書会での経験が, Vim以外の普段の開発のレビューにも活かされたような気も&hellip;しま&hellip;す(自信なし).</p>

<p>執筆時現在次の日付が更新されてないという少々のグダりを見せていますが, 落ち着いたら必ず更新します!</p>

<h3>Osaka.vim やで</h3>

<ul>
<li><a href="http://osaka-vim.connpass.com/">Osaka.vim - connpass</a></li>
<li>ブログ記事: <a href="http://localhost:4000/osaka-vim-01/">Osaka.vim #1 に行ってきた - haya14busa</a></li>
</ul>


<p><strong>connpass上では運営になっていますが一切の運営をしていません&hellip;!</strong></p>

<p>関西のVim勉強会, 近年ではほとんどなかったので便利. 関西の皆さん参加しましょう.</p>

<h3>Vimで緊急地震速報が見れるの便利では&hellip;? eew.vim つくった</h3>

<ul>
<li><a href="https://github.com/haya14busa/eew.vim">haya14busa/eew.vim</a></li>
<li>Emacs移植: <a href="http://d.hatena.ne.jp/syohex/20140829/1409291511">eew.vimを移植しました - Life is very short</a></li>
<li>Sublime移植: <a href="https://github.com/tgfjt/Sublime-eew">tgfjt/Sublime-eew</a></li>
</ul>


<blockquote class="twitter-tweet" lang="en"><p>総務省の某審議会のエライ人が「家でテレビで録画を見ていた際、緊急地震速報が出なかった。なんとかならないのか」との意見を述べ、プチ衝撃が走っているらしい。ｗｗｗ 確かに、テレビ見てることには変わりないけれど。</p>&mdash; 閑居 (@doatease2313) <a href="https://twitter.com/doatease2313/status/504522127622418434">August 27, 2014</a></blockquote>


<blockquote class="twitter-tweet" data-cards="hidden" lang="en"><p>とりあえずでつくった <a href="https://t.co/hQQuAnnF9M">https://t.co/hQQuAnnF9M</a> RT <a href="https://twitter.com/haya14busa">@haya14busa</a> Vimに緊急地震速報流すの便利なのでは！？！？！？</p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/505004191199162368">August 28, 2014</a></blockquote>


<p>EmacsやSublimeに移植されたりとちょっとだけ話題になった(すこし).</p>

<h3>その他ちっちゃい Vim plugin 達</h3>

<ul>
<li><a href="https://github.com/haya14busa/unite-ghq">haya14busa/unite-ghq</a>

<ul>
<li>uniteでghqできるの便利では&hellip;?と思ってつくって公開したら, そのわずか数時間前に sorah さんが <a href="https://github.com/sorah/unite-ghq">sorah/unite-ghq</a> を公開しており,
しかもこちらのほうが基本的によくできていて「ｱｱｱｯ&hellip;」とリアルで声がでた少し苦い思い出のあるプラグイン. 自分のバージョン使ってるの自分だけだとおもう. でも便利.
既存プラグインの検索は直前まで入念にやりましょうという教訓を得ました. (数日前にやった時点ではなかったので大丈夫だと思ってた)</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/unite-reading-vimrc">haya14busa/unite-reading-vimrc</a>

<ul>
<li>vimrc読書会のログやvimrcのリンクをuniteで絞り込んで開ける. たまに vimrc読書会 の管理とか過去の記録を見るときに便利.</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/endtagcomment.vim">haya14busa/endtagcomment.vim</a>

<ul>
<li>よくvimrcで見かけるhtmlタグにコメントをつけるスクリプトをforkしてプラグイン化しただけ. もともと便利</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/unite-action-vimfiler_lcd">haya14busa/unite-action-vimfiler_lcd</a>

<ul>
<li>vimfilerで<code>lcd</code>してから開くというuniteアクションが欲しかった. 結局つかってないのであまり便利じゃない.</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/vim-textobj-number">haya14busa/vim-textobj-number</a>

<ul>
<li>数字のテキストオブジェクト. たまに便利. テキストオブジェクト学ぶかぁーという意図も含まれてた気がするけど結局それ以降テキストオブジェクト系プラグインは作成してない. なにかアイデア湧いたら作りたい.</li>
</ul>
</li>
</ul>


<h2>Vim活以外の進捗(残りの1割)</h2>

<ul>
<li>プログラミングのバイトを4月からはじめました(たぶんVim活アピール補正はかかりました. ある意味 Vim script もペイする言語&hellip;?).</li>
<li>それに伴って Scala をやりはじめたんですが視野が広がってとてもよかったし, もっと学んでいきたいです.</li>
<li>JavaScript もそこそこ書いて, Angular.js に触れたりなどしました. underscore.js も便利.</li>
<li>しかし Scala その他 Vim 以外のOSS活動の進捗ﾀﾞﾒです</li>
<li>heroku にPythonで小さいウェッブアプリをつくったのですが, 乗っかってるサービスが終了したので一緒にお亡くなりになってつらい.</li>
</ul>


<h3>勉強会にちょっとずつ参加するようになった</h3>

<ul>
<li><a href="http://scalamatsuri.org/">Enjoy.scala ! 日本最大級の Scala のカンファレンス - ScalaMatsuri</a></li>
<li><a href="http://kansaifp.doorkeeper.jp/events/17206">関西関数型道場 - 第02回 - 関西関数型道場 | Doorkeeper</a></li>
<li><a href="http://fpscala-osaka.connpass.com/">fpscala-osaka - connpass</a></li>
</ul>


<p>Vim 以外の勉強会にも今年はちょっとずつ参加するようになりました(Vimも基本的には今年からですが). しかしこれは進捗でゎなぃな&hellip;</p>

<h2>その他</h2>

<h3>GitHub current streak 365 日達成した</h3>

<blockquote class="twitter-tweet" lang="en"><p>気づいたらGitHubｺﾝﾄﾘﾋﾞｭｯｼｮﾝ Current streak 365日を達成していたっ&#8230;!!! <a href="http://t.co/XMED6OLFUp">pic.twitter.com/XMED6OLFUp</a></p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/544899856037208065">December 16, 2014</a></blockquote>


<p>dotfile 1行変更といったものがたくさんあるので全く大したことはしてないのですが, 日によってはそのついでにちゃんとプログラミングするぞっ! というきっかけになるので自分には合ってる継続的進捗管理術でした. 1年継続めでたい.</p>

<h3>2014年 GitHub の Pull Requests / Issues 一覧</h3>

<p><em>追記:</em></p>

<ul>
<li><a href="https://github.com/pulls?q=is%3Apr+author%3Ahaya14busa+created%3A%222014-01-01+..+2015-01-01%22+">2014年に出した Pull Requests 一覧</a></li>
<li><a href="https://github.com/issues?q=is%3Aissue+author%3Ahaya14busa+created%3A%222014-01-01+..+2015-01-01%22+">2014年に開いた Issues 一覧</a></li>
</ul>


<p>PullRequest 8 opens / 83 closed, Issues 53 open / 95 closed ※99% Vimである</p>

<h3>Podcast 聴くようになった</h3>

<p>聴いてるPodcastは</p>

<ul>
<li><a href="http://rebuild.fm/">Rebuild</a></li>
<li><a href="http://mozaic.fm/">mozaic.fm</a></li>
<li><a href="https://itunes.apple.com/jp/podcast/bairingarunyusu-bilingual/id653415937?mt=2">バイリンガルニュース (Bilingual News)</a></li>
<li><a href="http://thechangelog.com/podcast/">The Changelog Podcast</a></li>
<li><a href="https://itunes.apple.com/us/podcast/the-binpress-podcast/id897178291?mt=2">The Binpress Podcast</a></li>
<li>その他適当に気になったもの.</li>
</ul>


<p>という感じです. 例に漏れず(?), Rebuild.fm から聴き始めてめっちゃおもしろいっ! となり, そこから バイリンガルニュース や The Changelog を聴くようになりました.
最近はずっと気になってはいたけど聞いていなかった mozaic.fm を聴くようになって, こちらも Rebuild とは別のベクトルのよさがあって全部聴きました. 技術系(?)英語 podcast の binpress podcast というポッドキャストは, 全部無料でスクリプトがついているという<em>エイゴ・ゼンゼン・キキトレナイ勢</em>としては歓喜のサービスがついていてお気に入りです. おもしろさは回によって違う感じですが, 英語もついでに学ぶかーという方にはオススメです.</p>

<p>リスニング能力高めてもっと英語のポッドキャストを楽しめるようになりたい&hellip;</p>

<h3>英語の記事をコンスタントに読む &amp; 検索するようになった</h3>

<ul>
<li><a href="http://www.reddit.com/r/vim/">reddit.com/r/vim</a></li>
<li><a href="https://news.ycombinator.com/">Hacker News</a></li>
<li><a href="https://medium.com/">Medium</a></li>
<li><a href="http://getprismatic.com/home">Prismatic</a></li>
</ul>


<p>1年目も別に避けたりはしてなかったのですが, 最近は能動的に英語の情報に触れようとする確率が高くなったかなと思います.
検索や話題になっている記事を除けば, 見ているのはだいたい上記のリンクです.
ただ単に読んでるだけではなかなか得るものも少ないので, 自分から英語で発信する能力をつけたいなーというのが最近の悩みです.
現状 GitHub の issue のやりとりやプラグインのドキュメントは基本英語を使ってるのですが, もっともっと使っていかないとなかなか身につかないですねー.</p>

<h2>来年の抱負とか</h2>

<ul>
<li>Vim もっと頑張る.</li>
<li>Vim のソースコード側も C言語ちょっとぐらい読み書きできるようになって簡単なバグくらいなら報告だけでなく修正案まで出せるようにしたい.</li>
<li>Vim 以外も頑張る. なにか小さなウェッブサービスとか適当につくったりしたい.</li>
<li>Scala力をより深めるのに加えて C, Go, Haskell あたりの言語を触って学んでいきたいという思いがある.</li>
<li>データベース周りとか, 今触ってるレイヤーと別の部分も触っていきたい. 最低限基礎力が欲しい.</li>
<li>英語力をつけていきたい. Vim について英語で適当に英語用Twitterアカウントつくってつぶやくとかなら継続してできるのでは&hellip;?という考えがある.
欲を言えば Lingr の Vim 部屋のノリで英語でチャットとかできれば一番いいんじゃないかという思いがある. IRC に #vim チャンネルあるらしいけど, IRCよくわからない&hellip;ログ読みたい&hellip;</li>
<li>人生は厳しいので人生についてちゃんと考える必要がある. 人生キビシイ.</li>
</ul>


<h2>「プログラミング2年目をVimに捧げるとどうなるか?」</h2>

<p>少々Vim以外の進捗が少なすぎる気がするのは反省ですが, Vim活によってVimというコンテキストに留まらず, たくさんの貴重な経験ができました.
git や GitHub, テスト, CI, オブジェクト指向やらクロージャ, 変数や関数の名前の付け方, 英語での技術系コミュニケーションなどなど, たくさんのことを Vim駆動で理解したり, 理解を深めた1年間だったと思います.</p>

<p>Vim駆動学習, よさがあるのでオススメです. ※ただし用法用量を守って正しく Vim 活しないと Vim 以外の進捗が遅れます. 反省&hellip;</p>

<p>また Vim だといろいろな言語を使ってる人がいて, しかも雲の上のような存在の人もたくさんいたり, オンラインでもオフラインの勉強会でも活動が活発なのでVim以外にもいろんなことが知れるし, プログラミング初学者でも最初から Vim をガンガン使ってプログラミングしていくのはおもしろいかなぁと思います.</p>

<p>振り返ってみるとたくさんのVimmerにお世話になったなぁと思います. ※もちろんVimmerでないひとにもお世話になりました.</p>

<p>みなさん今年はお世話になりました. 来年の2015年もぜひ仲良くしてください. よろしくお願いします.</p>

<p>以上, <a href="https://twitter.com/haya14busa">@haya14busa</a> の 2年目の<del>プログラミング</del> Vim活記録でした.</p>

<script src="http://lab.lepture.com/github-cards/widget.js"></script>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[incsearch.vimでVimの検索体験をリッチにする]]></title>
    <link href="http://haya14busa.com/enrich-your-search-experience-with-incsearch-vim/"/>
    <updated>2014-12-11T22:38:41+09:00</updated>
    <id>http://haya14busa.com/enrich-your-search-experience-with-incsearch-vim</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://qiita.com/advent-calendar/2014/vim">Vim Advent Calendar 2014</a>の14日目の記事です。
13日目は deris さんによる<a href="http://deris.hatenablog.jp/entry/2014/12/13/173125">スマートフォンでVimを操作するためにやっておいたほうがいいこと - derisの日記</a> でした。</p>

<h2>1. incsearch.vim つくった</h2>

<h3>Vimの検索体験をリッチにする, incsearch.vim を作りました</h3>

<div class="github-card" data-github="haya14busa/incsearch.vim" data-width="500" data-height="150" data-theme="default"></div>


<p><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></p>

<p><img src="../images/gif/incsearch/incremental_regex_building.gif" alt="incremental_regex_building" /></p>

<p><br></p>

<h3>あなたとincsearch.vim 今すぐインストール</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;haya14busa/incsearch.vim&#39;</span>
</span><span class='line'>Plugin <span class="s1">&#39;haya14busa/incsearch.vim&#39;</span>
</span><span class='line'>Plug <span class="s1">&#39;haya14busa/incsearch.vim&#39;</span>
</span><span class='line'>map /  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>forward<span class="p">)</span>
</span><span class='line'>map ?  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>backward<span class="p">)</span>
</span><span class='line'>map <span class="k">g</span>/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>stay<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>TL;DR</h3>

<ol>
<li>Vim デフォルトの検索だとインクリメンタルハイライトは1つのマッチしかみてくれない</li>
<li>incsearch.vim はマッチしたもの<strong>すべて</strong>をインクリメンタルにハイライトする</li>
<li>デフォルトのコマンドラインと高い<strong>互換性</strong>を持っているのでインストールしてデフォルトの<code>/</code>を置き換えてもスムーズかつ手軽に使える</li>
<li>本日バージョン1.0としてリリースしました</li>
<li>ぜひ使ってみてください&hellip;!</li>
</ol>


<p>※ ホントにToo long になった感があるので記事は長くて嫌いになってもincsearch.vimはシンプルに使えるので嫌いにならないでくださいっ&hellip;!</p>

<h2>2. Introduction</h2>

<p>Vimの検索を便利にする. incsearch.vim を バージョン 1.0 としてリリースしました!</p>

<p>「百聞は一見に如かず」ということで, 冒頭のgifなどを見ていただくだけで大事なことはすべて伝えつくしてしまった感があります.
「もう便利さはわかった!」 という方は記事なんてすっ飛ばして是非ブラウザバックして使ってみてください!</p>

<p>しかし今まで日本語でまともに解説したことがなかったこともあるので, ちょっとした便利機能やカスタマイズの仕方, 開発についてなど話していきたいと思います. もうすでに使っていたり, 聞いたりしたことあるよーという方も, 本日バージョン1.0としてリリースし, 以前から比べてインクリメンタルに改善してきたので少しは新しい情報もあるかなーと思います</p>

<h2>3. incsearch.vim の機能を解説していくっ!</h2>

<h3>3.1 シンプルにすべてをハイライトするっ</h3>

<ol>
<li>デフォルトの <a href="http://vim-jp.org/vimdoc-ja/options.html#%27incsearch%27">:h &lsquo;incsearch&rsquo;</a> とは違い, マッチしたパターンのすべてをハイライトする</li>
<li>別ウィンドウのハイライトも対応できる(オプションで変更可, version 1.0 で追加されました)</li>
</ol>


<p>一番シンプルかつメインの機能としてマッチしたパターンをすべてハイライトします.
便利さ, 自明っぽいので説明を省きます!</p>

<p><img src="../images/gif/incsearch/incsearch_window.gif" alt="incsearch_window" /></p>

<h3>3.2 正規表現をインテラクティブに作って確認する</h3>

<ol>
<li>デフォルトの検索だとエンターを押して<code>:set hlsearch</code> 状態になるまで, 現在入力している正規表現がどこにマッチしているかわからない</li>
<li>incsearch.vim はもちろん正規表現に対応しており, スムーズに正規表現を作っていける</li>
<li><code>&lt;Plug&gt;(incsearch-stay)</code> というマッピングを提供しており, これはカーソルが動かないので途中でウィンドウ外に飛ぶといったこともない</li>
</ol>


<p>マップ例:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map <span class="k">g</span>/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>stay<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="../images/gif/incsearch/incremental_regex_building.gif" alt="incremental_regex_building" /></p>

<p>(冒頭のgifと同じ)</p>

<p>これは vimrc によく書かれているプラグインマネージャが提供してるインストールコマンドから, インストールされているプラグインの部分とマッチする正規表現を作ってます(簡易版ですが). 普段の検索時にも勿論便利なのですが, 正規表現作る際の便利さは1つしかマッチを確認できないデフォルトの挙動と比べると段違いに捗ります. もしも incsearch.vim でデフォルトの検索を置き換えるまでもないかなーという人でも, 正規表現による検索の際のために<code>g/</code>など好みのマッピングに定義しておくとこういうケースでは便利に使えると思われます.</p>

<h3>3.3 検索中のインクリメンタルカーソル移動とスクロールで快適ファイル内検索</h3>

<ol>
<li>Emacsは検索中にカーソルを前後に動かせるけどVimにはない&hellip;

<ul>
<li>※ Vim には <code>n</code>/<code>N</code> があるので別になくてもよい</li>
</ul>
</li>
<li>incsearch.vim はデフォルトでは <code>&lt;Tab&gt;</code>/<code>&lt;S-Tab&gt;</code>で前後のマッチに移動できる</li>
<li>Emacsや他のエディタでは見ない機能としてスクロール機能を提供しており, 画面内に目的地がないと判断すれば一気にスキップして画面外の次のマッチに飛べる(デフォルトでは<code>&lt;C-j&gt;</code>/<code>&lt;C-k&gt;</code>)</li>
</ol>


<p><img src="../images/gif/incsearch/incremental_move_and_scroll.gif" alt="incremental_move_and_scroll" /></p>

<p><em>なにが便利か?</em></p>

<h4>a) オペレータ待機モード時のモーションとドットリピート</h4>

<p>ノーマルモードでは問題でもないですが, <code>d/{pattern}</code> といった オペレータ待機モード
で使う場合, 決定したあとに <code>n</code>/<code>N</code> を使うことはできません. しかし,
最初に目測でマッチを確認してからカウントをつけて <code>3d/{pattern}</code> とするのはとてもしんどい上に間違う可能性もあり, 生産的ではありません&hellip;</p>

<p>また1回だけの場合は ビジュアルモード を使えば上記の問題は回避できますが, これだとドットリピート が効きません.</p>

<p>そこで, incsearch.vim の <code>&lt;Tab&gt;</code>/<code>&lt;S-Tab&gt;</code> (<code>:h &lt;Over&gt;(incsearch-next)</code>) を使って
検索中にカーソルを移動させれば一目で目的地まであとどれくらいかもわかるし,
オペレータと組み合わせるモーションとしての使用も, その後のドットリピートの問題も解消できます.</p>

<h4>b) <code>:h jumplist</code> の更新が1回で済む</h4>

<p>ノーマルモードでは問題でもないといったな? あれは嘘だ!</p>

<p>Vimには <code>:h jump-motions</code> というモーションの種類があり, これに属するモーションを
行うとジャンプ前のカーソル位置が記憶され, <code>&lt;C-o&gt;</code>/<code>&lt;C-i&gt;</code> でそれらのカーソル位置を
行ったり来たりできる超便利機能が存在します. 検索系のモーション(<code>/</code>,<code>?</code>,<code>n</code>,<code>N</code>, etc..)
はこの jump-motions に属しており incsearch.vim でも勿論対応しているのでその機能を
バリバリ使うことができます.</p>

<p>ここで問題なのは <code>n</code>や<code>N</code> も jump-motions ということです. 検索後に <code>n</code>/<code>N</code>で移動したあとやっぱり検索した元の位置に戻りたいな〜という時に
<code>n</code>/<code>N</code> を押した回数分<code>&lt;C-o&gt;</code>を押す(またはカウントを前置する)必要があって地味に不便です.</p>

<p>incsearch.vim で検索中に<code>&lt;Tab&gt;</code>を押して移動してから検索を決定すれば勿論 <code>jumplist</code>
の更新は1回で済むので<code>jumplist</code>を汚すことなく十二分にそのジャンプ機能の便利さを享受することができます.
地味なよさがありますね.</p>

<h4>c) スクロール機能で <code>n</code> 連打せずファイル内をサクっと検索</h4>

<p>a), b) は1つ1つ前後に移動する機能の紹介でしたが, incsearch.vim は スクロール(デフォルトでは
<code>&lt;C-j&gt;</code>がスクロールダウン, <code>&lt;C-k&gt;</code>がスクロールアップ)という機能を搭載しており, これは人に
よってはライフチェンジングになりうるなかなかオススメ機能の1つです.</p>

<p>先ほどのgifを見てもらうとわかりやすいかと思うのですが,</p>

<p><em>デフォルトの場合</em></p>

<ol>
<li>「あーファイル内の{pattern}って部分に用があるな〜」</li>
<li>「よーし<code>/{pattern}&lt;CR&gt;</code>で検索して<code>n</code>, <code>n</code>, <code>n</code>, &hellip;」</li>
<li>「まだ見つからない&hellip;(ファイル内に<code>{pattern}</code>がたくさんあって辿り着かない)」</li>
<li>=> 不便&hellip;</li>
</ol>


<p><em>incsearch.vimのスクロール機能を使った場合</em></p>

<ol>
<li>「あーファイル内の{pattern}って部分に用があるな〜」</li>
<li>「よーし<code>/{pattern}</code>で incsearch.vim を起動しよう」</li>
<li>「あー画面内にいっぱい<code>{pattern}</code>がある&hellip;よし<code>&lt;C-j&gt;</code> で次の画面へ」</li>
<li>「<code>&lt;C-j&gt;</code>を数回押して目的地発見. 任意で<code>&lt;Tab&gt;</code>/<code>&lt;S-Tab&gt;</code>で前後に移動してから<code>&lt;CR&gt;</code>!」</li>
<li>=> <em>幸せ便利</em></li>
</ol>


<p>勿論, そもそもファイル内にたくさん存在しないようなキーワードを使って検索したり, タグが存在するなら
ctagsなどを使用してタグジャンプしたほうが断然よいですが,
いつでもユニークなキーワードが思い浮かんだり, タグが存在するわけではないので万能ではありません.
検索だとかなり汎用性が高いので個人的にはとても多用してる機能の１つになってます.</p>

<p>また他にもファイルの横断検索を補助するような機能を提供しているVimの機能や
プラグインなどなどはあるとは思いますが, 以下のようなメリットがあります</p>

<ol>
<li>&ldquo;検索&rdquo; として使える

<ul>
<li><code>gn</code>や<code>:substitute</code>と連携したりなど&#8221;検索&#8221;は他のVimの機能と一緒に使うことによって,
相乗効果でより手に馴染む快適なキーストロークでエディットすることができます.</li>
</ul>
</li>
<li>周囲のコンテキスト, 前後の行がみやすい

<ul>
<li><code>:vimgrep</code> や <code>unite-line</code> といった機能はだいたい前後の行が見れなかったりして
ユースケースによっては困ることもあります. ただし<code>grep</code>
などは複数のファイルを扱える大きなメリットがあるので使い分けれるようになるのが一番よさそうです.</li>
</ul>
</li>
</ol>


<h3>3.4 オート:nohlsearch</h3>

<ol>
<li><code>:set hlsearch</code>って便利でもあるけどだいたいウザイ

<ul>
<li><code>nnoremap &lt;Esc&gt;&lt;Esc&gt; :&lt;C-u&gt;nohlsearch&lt;CR&gt;</code> と言ったマッピングで検索後に消す人が多いと思います.</li>
</ul>
</li>
<li>incsearch.vim の <code>オート:nohlsearch</code> 機能を使えば検索後カーソル移動したらハイライトが消えるようになります.</li>
<li>地味に便利</li>
</ol>


<p><img src="../images/gif/incsearch/incsearch_auto_nohlsearch.gif" alt="incsearch_auto_nohlsearch" /></p>

<h4>設定</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">hlsearch</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:<span class="nb">incsearch</span>#auto_nohlsearch <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>map <span class="k">n</span>  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">n</span><span class="p">)</span>
</span><span class='line'>map <span class="k">N</span>  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">N</span><span class="p">)</span>
</span><span class='line'>map *  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span>*<span class="p">)</span>
</span><span class='line'>map #  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span>#<span class="p">)</span>
</span><span class='line'>map <span class="k">g</span>* <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">g</span>*<span class="p">)</span>
</span><span class='line'>map <span class="k">g</span># <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">g</span>#<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>※ <code>&lt;Plug&gt;(incsearch-nohl-n)</code> などは単なる <code>&lt;Plug&gt;(incsearch-nohl)n</code> のエイリアス
なので独自の <code>n</code>や<code>*</code>の機能を提供しているわけではありません</p>

<h3>3.5 他のプラグインと組み合わせて使う</h3>

<p>(3.4のつづき)</p>

<p><code>incsearch.vim</code> は <code>/</code> とそれにまつわる検索の便利機能を提供するようにシンプルにしようとデザインしてるつもりです(そこっ!検索にまつわる〜とか言ってる時点でシンプルではないとか言わない!). なので <code>n</code> や <code>*</code> を拡張したい場合に備え別の拡張プラグインと同時に扱える用に設計しています.</p>

<p>普通に一緒に使う分には何も考えなくとも併用できますが, incsearch.vim の オート :nohlsearch 機能 を使いたい場合はマッピングをちょっといじる必要があるので自分が使ってる例を出してみます</p>

<h4>n 拡張プラグイン vim-auzu と一緒に使う</h4>

<div class="github-card" data-github="osyo-manga/vim-anzu" data-width="500" data-height="150" data-theme="default"></div>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map   <span class="k">n</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">n</span><span class="p">)</span>
</span><span class='line'>map   <span class="k">N</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">N</span><span class="p">)</span>
</span><span class='line'>nmap  <span class="k">n</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>anzu<span class="p">-</span><span class="k">n</span><span class="p">-</span>with<span class="p">-</span>echo<span class="p">)</span>
</span><span class='line'>nmap  <span class="k">N</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>anzu<span class="p">-</span><span class="k">N</span><span class="p">-</span>with<span class="p">-</span>echo<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>vim-anzu は <code>n</code>/<code>N</code> を押すとファイル内の <code>現在位置までの数/全マッチ数</code> を表示してくれる拡張機能です.</p>

<h4>* 拡張プラグイン vim-asterisk と一緒に使う</h4>

<div class="github-card" data-github="haya14busa/vim-asterisk" data-width="500" data-height="153" data-theme="default"></div>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map *  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span>*<span class="p">)</span>
</span><span class='line'>map <span class="k">g</span>* <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span><span class="k">g</span>*<span class="p">)</span>
</span><span class='line'>map #  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span>#<span class="p">)</span>
</span><span class='line'>map <span class="k">g</span># <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span><span class="k">g</span>#<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>または vim-asterisk の<code>z*</code>機能(カーソルが動かない<code>*</code>) をメインに使う場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map *  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>nohl0<span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span>z*<span class="p">)</span>
</span><span class='line'>map <span class="k">g</span>* <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>nohl0<span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span>gz*<span class="p">)</span>
</span><span class='line'>map #  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>nohl0<span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span>z#<span class="p">)</span>
</span><span class='line'>map <span class="k">g</span># <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>nohl0<span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>asterisk<span class="p">-</span>gz#<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>vim-asterisk は僕が最近作った <code>*</code> をカイゼンするプラグインです. 機能としては</p>

<ol>
<li>カーソルを動かさない <code>*</code> 機能の提供(マッピングにzのprefixがついてる)

<ul>
<li>動かさずに <code>*</code> や <code>g*</code> でカーソル位置の単語を検索レジスタ(<code>@/</code>)に入れたあとに
<code>gn</code> などを組み合わせて編集したいというケースでは次のマッチに飛ぶ必要がないので
カーソル動かないバージョンの <code>*</code> が欲しかった. どうせ <code>n</code>/<code>N</code> ですぐ動かせる</li>
<li><code>noremap * *N</code> という解決法はダサいしウィンドウが一時的に動くので不便</li>
</ul>
</li>
<li>ビジュアルモードで選択したテキストを検索するvisual-star 機能

<ul>
<li>サクッと勢いで作ったので <a href="https://github.com/thinca/vim-visualstar">thinca/vim-visualstar</a>
のマルチバイトや <code>keyword</code> の扱いの部分のコードをお借りしています. ありがとうございます</li>
<li>visual-star は <code>CursorMoved</code> イベントが2回発生してしまうという問題があり,
incsearch.vim の オート:nohlsearch 機能と併用できなかった.
なので visual-star機能と同時に使いたい場合はvim-asteriskのvim-asterisk機能を使うと便利</li>
</ul>
</li>
<li>ignorecase だけでなく smartcase の値も一緒にみてくれる

<ul>
<li>デフォルトはなぜか <code>ignorecase</code> の値しかみてくれず, <code>smartcase</code> を設定していても<code>ignorecase</code>状態で検索される</li>
<li>非直感的すぎるので vim-asterisk は <code>:set ignorecase</code>の値も<code>:set smartcase</code>をみるようになっています</li>
</ul>
</li>
</ol>


<h3>3.6 Vim のデフォルトからちょっとカイゼン</h3>

<h4>a) magic オプションカイゼン</h4>

<p>Vimには <code>'magic'</code> という正規表現のエスケープする文字を変えるオプションがありますが
<code>\m</code>, <code>\M</code> しか設定できません(<code>:h /magic</code>).
またこれは<code>/</code>だけでなくすべての正規表現の挙動を変えてしまい設定すると,
対応できていないプラグインが動かなくなったりする問題があります (<code>:h 'magic'</code>)</p>

<p>incsearch.vim ではこれをカイゼンして <code>\v</code>, <code>\V</code>, <code>\m</code>, <code>\M</code> の, どの magic でも設定できる. また勿論他のプラグインには一切影響しません.</p>

<p><em>例</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:<span class="nb">incsearch</span>#<span class="nb">magic</span> <span class="p">=</span> <span class="s1">&#39;\v&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>b) カーソル下単語補完やCtrl-Wによる単語削除のカイゼン</h4>

<p>Vimは<code>set incsearch</code>状態で検索中に<code>&lt;C-r&gt;&lt;C-w&gt;</code>を押すとコマンドラインのカーソル前の単語とのマッチをみて,
バッファのカーソル下の単語を補完してくれる機能を持っています.
この機能自体はとてもべんりなのですが, コマンドラインが <code>/\vwo</code> の状態, カーソル下の単語が <code>word</code> の時に
<code>&lt;C-r&gt;&lt;C-w&gt;</code> を押しても補完が発動せず単にカーソル下の単語が挿入され <code>/\vwoword</code>になってしまいます.</p>

<p>これはvery magicオプションを設定する<code>\v</code>の<code>v</code>部分と<code>wo</code>との区別がなく<code>vwor</code>
がコマンドラインのカーソル前の単語と認識されているのが原因なので, カーソル前の単語
の範囲をかしこく決めてくれる機能を提供しています(オプションでoffにすることは可能です. <code>:h g:incsearch#smart_backward_word</code>)</p>

<p><code>&lt;C-w&gt;</code> によるカーソル前の単語の削除も同様の問題がありこれもカイゼンして,
<code>/\vword</code>状態で<code>&lt;C-w&gt;</code>を押すとデフォルトだと<code>/\</code>となるところを<code>\v</code>となるようにしています</p>

<p><img src="../images/gif/incsearch/incsearch_smart_backward_word.gif" alt="incsearch_smart_backward_word" /></p>

<p>見た目はとっても地味で聞いてもピンとこないかもしれないですが, 挙動が直感的になるとても気に入ってる機能のひとつです. ｼﾞｯｻｲﾍﾞﾝﾘ</p>

<h3>3.6 マッピングについて</h3>

<ol>
<li><code>:cnoremap</code> や <code>:cmap</code> に設定されているマッピングは自動で適用される</li>
<li>incsearch.vim が提供する機能へのマッピングや, <code>:cnoremap</code> の設定の上書き,
incsearch.vim でのみマッピングしたいという場合は <code>:h IncSearchNoreMap</code> コマンド
を使います</li>
</ol>


<p><em>設定例</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>augroup <span class="nb">incsearch</span><span class="p">-</span><span class="nb">keymap</span>
</span><span class='line'>    <span class="k">autocmd</span><span class="p">!</span>
</span><span class='line'>    <span class="k">autocmd</span> <span class="nb">VimEnter</span> * <span class="k">call</span> <span class="k">s</span>:incsearch_keymap<span class="p">()</span>
</span><span class='line'>augroup END
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:incsearch_keymap<span class="p">()</span>
</span><span class='line'>    IncSearchNoreMap <span class="p">&lt;</span>Right<span class="p">&gt;</span> <span class="p">&lt;</span>Over<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span>next<span class="p">)</span>
</span><span class='line'>    IncSearchNoreMap <span class="p">&lt;</span>Left<span class="p">&gt;</span>  <span class="p">&lt;</span>Over<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">prev</span><span class="p">)</span>
</span><span class='line'>    IncSearchNoreMap <span class="p">&lt;</span>Down<span class="p">&gt;</span>  <span class="p">&lt;</span>Over<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="nb">scroll</span><span class="p">-</span><span class="k">f</span><span class="p">)</span>
</span><span class='line'>    IncSearchNoreMap <span class="p">&lt;</span>Up<span class="p">&gt;</span>    <span class="p">&lt;</span>Over<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="nb">scroll</span><span class="p">-</span><span class="k">b</span><span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.7 autocmd で拡張できる</h3>

<p>参照: <code>:h incsearch-autocmd</code></p>

<p>incsearch.vim は Vim デフォルトのコマンドラインのと違い独自の autocmd イベントを発行しているので, それをつかってincsearch.vimを拡張することができます. 以下は <a href="https://github.com/inside/vim-search-pulse">inside/vim-search-pulse</a> というプラグインの機能を簡単に組み込んでみた例です. 個人的には要らないけどなんかカッコイイ&hellip;!?</p>

<p><img src="../images/gif/incsearch/incsearch_autocmd_flash.gif" alt="incsearch_autocmd_flash" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:flash<span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> _ <span class="k">in</span> range<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">set</span> <span class="nb">cursorline</span><span class="p">!</span>
</span><span class='line'>    <span class="k">redraw</span>
</span><span class='line'>    sleep <span class="m">50</span>m
</span><span class='line'>  <span class="k">endfor</span>
</span><span class='line'>  <span class="k">set</span> <span class="nb">cursorline</span><span class="p">!</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'>augroup <span class="nb">incsearch</span><span class="p">-</span>pulse
</span><span class='line'>    <span class="k">autocmd</span><span class="p">!</span>
</span><span class='line'>    <span class="k">autocmd</span> <span class="nb">User</span> IncSearchExecute <span class="k">call</span> <span class="k">s</span>:flash<span class="p">()</span>
</span><span class='line'>augroup END
</span><span class='line'>
</span><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>my<span class="p">-</span>flash<span class="p">)</span> :<span class="p">&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span><span class="k">call</span> <span class="p">&lt;</span>SID<span class="p">&gt;</span>flash<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>map <span class="k">n</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">n</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>my<span class="p">-</span>flash<span class="p">)</span>
</span><span class='line'>map <span class="k">N</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span><span class="nb">incsearch</span><span class="p">-</span><span class="k">nohl</span><span class="p">-</span><span class="k">N</span><span class="p">)&lt;</span>Plug<span class="p">&gt;(</span>my<span class="p">-</span>flash<span class="p">)</span>
</span><span class='line'><span class="c">&quot; デフォルトの場合</span>
</span><span class='line'><span class="c">&quot; map n n&lt;Plug&gt;(my-flash)</span>
</span><span class='line'><span class="c">&quot; map N N&lt;Plug&gt;(my-flash)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4. Development</h2>

<p>開発の話とか.</p>

<h3>4.1 Design</h3>

<p>ここまでいろいろと紹介しておいてどうかという話なのですが, incsearch.vim は
<em>シンプル</em>に機能を提供し , デフォルトのコマンドラインと高い<em>互換性</em>を保ちつつ,
それでいて<em>拡張性</em>の高いものにしようというコンセプトでつくっています(実際そうなっているとは言ってない)</p>

<p>特に一番苦心したのはデフォルトのコマンドラインとの互換性を保つように開発するところでした.
現在はVimのデフォルトの<code>/</code>でできるほとんどのことはできますが,</p>

<p>ビジュアルモードでのハイライトだったり, vim-repeat といった別のプラグインに依存せず
ドットリピートを可能にしたり, 逆にそれを可能にした <code>&lt;expr&gt;</code> マッピングによる <code>textlock</code> という
Vimの制限を解消するために, 必要でない部分は<code>&lt;expr&gt;</code> マッピングを使わないようにするといった回り道を
しながら, 現在はほぼデフォルトと互換性のある状態にできたと思います.</p>

<h4><code>&lt;expr&gt;</code> についてちょっと解説したりする</h4>

<ol>
<li><code>:h :map-&lt;expr&gt;</code></li>
<li>ドットリピート対応できる</li>
<li><code>:h function-search-undo</code> とかの制限をかいくぐれる</li>
<li>いろいろいじった上で最終的にデフォルトのマッピングを返して実行! ということができるのでデフォルトのモーションを拡張する際にとても便利</li>
<li>しかし問題点もある</li>
</ol>


<p><code>&lt;expr&gt;</code> とは expression mapping の略で, <code>{rhs}</code>(right-hand-side) を評価した値を返してくれます.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">noremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;</span> <span class="k">g</span><span class="sr">/ printf(&quot;/</span>%<span class="k">s</span>\<span class="p">&lt;</span>CR<span class="p">&gt;</span>&quot;<span class="p">,</span> input<span class="p">(</span><span class="s1">&#39;&gt;&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のマッピング例では, <code>{rhs}</code> の <code>input('&gt;')</code> が評価され, そこで入力した値を<code>{pattern}</code>とすると
それが<code>printf()</code>によって最終的には <code>/{pattern}&lt;CR&gt;</code> になります.</p>

<p>何がいいのかというと, 実際に <code>dg/pattern</code> などと使った際に, <code>{rhs}</code> が評価されて <code>d/pattern</code> になります.
これはそもそも最初から <code>d/pattern</code> と打った時と同様の挙動になるので, あたかもデフォルトの<code>/</code>を使ったような挙動を簡単に実装できるのです!
これによって ドットリピート や <code>:function-search-undo</code> に対応することが可能となります.</p>

<p>とは行ってもイマイチわかりにくいと思うので <code>&lt;expr&gt;</code> を使わないマッピングを見てみましょう.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:non_expr_search<span class="p">()</span>
</span><span class='line'>    execute <span class="s1">&#39;normal!&#39;</span> printf<span class="p">(</span><span class="s2">&quot;/%s\&lt;CR&gt;&quot;</span><span class="p">,</span> input<span class="p">(</span><span class="s1">&#39;&gt;&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'><span class="nb">noremap</span> z/ :<span class="p">&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span><span class="k">call</span> <span class="p">&lt;</span>SID<span class="p">&gt;</span>non_expr_search<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>単に検索という意味では動いているように見えるのですが, <code>function-search-undo</code>の制限により
ハイライトされず, また <code>dz/pattern</code> は <code>d:&lt;C-u&gt;call &lt;SID&gt;non_expr_search()&lt;CR&gt;</code> となるので,
ドットリピート時にも <code>s:non_expr_search</code> 関数が呼ばれてしまします. これによってその中の
<code>input()</code>がドットリピートでも呼ばれてしまい入力待ちになってしまいます.
これでは以前に入力した値をつかって検索してくれるデフォルトのドットリピートの挙動が再現出来ていません&hellip;不便&hellip;</p>

<p>普通のマッピングだとこういう問題があるのでそれを解消ができる <code>&lt;expr&gt;</code>
はデフォルトのモーションの拡張にとてもあっているのですが,
<code>&lt;expr&gt;</code> は<code>&lt;expr&gt;</code>で上述した副作用として <code>:normal</code> が使えないといった問題もあるので
これから<code>&lt;expr&gt;</code>を使ってプラグイン作りたいっという方は注意して使ってみてください.</p>

<p>incsearch.vim や先ほど紹介した vim-asterisk も<code>&lt;expr&gt;</code>を活用して便利にしたりしています.
他にも <a href="https://github.com/rhysd/clever-f.vim">rhysd/clever-f.vim</a> や <a href="https://github.com/deris/vim-shot-f">deris/vim-shot-f</a>
といった <code>f</code> を拡張するプラグインでも <code>&lt;expr&gt;</code> が使用されており, もともとこの<code>&lt;expr&gt;</code>でドットリピートに対応するという方法は
僕は clever-f で初めてみました. スゴイ.</p>

<h3>4.2 vital-over, または incsearch.vim のカスタムコマンドラインインターフェースについて</h3>

<div class="github-card" data-github="osyo-manga/vital-over" data-width="400" data-height="150" data-theme="default"></div>


<p>incsearch.vim は vital-over というカスタムコマンドラインインターフェースを提供するライブラリを使わせていただいてます.
incsearch.vim のデザインとしてVimデフォルトとの互換性を目指していると先ほど書いたのですが,
実はincsearch.vimがやっている部分は検索だけで,
コマンドラインインターフェースがVimのデフォルトと同じように使えるのはこの vital-over というライブラリのおかげです.
本当にアツイプラグインなので興味あるVim プラグイン開発者は是非使ってみてください!</p>

<p>モジュール性が高いのでガッツリとしたコマンドラインとしてではなく, ちょっと便利な <code>input()</code> や
<code>getchar()</code> として使えるかなーと思います. そのうち何かまた作ってみたい&hellip;!</p>

<h3>4.3 テストとかLintとか</h3>

<ol>
<li>themis.vim でテスト書いた</li>
<li>vim-lint / vint (期待)</li>
<li>テストって便利って改めて気づいた&hellip;!</li>
<li>themis のテスト書き方自体は <a href="https://github.com/vim-jp/vital.vim">vim-jp/vital.vim</a> など他のものを参考にするとよいと思う</li>
</ol>


<div class="github-card" data-github="thinca/vim-themis" data-width="400" data-height="150" data-theme="default"></div>


<div class="github-card" data-github="syngan/vim-vimlint" data-width="400" data-height="153" data-theme="default"></div>


<p><img src="../images/gif/incsearch/incsearch_dot_reporter_test.png" alt="incsearch_dot_reporter_test.png" />
<img src="../images/gif/incsearch/incsearch_badges.png" alt="incsearch_badges.png" /></p>

<p>今回incsearch.vim は(現在が開発&amp;メンテしてるvim-easymotionでもちょっとずつやってはいましたが)割と初めてスクラッチでテストやlintをしながら
書いたものだったのですが Vim script の開発周りの環境はかなり便利です. 特に <strong>Vim</strong> を使えるところが開発しやすくてよいです.</p>

<p>CI も travis で 最新に近い Vim と travis.org の Vim のバージョンの両方でテスト
(<a href="https://github.com/vim-jp/vital.vim/pull/241">Test on the latest Vim by crazymaster · Pull Request #241 · vim-jp/vital.vim</a>) したり,
<a href="http://d.hatena.ne.jp/thinca/20140812/1407775202">Vim プラグインを Windows 環境でテストする - 永遠に未完成</a>
を参考に Windows 環境 でもテストがしてみたりしてなかなかよかったです. (<del>Windows環境だけで違う挙動になるのヤメローッ!</del>)</p>

<p>Lint に関しては <a href="https://github.com/Kuniwak/vint">Kuniwak/vint</a> という python 製ツールも気になっているので期待ですね.</p>

<h3>4.4 Vim script 楽しいっ</h3>

<p>テストやLintツールもあるし,
<a href="https://github.com/vim-jp/vital.vim">vim-jp/vital.vim</a> や
<a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a>
といったライブラリ, Vim から引ける膨大な<code>:help</code>, 困ったら <a href="http://lingr.com/room/vim/archives#message-20835831">vim-jp – Lingr</a>
や <a href="https://github.com/vim-jp/issues/issues">Issues · vim-jp/issues</a> に相談, バグ報告できる環境,
Vim を使って開発できる Vim script を書くのは楽しいです&hellip;!</p>

<p><br>
&hellip;&hellip;..
<br>
<br>
<strong>&hellip;.ほんとうですよっ!?</strong> (言語仕様は寛容な心でカバー)
<br>
<br></p>

<p>ぜひぜひみなさんVim プラグイン開発やっていって開発効率を上げたり快適でリッチなエディタ環境を作ってみましょう&hellip;!</p>

<p>(※ 用法, 用量を守ってただしくVimしましょう)</p>

<h2>5. 最後に</h2>

<p>話が逸れてる感をひしひしと感じますが, あくまで incsearch.vim を紹介・解説する記事だったはずなので話を戻しましょう.</p>

<p>incsearch.vim, 今でもとても便利だと思っているのですが, まだまだ開発していく余地があります. (後方互換性を壊すことはしないと思います)</p>

<p>autocmd の拡張例を上述しましたが, まだコマンドラインの中身をいじれるようなインターフェースは実は提供できていません.
どこまでオープンにしていけばいいのか, オープンにしたら本当に便利になるのか,
などなど僕にとっては難しくゆっくり考えながら決めて行きたいです.  意見頂けたりとかコントリビューションお待ちしています&hellip;!</p>

<p>Vim Advent Calendar でテンションあがってちょっと長くなってしまいました. ここまで読んでくださった方ありがとうございます.</p>

<p><a href="https://github.com/haya14busa/incsearch.vim">incsearch.vim</a> 是非1度使ってみてください. 気に入って頂けるとそれはとっても嬉しいです!</p>

<p>それではVim Advent Calendar 2014の14日目の記事でした.</p>

<p>Happy Vimming!</p>

<script src="http://lab.lepture.com/github-cards/widget.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VimConf2014 で検索とその拡張について発表した]]></title>
    <link href="http://haya14busa.com/vimconf2014/"/>
    <updated>2014-11-09T11:07:22+09:00</updated>
    <id>http://haya14busa.com/vimconf2014</id>
    <content type="html"><![CDATA[<h2>VimConf2014 にいってきました</h2>

<p>2014/11/08(Sat)に開催された <a href="http://vimconf.vim-jp.org/2014/">VimConf 2014</a> に参戦して「/-improved」という発表をしてきました</p>

<h2>TL;DR</h2>

<p>初めてVimConfで約80人の前でLTをしたり, 他の方のおもしろい発表を聞いたり, 懇親会などなどで Vimmer のみなさんとお話出来て感極まりました.</p>

<h2>発表した</h2>

<h3>/-improved</h3>

<iframe src="https://docs.google.com/presentation/d/1ie2VCSt9onXmoY3v_zxJdMjYJSbAelVR-QExdUQK-Tw/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>


<p><br>
Vimデフォルトの検索をもっと使いこなそう! という内容と, 最近開発している検索拡張プラグイン, <a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a> についての発表を行いました.</p>

<p>VimConf, 一応国際的なものを目指すという声があるような話をしていたと思うので拙いですが基本全編英語で書いてみました. (gifアニメーションがあるので英語壊れててもある程度わかると信じている.) また incsearch.vim の README にも <a href="https://github.com/haya14busa/incsearch.vim#vimconf2014">リンク</a> を貼ってみました (そのうちwikiとかに移動させるかもですが)</p>

<p>incsearch.vimについてはスライドを&hellip;と思いましたが, 英語がたぶんダメダメで(特に最初の2-3コの発表を聞いてからエクストリーム加筆修正した最後の部分), LT10分間に合わなくて最後駆け足で喋ったので少し. 詳しくはスライド or いづれ書かれるであろう(?) incsearch.vim の解説記事を参照していただきたいです.</p>

<h4>Design</h4>

<blockquote class="twitter-tweet" lang="en"><p>incsearch.vim、完成度高すぎて空気のような存在になっている</p>&mdash; トデス子 (@todesking) <a href="https://twitter.com/todesking/status/525937969308262401">October 25, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>incsearch.vim の目指すデザインとしては基本的にシンプルな検索の拡張を提供し, Vim デフォルトの <code>/</code> を置き換えても違和感なく移行できるというところを１つの重要なポイントとしています. この @todesking さんのツイートはVimConfのコンテキストでつぶやかれたツイートではないのですがまさに「空気のように」に使えるよう目指していてスライドでも似たようなことをすこし話していました (あとこのツイートが本当に嬉しくてどこかに書いておきたかった. ありがとうございます)</p>

<h4>後半話してたこと</h4>

<p>この incsearch.vim というプラグインは決して自分だけの力で開発したわけでなく, いろんな人に協力があって作ることができました(という部分がエクストリーム加筆部分なので相当に雑なスライドになっている).</p>

<p>もとは<a href="https://github.com/osyo-manga/vim-over">osyo-manga/vim-over</a>に使われていたカスタムコマンドラインを
<a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a> というライブラリとしてをおしょーさんに要望投げまくって作ってもらったり,
ドットリピートの対応法とかは <a href="http://haya14busa.github.io/reading-vimplugin/">Vimプラグイン読書会</a> などで教えてもらったり,
正規表現をderisさんに教えて頂いたり, 使っていただいた方に不具合を報告してもらったりアイデアをもらったり,
開発時にぶつかったVim本体のバグを<a href="https://github.com/vim-jp/issues/issues">vim-jp/issues</a>に報告して修正してもらったりと,
たくさんの人に協力していただいてこそincsearch.vimはここまでできたと思ってます. みなさん本当に感謝しています. ありがとうございます！</p>

<p>kaoriyaさんの話にあった(kaoriyaさんのスライド参照) Vim のよさ, 「らしさ」の１つには確かに「Vim のユーザー」があると僕も思って,
incsearch.vim はそのよさがなければ絶対に作れなかったプラグインの1つとして <strong>Vim のよさ</strong> としても話したいなーと思い,
もともと開発のバックグラウンドの部分は入れてなかったのですが急遽スライドを追加して話させていただきました.</p>

<p>Vim のよさがより伝わるといいなーと思いましたが, そのせいで完全にLTの10分制限を越えてしまったので同時に反省もしています&hellip;</p>

<p>正直緊張しすぎで全然聴衆の方がどういうふうに聞いてくれてるか反応を見れてなかったのですが, twitter とかを見る限り便利さは伝わったようなので嬉しかったです. みなさん興味が出たらぜひ使ってみてください&hellip;!</p>

<h2>それぞれの発表, あと感想とか</h2>

<h3><a href="http://koron.github.io/vimconf-2014-koron/">Identity of the Vim</a> <a href="https://twitter.com/kaoriya">@kaoriya</a> さん)</h3>

<p>「Vimのらしさ」について. テキストオブジェクトが便利とかも勿論Vimの強みで「らしさ」の1つ.
でも, それだけではなく Vimを使うならIDEとは違い複数の言語をやって視野を広げることができることも1つのメリット.
これは逆に言えば多種多様なバックグラウンドを持つ人がVimを触っているということで, <a href="https://github.com/vim-jp/">vim-jp</a> や <a href="http://lingr.com/room/vim/">Lingrのvim部屋</a>, twitterで他の Vimmer の方々達と交流すると Vim を通していろいろな考え方に触れることができ, Vim の強みの一つに「vim-jp = ユーザー」 というのは本当にそうだなと感じました.</p>

<p>またVimをやる意義として, 得たものを還元してvim本体をよくしたり, 思いがけず他の人にとっても便利にできたり, マッチポンプ式に Vim を便利にできるという点もとても共感しました. この辺の話や後のujihisaさんの発表を聞いていると変にテンションがあがってしまい, エクストリーム資料追加を実行しました. (そしてLTが時間内に間に合わなくなりました.)</p>

<h3><a href="https://docs.google.com/presentation/d/1u5A7F3Kd4XwJlIUQZAVmrwWfLcoLf9NURtqAEafi_oo/edit#slide=id.p">PM2</a> (<a href="https://twitter.com/ujm">@ujm</a> さん)</h3>

<p>Process Manager 2 の話. 個人的には以前 cmigemo のプロセスを Process Manager で使いまわそうと現在のPMは使ってみたことがあるのですがうまくいかず断念していた(自分の使い方の問題っぽかった)という経緯あります. ですがPM2はかなり使いやすそうになっていそうだったので再挑戦したいと思いました.</p>

<p>後半全くVimと関係ない話(!?)だったり随所に挟まれる笑いどころがあって一番笑った発表でした. PM2だけでなく命名やタイムアウトの大事さも学べて「べんり」</p>

<h3><a href="https://speakerdeck.com/rhysd/vimconf-2014-f">f</a> (<a href="https://twitter.com/Linda_pp">@Linda_pp</a> さん)</h3>

<p>f の解説と f 拡張プラグインの解説でした. <a href="https://github.com/Lokaltog/vim-easymotion">Lokaltog/vim-easymotion</a> の便利機能も解説していただいてありがたみがありました.
clever-f はfで繰り返して移動できるというそれ自体の機能の便利さも勿論メリットなのですが, <code>;</code> と <code>,</code> キーという押しやすい2つものマッピングをフリーにして他のマッピングにできるという部分がとても嬉しい機能です. Lindan さんの場合は <code>,</code> を<code>&lt;Leader&gt;</code> に, <code>;</code> を <code>&lt;Plug&gt;(easymotion-s2)</code>にしており, このあたりをどのマップに置き換えるかは人それぞれの好みだとは思うのですが, かなり便利そうだと感じました.</p>

<p>スライドのfの説明の図がわかりやすかったり, 最後にはオチも付いているのでぜひスライドを見てみてください</p>

<h3><a href="https://docs.google.com/presentation/d/1zaPy82NJ6A3Iw1llKqU-lX88AJNt1EKy5O15nOp085c/edit#slide=id.p">Hey, Java! Vim is coming.</a> (<a href="https://twitter.com/kamichidu">@kamichidu</a> さん)</h3>

<p>Javaを書く機会がないですが, もしJavaを書くことになったら間違いなくVimで書きたい側の人間なので参考にしたい.
Lingrなどでkamichiduさんの活動をみてると, 他の人ではすぐにはできないようなことを平然とサクッとこなしている印象がいつもあるのでぜひ見習っていきたい&hellip;!</p>

<h3><a href="http://www.slideshare.net/cohama/auto-closing-parenthesis-vim-conf2014-41290298">auto closing parenthesis</a> (<a href="https://twitter.com/c0hama">@c0hama</a> さん)</h3>

<p>dot repeatable になっている <a href="https://github.com/cohama/lexima.vim">cohama/lexima.vim</a> の仕組みとか, あまり自動括弧入力系は使ったことがないのですが試してみたいという思いもあったので個人的に気になる発表の1つでした.</p>

<p>あとで懇親会やその後のカラオケなどなどで聞いた話によると,コマンドラインのマッピングなど想像以上にいろいろな機能を leximaでカスタマイズすることができるらしく汎用性の高さを感じたました. リピータブルな自動括弧入力ってだけでは全く無いようです. すごい.</p>

<h3><a href="http://www.slideshare.net/deris0126/vimconf4">怖くないマクロ入門</a> (<a href="https://twitter.com/deris0126">@deris0126</a> さん)</h3>

<p><code>:h q</code> のマクロ入門についての発表. 決して<a href="http://togetter.com/li/401111">マクロ漁船</a>のようなコワイ話ではなく初心者から使える解説でよかったと思います.
Vimを使っていて, そこに繰り返し操作があればマクロを使うチャンスなので使っていけるようになるとVimがもっと好きになること間違いなしです.
時間があれば実演とか, 途中でマクロ間違えた時や, マクロが少し間違っててた場合にちょっとだけ操作足したい/修正したいといった時にどうすればいいかといった対処法もあるとより便利さがあると思いました.</p>

<h3><a href="https://gist.github.com/thinca/2cf4ae0df88a99423c9d">Test for Vim script</a> (<a href="https://twitter.com/thinca">@thinca</a> さん)</h3>

<p>最近 <a href="https://github.com/thinca/vim-themis">thinca/vim-themis</a> をベンリに使わせて頂いているんですが, 改めて発表を聞いてもベンリすぎる&hellip;という印象でした.
themis便利なんですが自分が使いこなせてないのでテストもっとかけるようになって使いこなしたいという思いがあります.</p>

<h3><a href="http://www.slideshare.net/Shougo/lets-talk-about-neovim">Let&rsquo;s talk about neovim</a> (<a href="https://twitter.com/ShougoMatsu">(@ShougoMatsu</a> さん)</h3>

<p>暗黒美夢王の NeoVim についての発表. 全編英語で書かれておりNeoVim newsletterにも載るらしくVimConfの国際感がでてよさそう.
内容についてもさすがShougoさんと言うべきかエディタの未来とかOSSのforkの話とかも含めてとても考えられているなぁと感じました.</p>

<p>NeoVim のissueを動向を追うの, かなり大変なので殆ど追えてないのですが面白いことをやっているハズなのでもっと追っていきたい&hellip;</p>

<h3><a href="http://www.slideshare.net/supermomonga/super-cool-presentation-at-vimconf2014">かなりすごい発表（かなり）</a> (<a href="https://twitter.com/supermomonga">@supermomonga</a> さん)</h3>

<p>かなりすごくておもしろい発表でした(かなり). <a href="https://github.com/supermomonga/thingspast.vim">supermomonga/thingspast.vim</a> は統一的に使うようになるととても便利(とても)になりそうなので使ってみたい. Vim, しゃべれるらしいのでVimと会話したい(とても)</p>

<h3><a href="http://www.slideshare.net/pebble8888/using-xvim-with-macvim">XVim with MacVim and smartgrep</a> (<a href="https://twitter.com/pebble8888">@pebble8888</a> さん)</h3>

<p>とても申し訳ないんですがXcodeつかったことがなく, 自分の発表の直前だったので緊張していたこともあってあまりまともに話を聴けてなかった&hellip;悔やまれる&hellip;
単なる紹介とかでなくforkして改善したとかいう話をしていた気もするのでお話聞いてみればよかった. コメントを飛ばしてgrepできる, smartgrep も便利そう.</p>

<h3><a href="https://docs.google.com/presentation/d/1ie2VCSt9onXmoY3v_zxJdMjYJSbAelVR-QExdUQK-Tw/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.g4e7add63c_05">/-improved</a>  (<a href="https://twitter.com/haya14busa">@haya14busa</a>)</h3>

<p>自分の発表, 上述した.</p>

<h3><a href="https://speakerdeck.com/orgachem/zhuan-banuxian-falsezhang-vint">vim script初心者に使ってもらいたい、転ばぬ先の杖「Vint」</a> (<a href="https://twitter.com/orga_chem">@orga_chem</a> さん)</h3>

<p>個人的には今後の発展が期待できる &amp; 使いたいプラグイン No.1 でした.  スライドはオシャレでみやすいし, lint の仕組みも詳しく解説されていて勉強にもなりました. lint, 奥が深い&hellip;!</p>

<p>@orga_chem さんは発表者であると同時に会場の設営やUstream, 録画などの管理も行なって頂いており, 本当にお疲れ様でした. あと Vim の壁紙を使わせて頂いており改めて感謝できてよかった.</p>

<h3><a href="http://www.slideshare.net/raa0121/jenkinsvimenv-vim-vimconf2014">Jenkins + vimenv で 最新のVimを使おう！</a> (<a href="https://twitter.com/raa0121">@raa0121</a> さん)</h3>

<p>vimenv, anyenvに入って欲しい. git の log からパッチ番号取得していつも最近のVimをbuildできる. make test とかも行なって不具合検知ができてよさそうでした.</p>

<h2>懇親会, あとまとめとか</h2>

<p>去年の VimConf 2013 では発表なんてもってのほかで, Twitter や Lingr でみていた Vimmer のみなさんとお話すること自体殆ど出来なくて, 楽しかったけど悔いは残るものになってしまっていました. しかし今年の VimConf 2014 では発表もできて, 皆さんとリアルで対面してお話することができてとても楽しかったです. 感極まりました.</p>

<p>来年も是非参加したいし, もっと運営のお手伝いとかもできたらなーと思いますj</p>

<p>当日これなかったり, Ustream の配信も見ていなかった方は Togetter に 当日のTwitterの様子をまとめた(<a href="http://togetter.com/li/742963">VimConf2014まとめ - Togetterまとめ</a>)ので, 発表者のスライドや他の方の感想記事, これから<a href="http://vimconf.vim-jp.org/2014/">公式ページ</a>にリンクが貼られるであろう録画とかを見て, 興味がでたら是非是非来年のVimConfは参加してみると楽しいと思います!</p>

<p>それでは Happy Vim&#8217;ing ! ♥</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nagoya.vim 第2回に行ってきた]]></title>
    <link href="http://haya14busa.com/nagoya-vim-2/"/>
    <updated>2014-09-22T00:00:12+09:00</updated>
    <id>http://haya14busa.com/nagoya-vim-2</id>
    <content type="html"><![CDATA[<h2>Nagoya.vimに参戦!</h2>

<p>9/20(Sat)に開催された, <a href="http://nagoyavim.connpass.com/event/8299/">Nagoya.vim #2</a> に京都から参戦しに行きました!</p>

<p><img src="../images/post/haya14busa_nagoya_vim_sansen.png" alt="" /></p>

<h3>TL;DR</h3>

<p><a href="https://twitter.com/thinca">@thinca</a>さんと <a href="https://twitter.com/Linda_pp">@Linda_pp</a>さんと一緒にスマブラできて楽しかった</p>

<h2>Nagoya.vim #2</h2>

<ul>
<li><a href="http://nagoyavim.connpass.com/event/8299/">Nagoya.vim #2 - connpass</a></li>
</ul>


<p>いわゆるもくもく回として久々(らしい)に開催された Nagoya.vim に初参加してきました。 connpassページにある目的を振り返ってみると</p>

<blockquote><p>目的</p>

<p>Vim script でなんか書く
なごやの Vim 使いと交流する</p></blockquote>

<h3>1. Vim script でなんか書く -> ○</h3>

<p><a href="https://github.com/haya14busa/incsearch.vim">incsearch.vim</a> の進捗を出していました(進捗がでたとは言ってない).</p>

<p>主に内容としては <code>TODO:</code>, <code>FIXME:</code> がとっても増えたこと、テストをちょっとだけ拡充したことの2点です。 一応すでに実用段階にはあると思っているんですが、もう少しだけ足りない機能足して、テストちゃんとして早くバージョン1.0にしたさがあるのでまた頑張っておく予定です。</p>

<p>気になった方は是非使ってみてください&hellip;!</p>

<h3>2. なごやの Vim 使いと交流する -> ○()しかし◎の余地あり)</h3>

<p>東京勢の犬さん(<a href="https://twitter.com/Linda_pp">@Linda_pp</a>さん) と初対面出来たことを初めとして, TwitterやLingrのVim部屋, GitHubで見かける なごやの Vimmer の方々(<a href="http://nagoyavim.connpass.com/event/8299/participation/#participants">Nagoya.vim #2 - Attendee List - connpass</a>) と懇親会含めてお話できてとてもよかったです。 みなさんありがとうございました! またよろしくお願いします。</p>

<p>ただ、最初の自己紹介タイムだけでは自分の記憶力的にあまり覚えられなかったり、懇親会でもほとんど一緒に喋れなかった人がたくさんいたのでもうちょっと自分から話しかけて行きたい感が強まりました。 特にせっかく, なごやの関数型とか型界隈こわい勢 の方々がいらっしゃったのに、あんまり話さずじまいだったので、機会があれば関数型プログラミングとか教えてもらいたい(あわよくば)</p>

<p>ぜひ、又の機会によろしくお願いします.</p>

<h2>反省, あと進捗とか</h2>

<p>久々に時間取ってVim活できる機会だったので<a href="https://twitter.com/thinca">@thinca</a> さんのライブコーディングを見ながらも上述したような<a href="https://github.com/haya14busa/incsearch.vim">incsearch.vim</a> の改善を行なって, 最後に成果発表させていただきましたがあまり目に見える進捗ではなかったという反省が1点。そのあとに実は以前&hellip;.(ｺﾞﾎッ&hellip;) 作った Vim系オンライン読書会 の宣伝LTみたいなものをしたのですが, 全くしゃべる内容とか準備せずにスライドだけ作ってグダッた発表したという反省が2点目。 そして極めつけは最後に撤収しないといけない時間に始めてしまってそもそも時間を押してしまったという反省の1点を合わせ, だいたい計3点くらいの反省がありました。皆さん申し訳ありませんでした。</p>

<p>ということで(?) 一応発表に使ったスライドを少々手直して上げてました。</p>

<p><a href="http://haya14busa.github.io/slide/2014-09-20-nagoya-vim-2/#/">オンラインVim系読書会でVim力を高めよう</a></p>

<p>Nagoya.vimに参加した人も, 参加してないけどこの記事を読んで頂いてる人も, ぜひぜひvimrc読書会やvimプラグイン読書会に参加してくれると嬉しいです。</p>

<p>特にvimヘルプ読書会やると絶対ベンリだと思っているのでプッシュしてくれるかたを常に募集しています。よろしくお願いします。</p>

<h2>観光</h2>

<p>翌日の21(日)は名古屋観光しながら進捗を出したりスマブラをやったり, グルメ楽しんだりしました</p>

<p>一緒に観光した <a href="https://twitter.com/thinca">@thinca</a>さん, <a href="https://twitter.com/Linda_pp">@Linda_pp</a>さん, <a href="https://twitter.com/If_I_were_boxp">(@If_I_were_boxp</a> さん, 名古屋観光一緒にできて楽しかったです, ありがとうございました&hellip;! またぜひよろしくお願いします.</p>

<p><img src="../images/post/nagoya/2014-09-21%2011.45.47.jpg" alt="" />
<img src="../images/post/nagoya/2014-09-21%2014.44.26.jpg" alt="" />
<img src="../images/post/nagoya/2014-09-21%2015.03.44.jpg" alt="" />
<img src="../images/post/nagoya/2014-09-21%2015.12.12.jpg" alt="" />
<img src="../images/post/nagoya/2014-09-21%2018.49.17.jpg" alt="" /></p>

<p>ひつまぶし超ウマイ〜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimrc読書会Stat作った]]></title>
    <link href="http://haya14busa.com/reading-vimrc-stat/"/>
    <updated>2014-07-17T01:18:34+09:00</updated>
    <id>http://haya14busa.com/reading-vimrc-stat</id>
    <content type="html"><![CDATA[<h2>vimrc読書会Statを作りました!</h2>

<h4><a href="http://vim-jp.org/reading-vimrc/stat/#/">vimrc読書会 Stat</a></h4>

<p><img src="../images/post/2014-07-14-reading-vimrc-line-chart.png" alt="" /></p>

<h4>参加者Stats: <a href="http://vim-jp.org/reading-vimrc/stat/#/u/haya14busa">vimrc読書会 Stat - haya14busa</a></h4>

<p><img src="../images/post/2014-07-14-reading-vimrc-stat-haya14busa.png" alt="" /></p>

<h4>GitHub Contributionグラフのイミテーション</h4>

<p><img src="../images/post/2014-07-14-reading-vimrc-streak.png" alt="" /></p>

<h2>vimrc読書会2周年</h2>

<p>先日の 2014/07/12(土) に開催された<a href="http://vim-jp.org/reading-vimrc/archive/106.html">第106回 vimrc読書会</a>ですが、
なんと 2012/07/10(火) に開催された<a href="http://vim-jp.org/reading-vimrc/archive/001.html">第1回 vimrc読書会</a>から数えて
<strong>2周年</strong> の回でした。 めでたい!</p>

<p>と、まぁそういうめでたい節目(最近100回越えもあった)でもあり、vimrc読書会のアーカイブデータは現在データ化されていて利用しやすい形にもなっていたので、せっかくなので<a href="http://d3js.org/">d3.js</a>と<a href="https://angularjs.org/">AngularJS</a>で遊んでみました。</p>

<p>両方全く触ったことがなかったのでいろいろと改善したいところがそれはもうたくさんありますが、今までのデータの視覚化、ついでにこれからvimrc読書会に参加するのがチョット楽しくなるようなGitHubの草(Contributions graph)のイミテーションも作ったりして楽しかったです。</p>

<h2>実装したStatについて</h2>

<p>大きく分けると3つです。</p>

<h3>1. vimrc読書会参加者数推移グラフ</h3>

<p><img src="../images/post/2014-07-14-reading-vimrc-line-chart.png" alt="" /></p>

<ul>
<li>使用ライブラリ: <a href="http://d3js.org/">D3.js - Data-Driven Documents</a></li>
<li>参考: d3 sampleの <a href="http://bl.ocks.org/mbostock/3883245">Line Chart</a></li>
<li>URL: <a href="http://vim-jp.org/reading-vimrc/stat/#/">vimrc読書会 Stat</a></li>
</ul>


<p>Statページの一番上にどーんと参加者数推移のグラフを載せるようにしました。
ちょっと悪目立ちしてるレベルなくせにベースの<a href="http://bl.ocks.org/mbostock/3883245">Line Chart</a>にちょっと機能を加えただけという代物です。
縦軸が参加人数、横軸が開催数になっていて、ドットにマウスオーバーすると情報が見えたり、クリックするとアーカイブページに飛べます。
(実は横幅が全部表示するにはギリギリで、あまりスケールしないようになっているのでそのうち改善できたらしたいです)</p>

<p>第2回が最高の27人参加だということが可視化されたり、最近の第105回で20人と結構な記録を出してるなーとわかったりしてちょっとおもしろい。
みんなでﾜｲﾜｲ参加して最高記録を塗りかえれるとアツイですね&hellip;!</p>

<p>d3に関しては、最初はbar chartでやろうと迷走していたりとグラフの選択とか結構難しかったけど、なかなかd3面白いなぁという印象を受けました。ただd3の知識はd3でしか生かせないようなつぶしが効かない印象も&hellip;? とはいっても,<code>svg</code>周りとかは汎用性高いし、視覚的に面白いものがつくれるのでd3やってみてよかったです。</p>

<h3>2. vimrc読書会参加数ランキング</h3>

<ul>
<li>使用ライブラリ: <a href="https://angularjs.org/">AngularJS</a></li>
<li>URL: <a href="http://vim-jp.org/reading-vimrc/stat/#/">vimrc読書会 Stat</a></li>
</ul>


<p><code>1</code>の<code>vimrc読書会参加者数推移グラフ</code>の下に、ずらずらーっとこれまでの全vimrc読書会参加者の参加者数ランキングを出しています。
初期の頃からvimrc読書会を支えてきた/参加してきた上位陣が圧倒的で<a href="https://twitter.com/thinca">@thinca</a>さんに至っては脅威の皆勤賞で堂々の1位です。すごすぎる&hellip;</p>

<p>現状、参加者名が<code>3</code>の<code>参加者ごとのStatページ</code>へのリンクになっているという関係上,参加者全員分を表示していますが、今後StatのTopページはサマリーだけだして、ランキングとか別のページに分けるという仕様に変更するかもしれません。</p>

<p>Angularに関してはここでは単にデータをDOMに結び付けてるだけです。ベーシックに<code>ng-repeat</code>とか使ってみてデータバインディングの便利さを痛感しました。jQueryで頑張るとは何だったのか。</p>

<h3>3. 参加者毎のStatページ</h3>

<p><img src="../images/post/2014-07-14-reading-vimrc-stat-haya14busa.png" alt="" /></p>

<ul>
<li>使用ライブラリ: <a href="https://angularjs.org/">AngularJS</a> &amp; <a href="http://d3js.org/">D3.js - Data-Driven Documents</a></li>
<li>URL: <a href="http://vim-jp.org/reading-vimrc/stat/#/u/">http://vim-jp.org/reading-vimrc/stat/#/u/</a>

<ul>
<li>sample: <a href="http://vim-jp.org/reading-vimrc/stat/#/u/haya14busa">http://vim-jp.org/reading-vimrc/stat/#/u/haya14busa</a></li>
</ul>
</li>
</ul>


<p>Angularのrouting機能を使って、参加者毎の統計ページを作ってみました。
単純なこれまでの参加数などに加えて、GitHubの草をリスペクトした Current streak, Longest streakの情報や, streakのグラフをd3で作ってみました。例によって、それぞれのマスにマウスオーバーで情報表示とクリックでアーカイブページに飛ぶようになってます。</p>

<p>あと、自分が参加してない過去の読書会とか振り返りたいという要望がきっとあるみたいな妄想から、参加/参加してない読書会ごとのアーカイブを表示させてます。</p>

<p>グラフが見るからに手抜きでしょぼい感が拭いきれてないのが明白なんですが、機能的には割とよさ気な感じになったかなぁと思います。
というか個人的にGitHubの草を生やしたり、何かしら記録して頑張った感を可視化できるのが好きなんです。<del>肝心の中身はあとからついてくると信じてる</del></p>

<p>連続参加とか参加率が可視化されて、すこしでもvimrc読書会に参加したいなーという助けになればそれはとっても嬉しいですね。ぜひぜひ連続参加を目指してみてください。
一回「hi」と発言するだけでも参加扱いになるのでROM勢の方もぜひ発言してみてください。かくいう僕も最初はROMばっかりしてましたが、やっぱり会話できるとベンリです。</p>

<p>この辺も後々改善できればしていくと思います。一応右上の検索ボックスで他の参加者のページに飛べる(補完も効くはず)ようになってたりするのですが、もっといいUI絶対あるよね&hellip;</p>

<h2>Jekyll on GitHub pages</h2>

<p>Jekyll on GitHub pages と クライアントサイドMVなんちゃらで動的っぽいサイトがつくれて面白かったです。</p>

<h3>Template</h3>

<p>注意点としてテンプレートのシンボルがJekyllのLiquidと、AngularでかぶるのでAngular側でテンプレートのシンボルを変更しておく必要があります。
今回は角括弧でこのように使えるようにしてみました。<code>[[ vimmutable ]]</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myapp&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span> <span class="s1">&#39;$interpolateProvider&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$interpolateProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$interpolateProvider</span><span class="p">.</span><span class="nx">startSymbol</span><span class="p">(</span><span class="s1">&#39;[[&#39;</span><span class="p">).</span><span class="nx">endSymbol</span><span class="p">(</span><span class="s1">&#39;]]&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>参考: <a href="http://alwayscoding.ca/momentos/2013/10/09/angular-and-liquid-expressions-in-jekyll/">Angular and Liquid expressions in Jekyll - { always: &lsquo;coding&rsquo; }</a></li>
</ul>


<h3>yamlデータをjsonでホスト</h3>

<p>Jekyllは、特にGitHub Pagesなどのプラグインがない状態ではjsonのデータは基本つかえず、yamlでいろいろデータを書いておいて、そのデータを簡単に記事などに埋め込めるようになっているのですが、その性質をハックして無理やりjson形式に出力することができます。</p>

<p>やり方はjsonファイル作って、その先頭に空の Front-matter をおいて、あとはjsonをLiquid記法と交えてよしなに書いていくだけです。(自動化したい&hellip;)</p>

<p>Jekyllに検索機能を持たすという文脈で紹介されることが多いっぽいですが、yamlでデータをガンガンおいてる場合はjsonホストすると使いやすくなっておすすめです。</p>

<ul>
<li>実例: <a href="https://github.com/vim-jp/reading-vimrc/blob/77c5570aefb2274ffcd846728f8d2deedd3bb4e6/json/archives.json">https://github.com/vim-jp/reading-vimrc/blob/77c5570aefb2274ffcd846728f8d2deedd3bb4e6/json/archives.json</a></li>
<li>参考: <a href="https://alexpearce.me/2012/04/simple-jekyll-searching/">Simple Jekyll Searching - Alex Pearce</a></li>
</ul>


<h2>JSONデータ</h2>

<ul>
<li><a href="http://vim-jp.org/reading-vimrc/json/archives.json">http://vim-jp.org/reading-vimrc/json/archives.json</a></li>
<li><a href="http://vim-jp.org/reading-vimrc/json/next.json">http://vim-jp.org/reading-vimrc/json/next.json</a></li>
</ul>


<p>アーカイブと、次回読むvimrcについてのjsonが上記URLで公開されているので使いたい方は使ってもいいと思います(たぶん)。
一応このJSONで<a href="https://github.com/haya14busa/unite-reading-vimrc">haya14busa/unite-reading-vimrc</a>とか作ってみたりしました。</p>

<h2>まとめ</h2>

<p>d3もangularも初めてで未熟な部分が多々あったものの、割といいレスポンスをもらえて嬉しかったです&hellip;! <a href="http://lingr.com/room/vim">Lingrのvim部屋</a>で <code>!vimrc-stat {username}</code> と打つと参加者統計ページへのリンクが返ってくるようになって便利。</p>

<p>最後になりましたが、宣伝です!!!</p>

<p><a href="http://vim-jp.org/reading-vimrc/">vimrc読書会</a>は毎週土曜日23:00から<a href="http://lingr.com/room/vim">LingrのVim部屋</a>でオンラインでやっています。
参加すると、vim力がめちゃめちゃ上がるのでぜひぜひ参加して参加記録を伸ばしたりしましょう!お待ちしておりますよっ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Osaka.vim #1 に行ってきた]]></title>
    <link href="http://haya14busa.com/osaka-vim-01/"/>
    <updated>2014-06-30T19:09:21+09:00</updated>
    <id>http://haya14busa.com/osaka-vim-01</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://osaka-vim.connpass.com/event/6491/">Osaka.vim #1 - connpass</a></li>
<li><a href="https://github.com/iyuuya/OsakaVim/wiki/OsakaVim%231">Osaka.vim#1</a></li>
</ul>


<p>6/28(土)に開催されたOsaka.vim #1に行ってきました。 待ちに待った関西圏の Vim 勉強会!</p>

<h2>関西圏のVim勉強会!</h2>

<p>過去を遡るといくつか関西でのvim勉強会が開催されていたようなのですが、いづれも現在まで続いているものはなく、最近ではめっきりなくなっていました。 関東その他のVimの勉強会は結構な頻度で開催されており、しかもどれも楽しそう。 関西Emacsはあるのに関西Vimない!ﾅﾝﾃﾞ!</p>

<p>他の地域でのVim勉強会を見るたびに羨ましさの涙でvimrcを濡らしていたところ、やっと機会が回ってきました。</p>

<h4>2014/04/05</h4>

<blockquote><p>haya14busa: kansai.vim . &ldquo;#x09&rdquo; &ldquo; 関西Vim</p>

<p>manga_osyo: やると聞いて
              haya14busa.vim</p>

<p>&ndash; <cite><a href="http://lingr.com/room/vim/archives/2014/04/05#message-18727221">vim-users.jp – Lingr</a></p></blockquote>

<p>欲しいと思っている様子(口だけ)。そして時は流れて1ヶ月後</p>

<h4>2014/05/17</h4>

<blockquote><p>iyuuya: 大阪でもxxx.vimって無いんですかね
          iyuuya.vimやってもいいんですけどねー</p>

<p>&ndash; <cite><a href="http://lingr.com/room/vim/archives/2014/05/17#message-19050010">vim-users.jp – Lingr</a></p></blockquote>

<p><strong>やりたい!!!</strong></p>

<p>やっと開催の流れが現実味を帯びてきました。というか<a href="https://twitter.com/iyuuya">@iyuuya</a>さんが現実味を帯びせてくれました。非常に便利。
一応、「一緒に開催しましょー」と<a href="https://twitter.com/iyuuya">@iyuuya</a>さんに言っていただいたのですが、ここから開催日を決めて開催場所を決め、告知etc&hellip;
という流れまで <del>一緒に決め&hellip;</del> <a href="https://twitter.com/iyuuya">@iyuuya</a>さんがほとんどすべてやってくれ、とうとう<strong>Osaka.vim</strong>の開催が決定しました!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">for</span> _ <span class="k">in</span> range<span class="p">(</span><span class="m">100</span><span class="p">)</span>
</span><span class='line'>  @iyuuya<span class="p">++</span>
</span><span class='line'><span class="k">endfor</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://twitter.com/iyuuya">@iyuuya</a>さん本当にありがとうございました &amp; おつかれさまです。</p>

<h2>Osaka.vim #1</h2>

<p>待ちにまったOsaka.vim、 非常に楽しかったです。</p>

<h3>@thinca さんによるライブコーディング</h3>

<p>最初は <a href="https://twitter.com/thinca">@thinca</a> によるライブコーディングでした。
個人的にスクリーンキャストとか実際に操作している画面を見るのはとても好きなのですが、ライブコーディングとして生でコード書いているのを見るのは初めてで、より面白かったです。</p>

<p>Vimから一切出ずに操作していたり、<code>CursorHold</code>で <code>cursorline</code> を設定するなどといった便利tipsが得られたりなど、
さすがthincaさんというべきか見ているだけでとてもおもしろかったのですが、周りの怖いVimmerたちがそこはこうじゃないか,などなど
デバッグ手伝ったり、果ては Lingrのvim部屋 にいた Shougo さんにリアルタイムでuniteを修正をしてもらうなど、
これがソーシャルコーディングか&hellip;!と驚きの連続でした。</p>

<ul>
<li>作成されたプラグイン: <a href="https://github.com/thinca/vim-quickmemo">thinca/vim-quickmemo</a></li>
<li>uniteの修正の様子: <a href="https://github.com/Shougo/unite.vim/commit/94a29bc73d91f6a7847bc22cb4d37a3f482f9ec9">https://github.com/Shougo/unite.vim/commit/94a29bc73d91f6a7847bc22cb4d37a3f482f9ec9</a></li>
</ul>


<p>まさかの <strong>1時間半</strong> にも渡るライブコーディングでしたが見ていて飽きず、面白かったです。thincaさんお疲れ様でした。</p>

<h3>フリータイム</h3>

<p>もくもく回となるかと思いきや,思った以上に交流会でﾜｲﾜｲという感じで非常に面白かったです。 <em>#進捗なんてなかった</em></p>

<p>vimのキーマップの話をしたり、vi過激派の設定を聞いて狂気を感じたり、何故かAtomしてる人がいたり、T-code という完全に人類には早すぎる入力メソッドの紹介などがあってとても楽しめました。</p>

<p><a href="https://twitter.com/itchyny">@itchyny</a> の <a href="https://github.com/itchyny/miv">itchyny/miv</a> というコマンドベースのHaskell製Vimプラグインマネージャの話が面白くて、ここでも来てよかったなぁと思いました。</p>

<p><code>miv</code>の存在は知っていたけど本当に知っていただけで全然試したこともなかったのですが、
聞いてみると興味をそそられました。
<code>NeoBundleLazy</code> は遅延ロード用の指定したコマンドなどを動的に設定しているけど、
いやそこは事前に生成できるし、そうすればもっと速くなるので<code>miv</code>はそうしてるなどといった利点の説明や、
コマンドラインベースなのでシェルからプラグイン一覧を簡単に出したり、それぞれに<code>git gc</code>したりなどといった
使い方がとても良さそうでした。</p>

<p>ネックなところがあるとすれば個人的には<code>yaml</code>にVim scriptを書くところがやはり気になるのですが、試してみたいと思いました。</p>

<blockquote><p><strong>既存のものに不満を持ちましょう</strong></p></blockquote>

<p>とitchynyさんが最後に締めくくったのが個人的には結構ささりました。
<del>今のところ<code>NeoBundleLazy</code>に不満がなかったとか言えない&hellip;</del></p>

<p>割と大きいプラグインになると少々不満を持ってもだいたい無意識のうちにデカくて改善するのも大変そう, そもそもそんな大きいプロジェクトを改善するプログラミング力足りてなさそう&hellip;などと考えて、振り返ればそうやって妥協してるところが多々あるなぁということを再確認しました。</p>

<p>ぼくの一番大きいVim活プロジェクトとしては、やっぱりEasyMotionになってしまうのですが、
この <a href="http://haya14busa.com/mastering-vim-easymotion/">EasyMotionの開発を<del>乗っ取った</del>引き継いだ</a>という話は
それこそ、それまでのEasyMotionに不満があって、より改善したい!という思いからゴリ押しで進めたところがあって、
周りのVimmerたちに助けを求めながらもある程度の成果を出すことができました。</p>

<p>そもそもの <code>NeoBundle</code> もおそらく <code>Pathogen</code>や <code>Bundle</code>といった既存マネージャに満足できない、不満があったから <code>NeoBundle</code>が作られたのだと思います(当時の話は知りませんが)。</p>

<p>やはりこういう「不満」を持って、大きいプロジェクトでも妥協せずに取り組んで行くというのは、1つのあるべき姿だなぁと改めて感じました。</p>

<p>がんばりたい</p>

<h3>発表した</h3>

<ul>
<li>Slide資料: <a href="http://haya14busa.github.io/slide/2014-06-28-osaka-vim/">これからはじめるVimプラグイン開発</a></li>
</ul>


<p>そんなこんなで6時までのフリータイムだったのですが、残りだいたい30分。</p>

<p>「フリータイム&hellip;??きっと発表する人いるでしょ&hellip;? 用意出来てない&hellip;ﾔﾊﾞｲ!!!」
と実は朝起きてから2-3時間使ってざっくりスライドを書いたり、前からあったらいいなぁと思っていた
<a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a> を使った簡単なインクリメンタル検索の
拡張プラグインがサクッとプロトタイプが作れてライブコーディングするのにいいんじゃないかなーと考えていたのでした。</p>

<p>他のVimmerたちと話しているのが面白かったとか、他の進捗だそうと思っていたとか、
あんまり用意してないし別にやらなくてもいいかなーとかいろいろ思ってたのですが、
結局一番やろうとしなかった理由は勉強会で発表とか全くやったことないので日和ってたとかいう
ﾀﾞﾒﾀﾞﾒな理由だったので、せっかくスライド作ったしｴｲﾔｰと発表しました。</p>

<p>が、完全に言い出す時間が遅くて時間足りなかった上、そもそも十分に用意できてないのでグダったところもありなかなかつらみがありました&hellip;</p>

<p>こういう勉強会って、別に全員がプラグイン書いてるような怖い方ばかりではなく、結構そのへんはやったことないよーという
かたもたくさんいると思うので、そのあたりの層でこれからVimプラグイン作ってみたいって方向け(いると信じてる)
に簡単なプラグインの構造と、僕がやってて便利だなぁーと思っていたデバッグの仕方を中心に発表しました。</p>

<p>反応はイマイチわからなかった()</p>

<p>その後にvital-overつかったインクリメンタル検索プラグインは、便利そう感はある程度伝わったような気がしたのですが、結局既存のものを見せるだけで終わった感がなきにしもあらず、ほんとにもっと早めに始めとけばよかったと反省しました&hellip;
しかも、thincaさんが言っていたように、完全に作ってしまったものをそのまま書き直すのはライブコーディングっぽくもないので、簡単なプロトタイプにあえて留めて完成度もまだ低かったので出来ているものを見せてもそこまで大したものではなく輪をかけて反省でした。@各位 スイマセンでした</p>

<h2>懇親会&hellip;そしてカラオケオールへ</h2>

<p>その後、懇親会にいって美味しい料理を食べながらﾜｲﾜｲ話したりしてとても満足でした。
アルコール入ったままカラオケオールは終盤つらくて帰って爆睡しました。若さがたりない。</p>

<p>カラオケ中のvimrc 読書会が終了したあとサイトの更新で自動化できてなくて自分が更新ミスったこともあり、
初めて ruby さわってみて 次に読むvimrcを更新する簡単なスクリプトをrubyで書きました。</p>

<ul>
<li><a href="https://github.com/vim-jp/reading-vimrc/blob/gh-pages/scripts/update_next_vimrc.rb">https://github.com/vim-jp/reading-vimrc/blob/gh-pages/scripts/update_next_vimrc.rb</a></li>
</ul>


<p>更新便利になって満足。</p>

<p>Vim部屋にも関わらず、rubyのインタラクティブシェルのことをlingrで聞いてpryを教えてもらったり、iyuuyaさんに<code>anyenv</code>つかって<code>rbenv</code>でrubyの環境管理するのを教えてもらったり、できたあとにvim部屋で何故かrubyスクリプトのレビューしてもらったりと、なかなかやっていて楽しかったです。教えてくださった各位ありがとうございました!</p>

<p>何気にOsaka.vimで出した目に見える進捗がこのスクリプトくらいでVim scriptは進捗ﾀﾞﾒﾃﾞｼﾀ&hellip;</p>

<h2>次回&hellip;?</h2>

<p>きっと来月か再来月までにはOsaka.vim #2が開催されると思うのでぜひ#1に参加した人も、そうでない人も参加しましょう！</p>

<p>思った以上に京都の学生が多かったのでKyoto.vimもﾜﾝﾁｬﾝあるんじゃないかとかも思うけどどうでしょうね(ﾁﾗｯ</p>

<p>Osaka.vim #1, とっても楽しかったです。お疲れ様でした！</p>

<p><strong><code>:wq Osaka.vim_01</code></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimプラグイン読書会第5回が4/12(土)21:00から開催されます]]></title>
    <link href="http://haya14busa.com/reading-vimplugin-05-senden/"/>
    <updated>2014-04-12T12:57:25+09:00</updated>
    <id>http://haya14busa.com/reading-vimplugin-05-senden</id>
    <content type="html"><![CDATA[<h2>第5回 Vimプラグイン読書会</h2>

<ul>
<li>日時: 2014/04/12 Sat 21:00 -</li>
<li>場所: <a href="http://lingr.com/room/vim">LingrのVim部屋</a></li>
<li>読むプラグイン:

<ul>
<li><a href="https://github.com/vim-jp/vital.vim">vim-jp/vital.vim</a></li>
</ul>
</li>
<li>目的: Vim scriptでリスト、文字列、辞書の効率的かつ汎用的な扱い方を学ぶ</li>
</ul>


<p><strong>!!!本日(4/12)の21:00から開催です!!!</strong> <del>また宣伝記事が当日になってしまった&hellip;</del></p>

<p><strong>初心者でも歓迎ですよ</strong></p>

<p><a href="https://github.com/vim-jp/vital.vim/issues/80">昔開催されたvital.vim読書会</a>では、<code>Data.String</code>を読んだらしいので、今回は<code>Data.List</code>と<code>Data.Dictionary</code>のどちらか1つ,または両方を読むと思います。</p>

<h2>読みどころ</h2>

<p><a href="https://github.com/vim-jp/vital.vim">vital.vim</a>は主にvim-jpのVim script超詳しいマンのかっくいい方々が開発している Vim プラグインのためのライブラリです。これまでVimプラグイン読書会で読んだプラグインは何かしらVimの機能自体を拡張していたのに対し、vital.vimはあくまでも<em>ライブラリ</em>であり、Vim scriptによる汎用的かつ効率的なリストやディクショナリなどなどの操作の仕方を学べるので、「まだVim独自の仕様とかよくわからない&hellip;」という方にとっても読みやすくてよいかもしれません。Vim scriptまだ良くわからないという方も含め、ぜひぜひ気軽に参加してください!</p>

<p>また、vital.vimでなにが出来るのかも外から見ただけではイマイチよくわからなかったりするので、どういう関数が提供されていて、どういう仕様なのかなぁーとさらっと見ていくだけでも面白いんじゃないかと思います。</p>

<h2>vitalの使い方サンプル</h2>

<p>インストールした後適当なスクラッチバッファでQuickrunとかして動作確認しながら読むとよいかもしれない(かも)。vimrcに書いて自作vimrc関数で使ってもOKです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NeoBundle 'vim-jp/vital.vim'
</span><span class='line'>
</span><span class='line'>" vital.vimを単体で使う場合は`vital#of('vital')`
</span><span class='line'>" プラグインに組み込む場合は引数の'vital'の代わりにプラグインの名前(Vitalize --name で指定した値)
</span><span class='line'>let s:V = vital#of('vital')
</span><span class='line'>
</span><span class='line'>" vitalのData.Listをimportする。
</span><span class='line'>" 基本的に s:List.&lt;utility_function&gt;(arguments) という使い方をする
</span><span class='line'>" :h vital-data-list.txt
</span><span class='line'>let s:List = s:V.import('Data.List')
</span><span class='line'>
</span><span class='line'>echo '= flatten =========='
</span><span class='line'>
</span><span class='line'>" リストをフラットに
</span><span class='line'>echo s:List.flatten([[1],[2,[3,4]]])
</span><span class='line'>" -&gt; [1,2,3,4]
</span><span class='line'>
</span><span class='line'>echo '= push & pop ======='
</span><span class='line'>
</span><span class='line'>" スタックスタック
</span><span class='line'>let s = []
</span><span class='line'>echo s:List.push(s, 1)
</span><span class='line'>" [1]
</span><span class='line'>echo s:List.push(s, 2)
</span><span class='line'>" [1, 2]
</span><span class='line'>echo s:List.push(s, 3)
</span><span class='line'>" [1, 2, 3]
</span><span class='line'>echo s
</span><span class='line'>" [1, 2, 3]
</span><span class='line'>echo s:List.pop(s)
</span><span class='line'>" 3
</span><span class='line'>echo s:List.pop(s)
</span><span class='line'>" 2
</span><span class='line'>echo s
</span><span class='line'>" [1]
</span><span class='line'>
</span><span class='line'>echo '= uniq ============='
</span><span class='line'>
</span><span class='line'>" ユニークな値だけを残す。最近vim本体にも組み込まれたはずだけど仕様は異なる
</span><span class='line'>echo s:List.uniq(['vim', 'emacs', 'vim', 'vim'])
</span><span class='line'>" ['vim', 'emacs']
</span><span class='line'>
</span><span class='line'>" 条件つけたりも
</span><span class='line'>echo s:List.uniq_by(
</span><span class='line'>\ ['vim', 'Vim', 'VIM', 'emacs', 'Emacs', 'EMACS', 'gVim', 'GVIM'],
</span><span class='line'>\ 'tolower(v:val)')
</span><span class='line'>" ['vim', 'emacs', 'gVim']
</span><span class='line'>
</span><span class='line'>echo '= zip =============='
</span><span class='line'>
</span><span class='line'>" Vim girlイラスト、zipでください
</span><span class='line'>echo s:List.zip([1, 2, 3], [4, 5, 6])
</span><span class='line'>" [[1, 4], [2, 5], [3, 6]]
</span><span class='line'>echo s:List.zip([1, 2, 3], [4, 5, 6], [7, 8, 9])
</span><span class='line'>" [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
</span><span class='line'>
</span><span class='line'>" etc...</span></code></pre></td></tr></table></div></figure>


<p>Vimプラグインに組み込む方法の詳しい日本語記事とか意外と無いし、アップデートは<code>Vitalize .</code>だけでOKとかはhelpにも書いていないような気がするのでそのうち記事を誰かが書いてくれるはず。</p>

<p>僕はまだvital自体をそんなに使ってないですが、<a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a>というvitalの外部モジュール機能を使った<code>vim-over</code>のライブラリを使わせてもらったりしてます。vitalとても便利なのでｵｽｽﾒです。</p>

<h2>過去のVim Advent Calendar の vital に関する記事</h2>

<ul>
<li><a href="http://qiita.com/rbtnn/items/deb569ebc94d5172a5e5">vital.vimをどんどん使っていこう。 - Qiita</a></li>
<li><a href="http://vim-users.jp/2013/03/vim-advent-calendar-2012-ujihisa-6/">vitalのData.List.take_whileを例にvital開発の指南書</a></li>
<li><a href="http://vim-users.jp/2013/03/vim-advent-calendar-2012-ujihisa-8/">構文解析器kp19ppと字句解析器Vital.Lexerを用いた超簡単な処理系作成方法</a></li>
<li><a href="https://gist.github.com/ujihisa/5761509">Vital.ProcessManagerとその無限の可能性について</a></li>
<li><a href="http://rhysd.hatenablog.com/entry/2013/11/08/224821">コマンドオプションを解析するライブラリ Vital.OptionParser を書いた - sorry, uninuplemented:</a></li>
</ul>


<p>適当にVACで検索しただけだったりする。<code>OptionParser</code>とか使ってみたいかも。</p>

<h2>本日21:00開催のVimプラグイン読書会に参加しよう!!!</h2>

<p>と、言うことでVimプラグイン読書会に参加してvitalを読んで実際に使ってみたり、バグとか改善点を見つけ本体にｺﾝﾄﾘﾋﾞｭｯｼｮﾝしたりしましょう！初心者でも歓迎ですし質問すれば詳しい方が解説してくれるはずです。「hi」と発言して読んでることを宣言してもらえるだけでも少なくとも僕は喜びます。 <del>人数少なすぎると読書会の存続自体が危うくなるのでhiだけでも便利</del></p>

<p>本日21:00から、<a href="http://lingr.com/room/vim">LingrのVim部屋</a>で開催です！ぜひ参加してください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[かゆいところに手が届く、vim-submodeでxの挙動をカイゼンする]]></title>
    <link href="http://haya14busa.com/improve-x-with-vim-submode/"/>
    <updated>2014-03-24T09:10:46+09:00</updated>
    <id>http://haya14busa.com/improve-x-with-vim-submode</id>
    <content type="html"><![CDATA[<h2>Vim Advent Calendarです</h2>

<p>この記事は<a href="http://atnd.org/events/45072">Vim Advent Calendar 2013 : ATND</a>の 108 日目の記事になります。日付がおかしいとか細かいことは気にしてはいけません。Vim Advent CalendarはVim記事を書きたいという人がいるかぎり続きます。しかしいったい、いつまで続くんでしょう&hellip;気になります!</p>

<p>Vimに関することであれば基本的に何を書いてもよいはずなので、興味がある方は気軽に書いてみるとよいのではないでしょうか。</p>

<h2>vim-submodeで x の挙動をカイゼンする</h2>

<p><a href="https://github.com/kana/vim-submode">kana/vim-submode</a></p>

<p>Lingrで発言したときに若干反応があったのでVAC Tipsとして簡単なものですが紹介します。</p>

<p>Vimデフォルトの<code>x</code>はカーソル下の文字を消すという機能です。</p>

<p><code>x</code>の挙動のちょっとした不満点として1文字消すためだけにレジスタを汚してしまうというものがあり、それをカイゼンするために<code>nnoremap x "_x</code>を設定しているvimrcをたまに見かけます。</p>

<p>しかし、よくみるレジスタの問題の他にも不満点がありました。それは<code>x</code>後の<strong><code>u</code>ndo</strong>の挙動です。</p>

<p><code>x</code>で1文字消すごとにundo履歴が区切られてしまい、いざ<code>x</code>を連打した後に間違っていると判明して、<code>u</code>ndoしたい!と思っても、<code>x</code>を押した分だけ何回も何回も<code>u</code>を押さなくてはいけません。</p>

<p>連続した<code>x</code>で一気に消した分は、1回のundoで戻せたら素敵じゃないでしょうか?</p>

<p>そんな機能を実現できる、かゆいところに手が届くプラグインが<a href="https://github.com/kana/vim-submode">vim-submode</a>です。</p>

<h3>コード</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;kana/vim-submode&#39;</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:my_x<span class="p">()</span>
</span><span class='line'>    <span class="k">undojoin</span>
</span><span class='line'>    normal<span class="p">!</span> <span class="c">&quot;_x</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>my<span class="p">-</span><span class="k">x</span><span class="p">)</span> :<span class="p">&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span><span class="k">call</span> <span class="p">&lt;</span>SID<span class="p">&gt;</span>my_x<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="k">call</span> submode#enter_with<span class="p">(</span><span class="s1">&#39;my_x&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;&quot;_x&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">call</span> submode#map<span class="p">(</span><span class="s1">&#39;my_x&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;Plug&gt;(my-x)&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>簡単に解説すると、最初に<code>x</code>を押した時に<code>"_x</code>でブラックホールレジスタに放り込んで1文字消すと同時に<code>my_x</code>という<code>submode</code>に入るようにし、この<code>my_x</code>という<code>submode</code>下での<code>x</code>は事前に定義した<code>&lt;Plug&gt;(my-x)</code>を呼んで、<a href="http://vim-jp.org/vimdoc-ja/undo.html#%3Aundojoin">undojoin</a>を使用することによりundo履歴を1つにまとめています。</p>

<blockquote><p>:undoj[oin] 以降の変更を直前の undo ブロックにつなげる。</p>

<p>&ndash; <cite><a href="http://vim-jp.org/vimdoc-ja/undo.html">Vim documentation: undo</a></p></blockquote>

<h3>欠点</h3>

<p><code>x</code>連打してここまで消したい！というときに1〜2カラム分行きすぎてしまったなどといった場合、<code>u</code>ndoすると初めから全部戻ってしまいます。一長一短ですね&hellip;</p>

<p>しかし、undo履歴が汚れ無いようになるし、結構気に入っています。ﾋﾟﾝと来た方は使ってみてはいかがでしょうか?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim-EasyMotionでカーソル移動を爆速にして生産性をもっと向上させる]]></title>
    <link href="http://haya14busa.com/mastering-vim-easymotion/"/>
    <updated>2014-03-23T21:34:54+09:00</updated>
    <id>http://haya14busa.com/mastering-vim-easymotion</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://atnd.org/events/45072">Vim Advent Calendar 2013 : ATND</a>の 113 日目の記事になります。</p>

<p>また『EasyMotionか!』と思う方も中にはいるかもしれませんが、実は誕生日VACだったりするので許してください。 <em>Happy Vimming to me</em>.</p>

<h2>カーソル移動がエディット時間の80%を占める</h2>

<p>Vimでエディットしている時間の中で、カーソル移動の割合は恐らく80%以上を占めてます[当社比][要出典]</p>

<p>何をするにしても基本的にはカーソルを移動させ、それからVimの強力な<code>operator</code>や<code>textobject</code>を駆使してテキストをエディットしたり、<code>Insert</code>モードに入って文字を入力するでしょう。また<code>tag</code>ジャンプや、<code>*</code>,<code>#</code>などでカーソル下の単語を検索して移動するために、そこまでカーソルを移動させるという『カーソル移動のためのカーソル移動』をするケースだってあります。</p>

<p>多くのVimmerは方向キーの代わりにホームポジションにある<code>hjkl</code>でカーソル移動をすることによって無駄な手の移動をなくし、スムーズなカーソルを実現することによって生産性を高めることからはじまります。</p>

<p>しかし、すべての移動を<code>hjkl</code>で行うには数字キーのカウントで一気に行えるということを差し引いても非常に無駄が多く、<strong><code>hjkl</code>の先</strong>のモーションを覚える必要があります。</p>

<ul>
<li><code>w</code>,<code>b</code>といった<code>Word</code>単位での移動</li>
<li><code>f</code>,<code>F</code>を使った行内の文字を<code>Find</code>する移動</li>
<li><code>)</code>,<code>(</code>の文単位の移動や,<code>}</code>,<code>{</code>のパラグラフ単位の移動</li>
<li><code>/</code>,<code>?</code>,<code>*</code>,<code>#</code>を使った検索による移動</li>
<li><code>H</code>,<code>M</code>,<code>L</code>による画面内移動</li>
<li><code>&lt;C-o&gt;</code>,<code>&lt;C-i&gt;</code>,<code>gi</code>,<code>g;</code>,<code>[(</code>, etc&hellip;といった特殊なJumpモーション</li>
<li><code>vimgrep</code>や外部の<code>grep</code>機能を使った<code>grep</code>によるファイルを横断する移動</li>
<li>etc&hellip; 詳しくは<a href="http://vim-jp.org/vimdoc-ja/motion.html#motion.txt">:h motion.txt</a></li>
</ul>


<p>また、単純な移動ではなく<code>operator</code>と組み合わせることによって真価を発揮する<code>textobject</code>もモーションの一種で、一部のJumpや上記したgrepによる移動などを除いた多くの<code>Motion</code>は<code>d</code>elete,<code>y</code>ank,<code>c</code>hangeといった<code>Operator</code>と組み合わせることができ、<code>Motion</code>は単純に移動だけを補助する仕組みにとどまらない、非常に重要な概念です。</p>

<p>しかし、これらモーションの種類はあまりにも多くて適切に使い分けるのが難しかったり、これだけあってもかゆいところに手が届かなかったりします。</p>

<p>そこで、そのモーション機能に一石を投じるプラグインの1つが<strong><a href="https://github.com/Lokaltog/vim-easymotion">vim-easymotion</a></strong>です</p>

<h2>Vim Motions on Speed!</h2>

<p><a href="https://github.com/Lokaltog/vim-easymotion">Lokaltog/vim-easymotion</a></p>

<p><img src="../images/gif/easymotion_on_speed_ex.gif" alt="easymotion_on_speed_ex" /></p>

<h3>How to Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NeoBundle 'Lokaltog/vim-easymotion'</span></code></pre></td></tr></table></div></figure>


<p>EasyMotionは主に<em>スクリーン内の見えている範囲の移動</em>において<strong>最小</strong>のキーストロークで<strong>爆速</strong>にカーソルを移動させることを目指したカーソル移動系プラグインです。</p>

<h3>TL;DR</h3>

<p>主観で1つだけイチオシ機能を紹介するなら</p>

<p><code>nmap s &lt;Plug&gt;(easymotion-s2)</code>によって<code>s{char}{char}{label}</code>のわずか<strong>4</strong>キーストロークで画面内のどこへでも<strong>素早く</strong>移動できる</p>

<p>という機能です。詳しくは下記で説明しますが、個人的にはこれが現在一番はやく、スムーズに移動できる汎用的な手段だと思っています。</p>

<h3>EasyMotionのついて</h3>

<p>もともとは<a href="https://github.com/Lokaltog/">Lokaltog</a>氏が開発していたのですが、本人がEmacsに移行するなど長らく開発が止まっており、せっかくコンセプトがよいのに惜しいところがたくさんありました。</p>

<p>そこで僕がforkして活動量のゴリ押しで改善,開発していたところ、コラボレータとして開発を引き継がないか？と提案され、現在は僕がメインで開発を行っています。</p>

<p>実は<a href="http://haya14busa.com/vim-lazymotion-on-speed/">VAC2012の記事</a>でもEasyMotionについて紹介したのですが、その時点ではfork状態で、開発もまだまだ途中だったので、晴れて開発を引き継いで安定もしてきた今、もう一度前回の記事以降に追加された機能などをメインに紹介します。</p>

<p>ということで、ある程度基本のコンセプトは知っているという前提でここから書いていきます。が、知らなくてもgifや<a href="https://github.com/Lokaltog/vim-easymotion">README</a>を軽くみればなんとなくわかっていただけるかなぁとも思います。EasyMotion,オススメですよ!</p>

<h2>Now, EasyMotion is Completely Well-behaved</h2>

<p>EasyMotionは前回紹介させていただいた時点では<code>&lt;Plug&gt;</code>マッピングすらちゃんと提供できていなかったり、いろいろな制約上好ましくない挙動を示していたりもしたのですが、<code>&lt;Plug&gt;</code>マッピングの提供やバグフィックスなどなどを行って、晴れて<em>お行儀の良い</em>プラグインになったと思います。</p>

<p>確かに、後方互換性のためにデフォルトのキーバインドは設定されるという点はありますが、<code>let g:EasyMotion_do_mapping = 0</code>とすることで回避できます。</p>

<p>『お行儀のいい』なんて当たり前のようなことですが、これはプラグインにとっては重要なことですし、<code>normal</code>,<code>visual</code>,<code>operator-pending</code> modeのすべてのモードで正しく動作し、<a href="https://github.com/tpope/vim-repeat">tpope/vim-repeat</a>を追加でインストールすれば<code>.</code>によるドットリピートも有効にするなどと、地味に苦労はしました&hellip;</p>

<h2>Now, EasyMotion is Completely Configurable</h2>

<p><code>&lt;Plug&gt;</code>マッピングによって、デフォルトで紹介されている機能に加えて様々なモーションを提供しており、自分好みの機能を選択して快適に使うことができます。</p>

<p>こう聞くと機能追加しすぎて遅くなってるんじゃ..みたいなことも考えられますが、ほとんどはコードを加えたというよりも引数などオプションで挙動を変えただけなので、機能追加を目指して肥大化しているということは(おそらく)ないです。逆にハイライト周りの速度改善を行ったりなどしたのでそのへんはここで明記しておきます。</p>

<p><code>nmap</code>,<code>omap</code>,<code>xmap</code>などで柔軟にマップできるのは勿論、画面の背景を灰色にする<code>shade</code>オプションなど、たいていの機能は<code>Configurable</code>、柔軟に設定可能になりました。</p>

<p>例えば新たに追加された機能として<code>Within Line Motion</code>という、ターゲットの対象をカーソル行だけに絞ったモーションがあります。</p>

<p>一見対象を絞るなんてバカげているアイデアのようにも思えますが、EasyMotionはターゲットが1つしかない場合はラベルを選択するフェーズを飛ばして自動的にジャンプしてくれるので以下のような設定をすると便利になったりします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map <span class="k">f</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>fl<span class="p">)</span>
</span><span class='line'>map <span class="k">t</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">tl</span><span class="p">)</span>
</span><span class='line'>map F <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>Fl<span class="p">)</span>
</span><span class='line'>map T <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>Tl<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだと、例えば<code>df{char}</code>とした時にカーソル行に<code>{char}</code>が1つであればVimデフォルトの<code>f</code>の機能、2つ以上あればラベルで選択するという挙動が可能です。対象の<code>{char}</code>が1つしかないというケースは多いですし、逆に2つ以上あった時にはVimデフォルトの<code>f</code>だと数値を正しくカウントすることは面倒だし、1つ目だと思っていたのにその途中に存在していた同じ<code>{char}</code>を見落としていて、思っていた部分まで<code>delete</code>できないなどといったケースを回避することができます。</p>

<p>url内のスラッシュ(<code>/</code>)やLispの<code>()</code>の連続、Vimのautoload関数の<code>#</code>などなどの1行に同じ文字がたくさんあるけど<code>f</code>や<code>t</code>で<code>d</code>や<code>c</code>したい!というケースで特に有用だったりします。</p>

<p>勿論<a href="https://github.com/tpope/vim-repeat">tpope/vim-repeat</a>があれば<code>.</code>リピートも可能です。</p>

<p>また基本的にすべてのモーションは<code>bidirection</code>機能、つまり対象とする範囲を<code>forward</code>/<code>backward</code>の両方向にできるモーションも提供しているので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map <span class="k">f</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">bd</span><span class="p">-</span>fl<span class="p">)</span>
</span><span class='line'>map <span class="k">t</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">bd</span><span class="p">-</span><span class="k">tl</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>このようにマップして、<code>F</code>と<code>T</code>の挙動をまかなったり、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>omap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">w</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">bd</span><span class="p">-</span>wl<span class="p">)</span>
</span><span class='line'>omap <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">e</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">bd</span><span class="p">-</span><span class="k">el</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>このようにoperator-pending時だけ指定する、などなど好きなようにマッピングすることができるようになっています。</p>

<h2>Now, EasyMotion is Completely Sophisticated</h2>

<p><a href="http://haya14busa.com/vim-lazymotion-on-speed/">前回</a>から追加された特に便利な機能としては2つあります。</p>

<h3>2-key Find Motion</h3>

<p>1つ目は以前までの<code>&lt;Leader&gt;f{char}</code>(<code>&lt;Plug&gt;(easymotion-f)</code>)のfind motionを拡張した2つ<code>{char}</code>を指定できる機能です。</p>

<p><a href="https://github.com/goldfeld/vim-seek">goldfeld/vim-seek</a>/<a href="https://github.com/justinmk/vim-sneak">justinmk/vim-sneak</a>がデフォルトの<code>f</code>で<code>{char}</code>を2つ指定できるという機能にインスパイアされて実装し、最近はこのモーションが以前まで常用していた<code>s{char}</code>(<code>nmap s &lt;Plug&gt;(easymotion-s)</code>)の<code>{char}</code>が1つのモーションよりも快適で、慣れれば最高のカーソル移動手段になると思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>nmap <span class="k">s</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>s2<span class="p">)</span>
</span><span class='line'>xmap <span class="k">s</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>s2<span class="p">)</span>
</span><span class='line'><span class="c">&quot; surround.vimと被らないように</span>
</span><span class='line'>omap z <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>s2<span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot;もしくはこんな感じがオススメ</span>
</span><span class='line'>map <span class="p">&lt;</span>Space<span class="p">&gt;</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>s2<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>最小のキーストロークで、スムーズに、素早く移動できる</h3>

<p>最初に述べましたがこれによって<code>s{char}{char}{label}</code>というわずか<strong>4</strong>キーストロークで画面内の(主にmiddleからlong range)の移動をたった<strong>1つ</strong>のキーバインド(<code>s</code>)でまかなうことができます。</p>

<p>以前の<code>s{char}{label}</code>だと、多くのターゲットにマッチしすぎて<code>{label}</code>を2回押す必要があるケースが多々ありました。一度に押すべきラベルを2つ提示する機能を前回までに実装していてある程度楽になっていたとはいえ、<code>{char}</code>は最初から押すべきキーがわかっているのに対し、<code>{label}</code>は基本的に何が出るかわからず『ラベルを視認してから押す』という段階を踏む必要があって押しにくいのです。</p>

<p>今回の2-key find motionであれば、まず押すべきラベルが2つになることはないですし、<code>{char}{char}</code>の部分は最初から押すべきキーがわかっているので素早く押すことが出来ます。</p>

<p>また<code>{char}{char}</code>と2つの組み合わせで指定するので、最初から画面内にマッチするものが1つだけで、ラベルを押さずに一瞬で移動できるということも多々あってよいです。(例: 冒頭で提示したgif画像は<code>fi</code>にマッチするものが1つしかなく、一瞬でジャンプしています。)</p>

<p>単に最小限のキーストロークという観点でいえば<code>&lt;Plug&gt;(easymotion-s)</code>で<code>s{char}{label}</code>という3キーストロークのほうが少ないのですが、平均すると<code>s{char}{char}{label}</code>とした方が全体としては快適に移動できるので、慣れるまで使ってみる価値はあると思います。</p>

<h3>Minimumにこの機能だけつかいたい</h3>

<p>この機能は特にイチオシなので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;Lokaltog/vim-easymotion&#39;</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:EasyMotion_do_mapping <span class="p">=</span> <span class="m">0</span> <span class="c">&quot;Disable default mappings</span>
</span><span class='line'>nmap <span class="k">s</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>s2<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>というミニマムな構成で使うのもよいと思います。また実際にこのような使い方をしている方も見かけました。</p>

<h3>補足とか。</h3>

<h4><code>s{char}&lt;CR&gt;</code></h4>

<p><code>s{char}&lt;CR&gt;</code>と<code>{char}</code>を1つの状態でエンターキーを押すとそのまま1つの<code>{char}</code>で検索されます。</p>

<h4><code>s&lt;CR&gt;</code></h4>

<p><code>s&lt;CR&gt;</code>と<code>{char}</code>を1つも押さずにエンターキーを押すと、前回の<code>s{char}{char}</code>というモーションをリピートすることができます。便利。</p>

<h4>Jump to first match</h4>

<p>1つ目のマッチに飛びたいというケースが多々あり、その都度ラベルのキーを押すのは面倒です。</p>

<p>そこで下記の設定をするとラベル選択時に<code>&lt;Space&gt;</code>か<code>&lt;CR&gt;</code>を押すことによって最初のマッチに飛ぶことが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Jump to first match with enter &amp; space</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:EasyMotion_enter_jump_first <span class="p">=</span> <span class="m">1</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:EasyMotion_space_jump_first <span class="p">=</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>初めから1つ目のマッチに飛びたいという場合に<code>s{char}{char}&lt;Space&gt;</code>と事前に押すべきキーがわかるので便利です。</p>

<h3>n-key Find Motion</h3>

<p>2つ目の大きな機能としては<code>{char}</code>としてn-keyの任意のキーを指定できるVimデフォルトの検索の拡張とも言えるべき機能です。</p>

<p>設定例:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; =======================================</span>
</span><span class='line'><span class="c">&quot; Search Motions</span>
</span><span class='line'><span class="c">&quot; =======================================</span>
</span><span class='line'><span class="c">&quot; Extend search motions with vital-over command line interface</span>
</span><span class='line'><span class="c">&quot; Incremental highlight of all the matches</span>
</span><span class='line'><span class="c">&quot; Now, you don&#39;t need to repetitively press `n` or `N` with EasyMotion feature</span>
</span><span class='line'><span class="c">&quot; `&lt;Tab&gt;` &amp; `&lt;S-Tab&gt;` to scroll up/down a page of next match</span>
</span><span class='line'><span class="c">&quot; :h easymotion-command-line</span>
</span><span class='line'>nmap <span class="k">g</span>/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">sn</span><span class="p">)</span>
</span><span class='line'>xmap <span class="k">g</span>/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">sn</span><span class="p">)</span>
</span><span class='line'>omap <span class="k">g</span>/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">tn</span><span class="p">)</span>
</span><span class='line'><span class="c">&quot; Support mappings feature</span>
</span><span class='line'>EMCommandLineNoreMap <span class="p">&lt;</span>Space<span class="p">&gt;</span> <span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>EMCommandLineNoreMap ; <span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>EMCommandLineNoreMap <span class="p">&lt;</span>C<span class="p">-</span><span class="k">j</span><span class="p">&gt;</span> <span class="p">&lt;</span>Space<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>冒頭のgifで最後にお見せしたモーションです。Vimデフォルトの<code>incsearch</code>が最初のマッチだけインクリメンタルにハイライトするのに対して、こちらはすべてのマッチをインクリメンタルにハイライトします。また<code>&lt;CR&gt;</code>でEasyMotionの機能が起動されてラベルを選択できるので、<code>n</code>や<code>N</code>などを何回も押して移動するという必要がなくなります。</p>

<p>またこのモーションは対象の範囲を画面内にとどまらずに画面外まで探してくれるので、入力している最中にスクリーン内に対象がなくなればVimデフォルトの<code>/</code>と同じように自動でスクロールしますし、飛びたい目的のマッチが画面内にない場合は<code>&lt;Tab&gt;</code>キーを押すことによってスクロールし、また単に次のページに飛んだのではなく、その先の検索した文字列に最初にマッチするページまで飛んでくれます。逆に前方向にスクロールする場合は<code>&lt;S-Tab&gt;</code>です。</p>

<p>正直、文章だとわかりずらいし、gifを見てもまだわかりずらいかもしれませんが、バッファのテキストを検索して移動する場合、デフォルトの<code>/</code>だと何回も何回も<code>n</code>を押す必要があったりして面倒くさい!というつらみを解消することができます。</p>

<p>このfind motionのコマンドラインインターフェースはおしょーさん作で<a href="https://github.com/osyo-manga/vim-over">osyo-manga/vim-over</a>で使われていたものをvitalのライブラリ,<a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a>として作ってもらい、これを使用させていただいています。おしょーさんいろいろ本当にありがとうございました。</p>

<p>この<a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a>のコマンドラインのおかげで、Vimデフォルトの履歴やレジスタ挿入といった機能やマッピングといったほとんどの機能が擬似的に実装されており、さらにバッファのテキストの補完(EasyMotionではデフォルトで<code>&lt;C-l&gt;</code>)が使えたりと、デフォルトの<code>/</code>を置き換えれるレベルのものになっていると思います。</p>

<p>この機能と似ている(というかもともと先に実装されていた)<a href="https://github.com/t9md/vim-smalls">t9md/vim-smalls</a>では、<code>&lt;CR&gt;</code>でexcursionモード、<code>;</code>でラベルの表示となっています。</p>

<p>実際に使ってみると<code>;</code>をターゲットとして選択できない代わりに<code>;</code>で起動するのがとても押しやすくて便利なのですが、これもマッピングをつかえばEasyMotionでも可能となります。個人的には<code>&lt;Space&gt;</code>が押しやすくていいし、<code>\s</code>などで代替できるので<code>EMCommandLineNoreMap &lt;Space&gt; &lt;CR&gt;</code>を設定しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>EMCommandLineNoreMap ; <span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>EMCommandLineNoreMap <span class="p">&lt;</span>Space<span class="p">&gt;</span> <span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>実はこのコマンドラインインターフェースの機能は<code>&lt;Plug&gt;(easymotion-s2)</code>、<code>&lt;Plug&gt;(easymoton-s)</code>といった1文字や2文字のfind motionでも使うように変更しているので、2-key findmotionでのエンター代わりに<code>&lt;Space&gt;</code>をつかうといったことが可能だったりします。</p>

<h2>その他の追加機能</h2>

<h3>Repeat Motion</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;&lt;</span>Leader<span class="p">&gt;</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>repeat<span class="p">)</span>
</span><span class='line'>map <span class="p">&lt;</span>C<span class="p">-</span><span class="k">n</span><span class="p">&gt;</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>next<span class="p">)</span>
</span><span class='line'>map <span class="p">&lt;</span>C<span class="p">-</span><span class="k">p</span><span class="p">&gt;</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">prev</span><span class="p">)</span>
</span><span class='line'><span class="c">&quot; map ; &lt;Plug&gt;(easymotion-next)</span>
</span><span class='line'><span class="c">&quot; map , &lt;Plug&gt;(easymotion-prev)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>&lt;Plug&gt;(easymotion-repeat)</code>で前回のモーションをリピートしたり、<code>&lt;Plug&gt;(easymotion-next)</code>,<code>&lt;Plug&gt;(easymotion-prev)</code>で<code>;</code> &amp; <code>,</code>のように次/前のマッチに飛ぶことができます。</p>

<p>最初にジャンプしたところと似たところにジャンプして<code>.</code>リピートしたいといったケースなどで、最初に移動して編集したあとは<code>&lt;Plug&gt;(easymotion-next)</code>で次のマッチに移動して、<code>.</code>リピート!といったことが出来ます。</p>

<p>またハイライトがカーソル移動などで自動で消えるという実装なので、この挙動が好みならば下記のように設定すればよくある<code>:nohlsearch</code>コマンドでわざわざハイライトを消すという作業をしなくて済むようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="k">nohlsearch</span>
</span><span class='line'>map  / <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">sn</span><span class="p">)</span>
</span><span class='line'>omap / <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">tn</span><span class="p">)</span>
</span><span class='line'>map  <span class="k">n</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>next<span class="p">)</span>
</span><span class='line'>map  <span class="k">N</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">prev</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; いらなくなる</span>
</span><span class='line'><span class="c">&quot; nmap &lt;silent&gt; &lt;Esc&gt;&lt;Esc&gt; :&lt;C-u&gt;nohlsearch&lt;CR&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Migemoの改善</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">g</span>:EasyMotion_use_migemo <span class="p">=</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>migemo機能をONにすると結構時間がかかってしまうという欠点があったのですが、画面内にマルチバイト文字がない場合に自動的にOFFにすることにより、普通にコードを書いているときはmigemoの遅さを気にせず使えるようになりました。</p>

<p>また、<code>cmigemo</code>がインストールされていた場合は上述した2-key &amp; n-key find motionでもmigemo機能が有効になります。</p>

<h3>その他いろいろ</h3>

<p><strong>その他いろいろです!!!!!</strong></p>

<h2>他のカーソル移動系プラグインとか素Vimとかと比較</h2>

<ul>
<li><a href="https://github.com/rhysd/clever-f.vim">rhysd/clever-f.vim</a></li>
<li><a href="https://github.com/justinmk/vim-sneak">justinmk/vim-sneak</a> (<a href="https://github.com/goldfeld/vim-seek">goldfeld/vim-seek</a>)</li>
<li><a href="https://github.com/t9md/vim-smalls">t9md/vim-smalls</a></li>
</ul>


<h3>clever-f</h3>

<p><a href="https://github.com/rhysd/clever-f.vim">rhysd/clever-f.vim</a></p>

<p>行を跨いで移動するという機能を<code>f</code>につけ、<code>;</code>の代わりに<code>f</code>でリピートできるので中距離(数行程度)までならclever-fで移動するとスムーズかもしれない。しかし、どちらかといえば<code>;</code>&amp;<code>,</code>マッピングを節約できる、migemoやsmartcaseといった追加機能が美味しいという感じで<code>f</code>に足りない痒いところに手が届く機能を提供しているというところがいいところだと思っている。</p>

<h3>vim-sneak</h3>

<p><a href="https://github.com/justinmk/vim-sneak">justinmk/vim-sneak</a></p>

<p><code>f</code>の機能を拡張して2つ<code>{char}</code>として指定できる。<a href="https://github.com/goldfeld/vim-seek">goldfeld/vim-seek</a>のほうが先に出ていたけどsneakのほうが活発に開発されていて(たぶん) 基本的には上位互換。</p>

<p>sneakは最近clever-f機能を取り込んで、EasyMotionのラベルで意図していないものを押すのが思考の妨げになってどうしても慣れない or 嫌、でもモーション拡張プラグイン使ってみたいという人に一番いいと思います。<code>f</code>と違って対象として2つ<code>{char}</code>を指定すればマッチが格段に減るので<code>s{char}{char}ssss...</code>でスムーズかつラベルの考慮など何も考えずに移動できます。また2 charsだとハイライトしてくれるのも地味に嬉しい。</p>

<p><code>s</code>,<code>S</code>を勝手に書き換えるという挙動以外のつらみがあった実装は最近直ってきているので良いと思います。</p>

<p>ただ、同時に最近は<code>streak</code>モードというEasyMotionライクな機能を実装していて、これは主観とか差し引いてもEasyMotionの下位互換機能、劣化となっているのでこの機能はあまりオススメしません。</p>

<h3>vim-smalls</h3>

<p><a href="https://github.com/t9md/vim-smalls">t9md/vim-smalls</a></p>

<p>もともと任意のキーストロークでEasyMotionライクに移動できるというのはvim-smallsが最初に実装していて、それにインスパイア &amp; 2-keyを実装するなら任意のキーもついでに実装できるという理由でEasyMotionもついでに<code>&lt;Plug&gt;(easymotion-sn)</code>として実装しました。</p>

<p>vim-smallsの売りは良くも悪くもexcursion-modeだと思っているのですが、単に移動するにはToo much感がなきにしもあらず、なんとなく常用にいたらないという印象です。移動先を決めてから<code>delete</code>や<code>yank</code>を出来たりと正直全機能は把握していませんが便利に使える方法もあるとはおもいます。</p>

<p>vim-smallsの劣化になるなぁーと考えて、EasyMotionの検索拡張機能にスクロールなどを追加したりしたのですが、逆に言えばexcursion-modeが画面外も対象に移動できるようになったりすると、もっと便利になる可能性あるなぁと思ったりもします。</p>

<p>上記の3つともEasyMotionを拡張するにあたって多かれ少なかられ参考にさせてもらったりしたので、非常に感謝しています。</p>

<p>しかし、自分のなかで一番なのはEasyMotion,つまりはそのラベルによってキーストロークを最小限にして移動するというコンセプトで、自分の知る限りのバグはfixしてお行儀もよくなり、各種便利機能などを実装した今、EasyMotionがベストだと自分で思ってます。</p>

<p>自分で開発しておいて自分で言うのもなんですが、ベースはLokaltogさんが作ったというリスペクトも含めてやっぱり好きです。そもそもこう思っていなかったらCollaboratorとして開発を引き継ぐまでには至らないし、言うまでもないかもしれないですね。</p>

<h3>素Vim</h3>

<p>おそらく、EasyMotionを使うであろうというケースの移動では<code>set incsearch</code>,<code>set nohlsearch</code>で<code>/</code>,<code>*</code>などを駆使して検索して移動していると勝手に思ってます。&hellip;というか<code>HML</code>とか<code>tag</code>,<code>grep</code>だとか<code>)</code>,<code>]]</code>,<code>}</code>だとか<code>relativenumber</code>などなどそれぞれ使い分けてるというのが正解かな。</p>

<p>検索に関しては<code>n</code>の連打をする必要がなくなったり、検索履歴を汚さないなどいろいろあるのですが、そもそもプラグイン使わないよ派だったり、やはりEasyMotionの長所でもあり欠点でもある<em>ラベル</em>を選択するという事前にわからない不確定の要素で思考を妨げられるのがいやだったりと、やっぱり素Vimだよねというのも良い(というか尊敬しています)ですよね。</p>

<p>EasyMotionを使っていても、徐々にいろんな移動の仕方を覚えて、それらを使い分けていきたいですね。</p>

<h2>まとめたvimrcの設定例</h2>

<p>個人的には</p>

<ul>
<li><code>&lt;Plug&gt;(easymotion-s2)</code> or <code>&lt;Plug&gt;(easymotion-s)</code>のFind motion</li>
<li><code>&lt;Plug&gt;(easymotion-j)</code> &amp; <code>&lt;Plug&gt;(easymotion-k)</code>の行移動を拡張するJK motion</li>
<li>今回紹介した<code>&lt;Plug&gt;(easymotion-sn)</code>機能</li>
</ul>


<p>などが便利で、<code>Word</code>の拡張モーションなんかは使わない人もいるなぁーと思うので主に上記の3点を中心にした設定例を適当なコメントと共に載せておきます。勿論もっとミニマムに設定したり、もっと変態的に設定しまくってもいいんですよっ//</p>

<p>またEasyMotionのデフォルトのprefixキーが<code>&lt;Leader&gt;&lt;Leader&gt;</code>で使いづらいのはLokaltogさんが他のプラグインと競合しないために配慮した過去があるというだけで、デフォルトで使っても絶対面倒です。ぜひインストールしただけで終わらずに、下記の設定を真似するか、少なくとも<code>map &lt;Leader&gt; &lt;Plug&gt;(easymotion-prefix)</code>するなどして使うと使いやすくなります。</p>

<p>そもそも後方互換さえ無ければデフォルトのキーバインドは無くしたいというレベルなのでデフォルトに頼らず好きなものを必要なだけ使ってください。
特殊バッファを使ったアプリケーション的なプラグイン以外は、デフォルトのキーバインドに頼らずに自分で設定するのがベターだと思います。</p>

<p>vimrc</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Vim motions on speed!</span>
</span><span class='line'>NeoBundle <span class="s1">&#39;Lokaltog/vim-easymotion&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; =======================================</span>
</span><span class='line'><span class="c">&quot; Boost your productivity with EasyMotion</span>
</span><span class='line'><span class="c">&quot; =======================================</span>
</span><span class='line'><span class="c">&quot; Disable default mappings</span>
</span><span class='line'><span class="c">&quot; If you are true vimmer, you should explicitly map keys by yourself.</span>
</span><span class='line'><span class="c">&quot; Do not rely on default bidings.</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:EasyMotion_do_mapping <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Or map prefix key at least(Default: &lt;Leader&gt;&lt;Leader&gt;)</span>
</span><span class='line'><span class="c">&quot; map &lt;Leader&gt; &lt;Plug&gt;(easymotion-prefix)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; =======================================</span>
</span><span class='line'><span class="c">&quot; Find Motions</span>
</span><span class='line'><span class="c">&quot; =======================================</span>
</span><span class='line'><span class="c">&quot; Jump to anywhere you want by just `4` or `3` key strokes without thinking!</span>
</span><span class='line'><span class="c">&quot; `s{char}{char}{target}`</span>
</span><span class='line'>nmap <span class="k">s</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>s2<span class="p">)</span>
</span><span class='line'>xmap <span class="k">s</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>s2<span class="p">)</span>
</span><span class='line'>omap z <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span>s2<span class="p">)</span>
</span><span class='line'><span class="c">&quot; Of course, you can map to any key you want such as `&lt;Space&gt;`</span>
</span><span class='line'><span class="c">&quot; map &lt;Space&gt;(easymotion-s2)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Turn on case sensitive feature</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:EasyMotion_smartcase <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; =======================================</span>
</span><span class='line'><span class="c">&quot; Line Motions</span>
</span><span class='line'><span class="c">&quot; =======================================</span>
</span><span class='line'><span class="c">&quot; `JK` Motions: Extend line motions</span>
</span><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">j</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">j</span><span class="p">)</span>
</span><span class='line'>map <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">k</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">k</span><span class="p">)</span>
</span><span class='line'><span class="c">&quot; keep cursor column with `JK` motions</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:EasyMotion_startofline <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; =======================================</span>
</span><span class='line'><span class="c">&quot; General Configuration</span>
</span><span class='line'><span class="c">&quot; =======================================</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:EasyMotion_keys <span class="p">=</span> <span class="s1">&#39;;HKLYUIOPNM,QWERTASDGZXCVBJF&#39;</span>
</span><span class='line'><span class="c">&quot; Show target key with upper case to improve readability</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:EasyMotion_use_upper <span class="p">=</span> <span class="m">1</span>
</span><span class='line'><span class="c">&quot; Jump to first match with enter &amp; space</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:EasyMotion_enter_jump_first <span class="p">=</span> <span class="m">1</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:EasyMotion_space_jump_first <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; =======================================</span>
</span><span class='line'><span class="c">&quot; Search Motions</span>
</span><span class='line'><span class="c">&quot; =======================================</span>
</span><span class='line'><span class="c">&quot; Extend search motions with vital-over command line interface</span>
</span><span class='line'><span class="c">&quot; Incremental highlight of all the matches</span>
</span><span class='line'><span class="c">&quot; Now, you don&#39;t need to repetitively press `n` or `N` with EasyMotion feature</span>
</span><span class='line'><span class="c">&quot; `&lt;Tab&gt;` &amp; `&lt;S-Tab&gt;` to scroll up/down a page with next match</span>
</span><span class='line'><span class="c">&quot; :h easymotion-command-line</span>
</span><span class='line'>nmap <span class="k">g</span>/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">sn</span><span class="p">)</span>
</span><span class='line'>xmap <span class="k">g</span>/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">sn</span><span class="p">)</span>
</span><span class='line'>omap <span class="k">g</span>/ <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>easymotion<span class="p">-</span><span class="k">tn</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>最後に</h2>

<p>もっと詳しく知りたい場合はぜひhelpを読んでください。<a href="https://github.com/Lokaltog/vim-easymotion/blob/master/doc/easymotion.txt">:h easymotion.txt</a></p>

<p>普段なにげなく使っているカーソル移動を爆速にして、生産性を向上させましょう!</p>

<p><strong>Boost your productivity with EasyMotion!</strong></p>

<p><del>結局思考が追いつかないし、進捗力ある人 with メモ帳に負ける</del></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordPressからOctopressに移行した]]></title>
    <link href="http://haya14busa.com/move-to-octopress-from-wordpress/"/>
    <updated>2014-03-23T18:30:56+09:00</updated>
    <id>http://haya14busa.com/move-to-octopress-from-wordpress</id>
    <content type="html"><![CDATA[<h2>Octopressに移行しました</h2>

<p>常々、WordPressからOctopressに移行したいなぁーと考えていたんですが、とうとう実行に移して完全移行を実現しました。</p>

<p>理由としては</p>

<ul>
<li>WordPressの管理画面にいってどうこうするとか、面倒になってきたし、VimRepressというプラグインも使いづらかった</li>
<li>ブログ記事をgitで管理したかった</li>
<li>CUIで簡潔する。ｱﾂｲ。VimやGitとの相性が抜群</li>
<li>Jekyllを使ってある程度慣れていた。</li>
<li>Programmer向けの静的サイトジェネレータで、プラグインなども公開していたり、自分で作れちゃったりする</li>
<li><del>GitHub Pagesで管理すればCurrent Streakを伸ばすための1つの選択肢になる</del></li>
<li>etc&hellip;</li>
</ul>


<p>移行しない理由がなかった。</p>

<h2>Octopressのテーマを作りました</h2>

<p><a href="https://github.com/haya14busa/mjolvim-octotheme">haya14busa/mjolvim-octotheme</a></p>

<p>基本的に移行前のブログのデザインをベースにして、いろいろ改善しました。</p>

<p>個人的にはシンプルでいい感じになったと思います。
WordPressの時と違って手元で変更してFTPでアップロードなどせずとも、
普通に編集してgit push出来るので何か気になったら気軽に改善できるところが嬉しいですね。</p>

<h2>WordPress1年間ありがとう</h2>

<p>実はWordPressでサイトを公開してからちょうど1年になります。</p>

<p>1年前のポスト: <a href="http://haya14busa.com/first-post/">ブログ作った。 - haya14busa</a></p>

<p>WordPressでウェブサイト作ってみよう！とHTML, CSSから初めて,そこで
Vimを使い出したり,プログラミングに興味を持つ1つのきっかけになったりしたので、
とても感慨深いです。</p>

<p>WordPressさんありがとうございました。</p>

<h2>Octopress楽しい!</h2>

<p>Octopress使って間もないですが、弄り甲斐があってとても楽しく、これからもっと
ブログ執筆環境を改善して、楽々ブログ更新したいなぁーと思います。</p>

<p>テーマの作り方とか、GitHub pagesでユーザーページではなくプロジェクトページを使う、
DNS設定の仕方などの記事も気が向いたら書いていこうかなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimプラグイン読書会第4回が3/15(土)21:00から開催されます]]></title>
    <link href="http://haya14busa.com/reading-vimplugin-04-senden/"/>
    <updated>2014-03-15T00:00:00+09:00</updated>
    <id>http://haya14busa.com/reading-vimplugin-04-senden</id>
    <content type="html"><![CDATA[<h2>第4回Vimプラグイン読書会</h2>

<ul>
<li>日時: 2014/03/15 Sat 21:00 -</li>
<li>場所: <a href="http://lingr.com/room/vim">LingrのVim部屋</a></li>
<li>読むプラグイン:

<ul>
<li><a href="https://github.com/tpope/vim-pathogen">tpope/vim-pathogen</a></li>
</ul>
</li>
<li>目的: プラグインマネージャの仕組みを理解する</li>
</ul>


<p>ぜひ気軽に参加してください。</p>

<h2>pathogen読みます</h2>

<p>かの有名なtpope先生のプラグインです。first commitが5years agoの(たぶん)一番古株のプラグインマネージャで歴史を感じます。(<a href="https://github.com/c9s/Vimana">c9s/Vimana</a>というのもあったらしいですがperlスクリプトで、かつどっちが先かはよくわかりません)</p>

<p>326行1ファイルなので分量的には気軽に読めそうです。(密度は知らない)</p>

<h3>読みどころ</h3>

<p>Vim触り始めの頃からNeoBundleやVundle,pathogenといったプラグインマネージャが存在して、vimのランタイムパスとかほぼ気にせずプラグインを簡単にインストール、管理できた身としてはそのあたりで何やってるかというのは、しばらく全くわかっていませんでした。(そして今もそこまでわかってないかも&#8230;)</p>

<p>と、いうことでruntimepath周りや、「プラグインマネージャって結局何をどうやってるのよ?」みたいなところが１つの読みどころかなぁと思います。</p>

<p>あとは関連して、ファイルやディレクトリのpathの操作などは他の用途でも汎用的に使えそうです。</p>

<h2>pathogenの命名</h2>

<ul>
<li><a href="http://eow.alc.co.jp/search?q=pathogen">pathogenの意味・用例｜英辞郎 on the WEB：アルク</a></li>
<li><a href="http://eow.alc.co.jp/search?q=infect">infectの意味・用例｜英辞郎 on the WEB：アルク</a></li>
<li><a href="http://eow.alc.co.jp/search?q=incubate">incubateの意味・用例｜英辞郎 on the WEB：アルク</a></li>
</ul>


<p>pathogenってどういう意味かなぁと思って調べると、infectやincubateといった関数が存在することから、 そのまま「病原体」の&#8221;pathogen&#8221;と&#8221;path&#8221;を掛けたっぽいですね。[要出典]</p>

<p>「<code>~/vim/bundle/</code>のディレクトリをvimのruntimepathという病原体(pathogen)でinfect(感染)させるぜ!」と言ったところでしょうか。</p>

<p>結構カッコイイ命名っぽい。</p>

<h2>ということで</h2>

<p>明日、3/15(土)21:00から[LingrのVim部屋]((<a href="http://lingr.com/room/vim">http://lingr.com/room/vim</a>)で開催されるのでぜひワイワイ読みましょう！</p>

<p>初見でも初心者でも歓迎ですよ!</p>
]]></content>
  </entry>
  
</feed>
