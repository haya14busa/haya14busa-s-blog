<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | haya14busa]]></title>
  <link href="http://haya14busa.com/categories/python/atom.xml" rel="self"/>
  <link href="http://haya14busa.com/"/>
  <updated>2016-12-26T02:34:13+09:00</updated>
  <id>http://haya14busa.com/</id>
  <author>
    <name><![CDATA[haya14busa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python,NLTKで自然言語処理]]></title>
    <link href="http://haya14busa.com/python-nltk-natural-language-processing/"/>
    <updated>2013-08-16T00:00:00+09:00</updated>
    <id>http://haya14busa.com/python-nltk-natural-language-processing</id>
    <content type="html"><![CDATA[<h2>Install nltk</h2>

<pre><code>$ pip install nltk
</code></pre>

<p>wordnetのコーパスをPythonインタプリタからダウンロード</p>

<pre><code>$ python
Python 2.7.5 (default, Jul 19 2013, 19:37:30)
[GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import nltk
&gt;&gt;&gt; nltk.download()
</code></pre>

<p>MacならGUIの画面が起動するので適当に従ってダウンロード。</p>

<p>書き終わってから気づいたけど以下ナチュラルに<code>see()</code>使ってます。代わりに<code>dir()</code>使うか、そもそも飛ばすか、便利なので<code>see</code>をインストールしましょう。</p>

<pre><code>$ pip install see
</code></pre>

<p>~/.pythonstartup に</p>

<pre><code>from see import see
</code></pre>

<p>を記述しておくと便利</p>

<p><a href="https://github.com/haya14busa/dotfiles/blob/master/.pythonstartup">dotfiles/.pythonstartup at master · haya14busa/dotfiles</a></p>

<h2>Stemming and Lemmatisation</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Stemming">Stemming &#8211; Wikipedia, the free encyclopedia</a>

<ul>
<li>語幹化</li>
</ul>
</li>
<li><a href="http://en.wikipedia.org/wiki/Lemmatisation">Lemmatisation &#8211; Wikipedia, the free encyclopedia</a>

<ul>
<li>見出し語化, レンマ化</li>
</ul>
</li>
</ul>


<p>語幹化、見出し語化の前に、大文字・小文字を正規化しておく。(語幹化は大文字小文字混ざってても動くっぽいけどレンマ化は動かない)</p>

<pre><code>&gt;&gt;&gt; print 'Python'.lower()
python
</code></pre>

<h3>Stemming</h3>

<pre><code>&gt;&gt;&gt; from nltk import stem
&gt;&gt;&gt; see(stem)
    help()                 .ISRIStemmer()         .LancasterStemmer()
    .PorterStemmer()       .RSLPStemmer()         .RegexpStemmer()
    .SnowballStemmer()     .StemmerI()            .WordNetLemmatizer()   .api
    .isri                  .lancaster             .porter
    .regexp                .rslp                  .snowball
    .wordnet
&gt;&gt;&gt; stemmer = stem.PorterStemmer()
&gt;&gt;&gt; stemmer.stem('dialogue')
'dialogu'
&gt;&gt;&gt; stemmer2 = stem.LancasterStemmer()
&gt;&gt;&gt; stemmer2.stem('dialogue')
'dialog'
</code></pre>

<p>PorterStemmerとLancasterStemmerでアルゴリズムが違うっぽい。</p>

<p>Lancasterのほうがアグレッシブ。</p>

<blockquote><p>Porter: Most commonly used stemmer without a doubt, also one of the most gentle stemmers. One of the few stemmers that actually has Java support which is a plus, though it is also the most computationally intensive of the algorithms(Granted not by a very significant margin). It is also the oldest stemming algorithm by a large margin.</p>

<p>Lancaster: Very aggressive stemming algorithm, sometimes to a fault. With porter and snowball, the stemmed representations are usually fairly intuitive to a reader, not so with Lancaster, as many shorter words will become totally obfuscated. The fastest algorithm here, and will reduce your working set of words hugely, but if you want more distinction, not the tool you would want.</p>

<p>&#8211; <cite><a href="http://stackoverflow.com/questions/10554052/what-are-the-major-differences-and-benefits-of-porter-and-lancaster-stemming-alg">java &#8211; What are the major differences and benefits of Porter and Lancaster Stemming algorithms? &#8211; Stack Overflow</a></cite></p></blockquote>

<p>個人的にdialogueとdialogでstemが違うとつらいのでLancaster使ってみて、ミスが多いようならPorter使う予定。</p>

<p>他にもSnowballとかあるけど割愛</p>

<h3>Lemmatisation</h3>

<pre><code>&gt;&gt;&gt; from nltk import stem
&gt;&gt;&gt; lemmatizer = stem.WordNetLemmatizer()
&gt;&gt;&gt; lemmatizer.lemmatize('dialogs')
'dialog'
&gt;&gt;&gt; lemmatizer.lemmatize('dialogues')
'dialogue'
&gt;&gt;&gt; lemmatizer.lemmatize('cookings')
'cooking'
&gt;&gt;&gt; lemmatizer.lemmatize('cooking', pos='v')
'cook'
</code></pre>

<h2>Tokenization</h2>

<p><a href="http://en.wikipedia.org/wiki/Tokenization">Tokenization &#8211; Wikipedia, the free encyclopedia</a></p>

<pre><code>&gt;&gt;&gt; from nltk import tokenize
&gt;&gt;&gt; see(tokenize)
    help()                    .BlanklineTokenizer()     .LineTokenizer()
    .PunktSentenceTokenizer()                           .PunktWordTokenizer()
    .RegexpTokenizer()        .SExprTokenizer()         .SpaceTokenizer()
    .TabTokenizer()           .TreebankWordTokenizer()  .WhitespaceTokenizer()
    .WordPunctTokenizer()     .api                      .blankline_tokenize()
    .line_tokenize()          .load()                   .punkt
    .regexp                   .regexp_tokenize()        .sent_tokenize()
    .sexpr                    .sexpr_tokenize()         .simple
    .treebank                 .util                     .word_tokenize()
    .wordpunct_tokenize()
&gt;&gt;&gt; aio1 = 'He grinned and said, "I make lots of money.  On weekdays I receive
an average of 50 orders a day from all over the globe via the Internet."'
</code></pre>

<h3>Sentence Tokenization</h3>

<pre><code>&gt;&gt;&gt; tokenize.sent_tokenize(aio1)
['He grinned and said, "I make lots of money.', 'On weekdays I receive an average of 50 orders a day from all over the globe via the Internet.', '"']
</code></pre>

<h3>Word Tokenization</h3>

<pre><code>&gt;&gt;&gt; tokenize.word_tokenize(aio1)
['He', 'grinned', 'and', 'said', ',', '``', 'I', 'make', 'lots', 'of', 'money.', 'On', 'weekdays', 'I', 'receive', 'an', 'average', 'of', '50', 'orders', 'a', 'day', 'from', 'all', 'over', 'the', 'globe', 'via', 'the', 'Internet', '.', "''"]
&gt;&gt;&gt; tokenize.wordpunct_tokenize(aio1)
['He', 'grinned', 'and', 'said', ',', '"', 'I', 'make', 'lots', 'of', 'money', '.', 'On', 'weekdays', 'I', 'receive', 'an', 'average', 'of', '50', 'orders', 'a', 'day', 'from', 'all', 'over', 'the', 'globe', 'via', 'the', 'Internet', '."']
</code></pre>

<h2>Delete Stopwords</h2>

<p><a href="http://en.wikipedia.org/wiki/Stop_words">Stop words &#8211; Wikipedia, the free encyclopedia</a></p>

<pre><code>&gt;&gt;&gt; from nltk.corpus import stopwords
&gt;&gt;&gt; stopset = set(stopwords.words('english')
... )
&gt;&gt;&gt; stopset
set(['all', 'just', 'being', 'over', 'both', 'through', 'yourselves', 'its', 'before', 'herself', 'had', 'should', 'to', 'only', 'under', 'ours', 'has', 'do', 'them', 'his', 'very', 'they', 'not', 'during', 'now', 'him', 'nor', 'did', 'this', 'she', 'each', 'further', 'where', 'few', 'because', 'doing', 'some', 'are', 'our', 'ourselves', 'out', 'what', 'for', 'while', 'does', 'above', 'between', 't', 'be', 'we', 'who', 'were', 'here', 'hers', 'by', 'on', 'about', 'of', 'against', 's', 'or', 'own', 'into', 'yourself', 'down', 'your', 'from', 'her', 'their', 'there', 'been', 'whom', 'too', 'themselves', 'was', 'until', 'more', 'himself', 'that', 'but', 'don', 'with', 'than', 'those', 'he', 'me', 'myself', 'these', 'up', 'will', 'below', 'can', 'theirs', 'my', 'and', 'then', 'is', 'am', 'it', 'an', 'as', 'itself', 'at', 'have', 'in', 'any', 'if', 'again', 'no', 'when', 'same', 'how', 'other', 'which', 'you', 'after', 'most', 'such', 'why', 'a', 'off', 'i', 'yours', 'so', 'the', 'having', 'once'])
&gt;&gt;&gt; aio1words = tokenize.wordpunct_tokenize(aio1)
&gt;&gt;&gt; aio1words
['He', 'grinned', 'and', 'said', ',', '"', 'I', 'make', 'lots', 'of', 'money', '.', 'On', 'weekdays', 'I', 'receive', 'an', 'average', 'of', '50', 'orders', 'a', 'day', 'from', 'all', 'over', 'the', 'globe', 'via', 'the', 'Internet', '."']
&gt;&gt;&gt; for word in aio1words:
...  if len(word) &lt; 3 or word in stopset:
...   continue
...  print word
...
grinned
said
make
lots
money
weekdays
receive
average
orders
day
globe
via
Internet
====================
filter で
====================
&gt;&gt;&gt; print filter(lambda w: len(w) &gt; 2 and w not in stopset, aio1words)
['grinned', 'said', 'make', 'lots', 'money', 'weekdays', 'receive', 'average', 'orders', 'day', 'globe', 'via', 'Internet']
</code></pre>

<h2>Links</h2>

<ul>
<li><a href="http://nltk.org/">Natural Language Toolkit — NLTK 2.0 documentation</a></li>
<li><a href="https://github.com/japerk/PyCon-NLTK-Tutorial">japerk/PyCon-NLTK-Tutorial</a></li>
<li><a href="http://petitviolet.hatenablog.com/entry/20120523/1337760714">正規表現・自然言語処理 &#8211; I/O Error : My Knowledge</a></li>
<li><a href="https://github.com/pika-shi/sphinx_information_retrieval/blob/master/natural_language_processing.rst">sphinx_information_retrieval/natural_language_processing.rst at master · pika-shi/sphinx_information_retrieval</a></li>
</ul>


<div class="amz-container" style="overflow:hidden;margin-bottom:20px;">
  <div class="amz-left" style="float:left; margin:0 20px 0;">
    <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873114705/haya14busa-22/ref=nosim/" rel="nofollow" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51EoFqAGo1L._SL160_.jpg" class="amz-img" /></a>
  </div>
  
  <div class="amz-right" style="overflow:hidden;">
    <div class="amz-title" style="margin-bottom:20px;">
      <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873114705/haya14busa-22/ref=nosim/" rel="nofollow" target="_blank">入門 自然言語処理</a>
    </div>
    
    <div class="amz-detail">
      <div class="amz-info1" style="white-space:nowrap;">
        Steven Bird,Ewan Klein,Edward Loper
      </div>
      
      <div class="amz-info2" style="white-space:nowrap;">
        オライリージャパン 2010-11-11
      </div>
      
      <div class="amz-price" style="white-space:nowrap;">
        ￥ 3,990
      </div>
      
      <div class="amz-link" style="margin-top:20px;">
        <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873114705/haya14busa-22/ref=nosim/" rel="nofllow" target="_blank">Amazon.co.jp で詳細を見る</a>
      </div>
    </div>
  </div>
</div>




<div class="amz-container" style="overflow:hidden;margin-bottom:20px;">
  <div class="amz-left" style="float:left; margin:0 20px 0;">
    <a href="http://www.amazon.co.jp/exec/obidos/ASIN/0596516495/haya14busa-22/ref=nosim/" rel="nofollow" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51QhcSlOO4L._SL160_.jpg" class="amz-img" /></a>
  </div>
  
  <div class="amz-right" style="overflow:hidden;">
    <div class="amz-title" style="margin-bottom:20px;">
      <a href="http://www.amazon.co.jp/exec/obidos/ASIN/0596516495/haya14busa-22/ref=nosim/" rel="nofollow" target="_blank">Natural Language Processing with Python</a>
    </div>
    
    <div class="amz-detail">
      <div class="amz-info1" style="white-space:nowrap;">
        Steven Bird,Ewan Klein,Edward Loper
      </div>
      
      <div class="amz-info2" style="white-space:nowrap;">
        Oreilly & Associates Inc 2009-06-30
      </div>
      
      <div class="amz-price" style="white-space:nowrap;">
        ￥ 3,724
      </div>
      
      <div class="amz-link" style="margin-top:20px;">
        <a href="http://www.amazon.co.jp/exec/obidos/ASIN/0596516495/haya14busa-22/ref=nosim/" rel="nofllow" target="_blank">Amazon.co.jp で詳細を見る</a>
      </div>
    </div>
  </div>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonで素数数え上げスクリプト]]></title>
    <link href="http://haya14busa.com/python-enumerate-prime/"/>
    <updated>2013-07-28T00:00:00+09:00</updated>
    <id>http://haya14busa.com/python-enumerate-prime</id>
    <content type="html"><![CDATA[<h2>書きました</h2>

<p>Github -> <a href="https://github.com/haya14busa/prime-sieve">haya14busa/prime-sieve</a></p>

<p><a href="(http://www.wakatta-blog.com/prime-number-counter.html)">素数を数える方法</a>の記事読んだ時はそんなやる気なかったのについ手をだしてしまった。<a href="http://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9">エラトステネスの篩</a>って名前は知らなかったけど、そのアルゴリズムは読まなくても使おうと思いながら読んでたよ！って言っても記事読んでから書いたからｱﾚ。</p>

<p>まったくもってブログにあげるレベルじゃないけど、意外と<code>set</code>使ったり、<code>iterator</code>意識したりとかのPython記事見つからなかったので一応書いてみた。適当に比較した感じでは速くなってるので満足です。素数ガチ勢じゃないから</p>

<blockquote><p>確率的素数判定法 : 素数判定法の中には確率的アルゴリズムに基づいた、与えられた自然数 n を「合成数である」または「良く分からない」と判別する判定法がある。</p>

<p>&#8211; <cite><a href="http://ja.wikipedia.org/wiki/素数判定">素数判定 &#8211; Wikipedia</a></cite></p></blockquote>

<p>とか使って高速化とかまでは妥協。</p>

<h2>Code</h2>

<p>prime_sieve.py</p>

<pre><code>#!/usr/bin/env python
# -*- coding:utf-8 -*-
''' Enumerate prime numbers upto 10000 '''

import time
import sys

argvs = sys.argv
if len(argvs) &lt; 2:
    MAX = 10000
else:
    try:
        MAX = int(argvs[1])
    except:
        MAX = 10000

def sqrt(num):
    sq = num ** .5
    return sq

def main():
    prime_set = set(xrange(2,MAX+1))
    possible_set = set(xrange(2,int(sqrt(MAX+1))))
    temp_set = set() # append prime upto sqrt(MAX)
    while 1:
        try:
            prime = sorted(possible_set).pop(0)
            temp_set.add(prime)
        except:
            prime_set = sorted(prime_set | temp_set)
            print 'List: ', prime_set
            print 'Count: ', len(prime_set)
            return
        prime_set = set(ifilter(lambda x: x % prime, prime_set))
        possible_set = set(ifilter(lambda x: x % prime, possible_set))


if __name__ == '__main__':
    starttime = time.clock()
    from itertools import ifilter
    main()
    endtime = time.clock()
    time = endtime - starttime
    print 'Time: ', time
</code></pre>

<h3>使用法</h3>

<pre><code>$ git clone git@github.com:haya14busa/prime-sieve.git
$ python prime_stieve.py [引数]
</code></pre>

<p>引数なしの場合、デフォルトで10000までの素数列挙します。</p>

<h2>注意点</h2>

<ul>
<li>xrangeを使って既にソートされてる順番のリストをset変換しても、操作してたり(？)すると少しバラバラになるっぽい</li>
<li>ので、素数ポップアウトする際は、<code>sorted(set).pop(0)</code>とする必要があります。</li>
<li>もしやらなかった場合、だいたい15000くらいまでは正しく動くのですが、それ以降で失敗します。この辺の挙動が謎。</li>
</ul>


<h2>感想</h2>

<p>アルゴリズムとコードの書き方の両者とも意識することで、想像してた以上に速くなったのでちょくちょくその辺も意識したい感じ。正しく使われてる気がしないtry、catchの使い方とか書き方がなってないので、<a href="http://www.amazon.co.jp/Python-%E3%82%AF%E3%83%83%E3%82%AF%E3%83%96%E3%83%83%E3%82%AF-%E7%AC%AC2%E7%89%88-Alex-Martelli/dp/4873112761?tag=haya14busa-22">Python クックブック</a>とかちゃんとこなそう。</p>

<div class="amz-container" style="overflow:hidden;margin-bottom:20px;">
  <div class="amz-left" style="float:left; margin:0 20px 0;">
    <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112761/haya14busa/ref=nosim/" rel="nofollow" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41XWUXpgeuL._SL160_.jpg" class="amz-img" /></a>
  </div>
  
  <div class="amz-right" style="overflow:hidden;">
    <div class="amz-title" style="margin-bottom:20px;">
      <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112761/haya14busa/ref=nosim/" rel="nofollow" target="_blank">Python クックブック 第2版</a>
    </div>
    
    <div class="amz-detail">
      <div class="amz-info1" style="white-space:nowrap;">
        Alex Martelli,Anna Martelli Ravenscroft,David Ascher
      </div>
      
      <div class="amz-info2" style="white-space:nowrap;">
        オライリー・ジャパン 2007-06-26
      </div>
      
      <div class="amz-price" style="white-space:nowrap;">
        ￥ 4,410
      </div>
      
      <div class="amz-link" style="margin-top:20px;">
        <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112761/haya14busa/ref=nosim/" rel="nofllow" target="_blank">Amazon.co.jp で詳細を見る</a>
      </div>
    </div>
  </div>
</div>


<h2>Link</h2>

<ul>
<li><a href="http://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9">エラトステネスの篩 &#8211; Wikipedia</a></li>
<li><a href="https://codeiq.jp/">CodeIQ｜ITエンジニアのための実務スキル評価サービス</a></li>
<li><a href="(http://www.wakatta-blog.com/prime-number-counter.html)">素数を数える方法</a></li>
<li><a href="http://d.hatena.ne.jp/r_ikeda/20111028/prime">Python で素数を求めるアルゴリズムを書いてみる &#8211; 集中力なら売り切れたよ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解決:Mac OSXのPythonのインタプリタで日本語入力する方法]]></title>
    <link href="http://haya14busa.com/mac-python-readline-input-japanese/"/>
    <updated>2013-07-08T00:00:00+09:00</updated>
    <id>http://haya14busa.com/mac-python-readline-input-japanese</id>
    <content type="html"><![CDATA[<h2>環境</h2>

<ul>
<li>Mac OSX 10.8.4</li>
<li>Python 2.7.5 (Homebrewでインストール)</li>
<li>Python 3.3.2でも確認</li>
<li>readline 6.2.4(Homebrew)</li>
</ul>


<p><a href="http://haya14busa.com/cannot-input-japanese-in-python-interpreter/">Mac OSXのPythonのインタラクティブシェルorインタプリタで日本語が入力出来なくてつらい « haya14busa</a></p>

<p>やっと解決しました。まさかzsh調べてる過程でPythonの問題を解決できるとは思わなかった。</p>

<h2>解決法</h2>

<p>やっぱりreadline / GNU readlineの問題でした。readlineは~/.inputrcを読み込むようで、そこに下記の記述でPythonのインタプリタで(一応)日本語が打てるようになります。</p>

<p>~/.inputrc</p>

<pre><code>kanji-code utf-8

# Enable 8bit input
set meta-flag on
set input-meta on

# Turns off 8th bit stripping
set convert-meta off

# Keep the 8th bit for display
set output-meta on

set enable-keypad on
</code></pre>

<p>いまいち.inputrcの再読み込みのやり方わからなかったんで、シェルごと再起動させて調べてました。</p>

<p>readlineの環境としてはHomebrewでインストールしたreadline6.2.4。PythonのDependenciesに含まれてるので、普通にbrew install pythonしてれば入ってますeasy_install readlineやpip install readlineはしてもしなくても変わりませんでした。特に後者はディレクトリの配置が優先されないのかそもそも機能してるか怪しいです。readlineをpipのみで入れるとimportでエラー吐くので。</p>

<p>とにかく、~/.inputrcに上記の記述でひとまず日本語を打つときに「ガッガッ」と警告音ならされて文字が消えることなく、入力できるはずです。</p>

<h2>バグ挙動</h2>

<blockquote><p>訳注: IDLE をはじめ、ほとんどの Python 2 用のインタラクティブシェルは、非ASCII 文字を含む Unicode リテラルを利用することができません。このサンプルを実行するには、インタプリタ内蔵のインタラクティブシェルを利用する必要があります。 この問題は Python 3 では解決されています。</p>

<p>&#8211; <cite><a href="http://docs.python.jp/2/tutorial/introduction.html#unicode">3. 形式ばらない Python の紹介 — Python 2.7ja1 documentation</a></cite></p></blockquote>

<p>そもそも公式ドキュメントで書いてある通り、インタプリタでの日本語の使用はあまりできないっぽいです。今回解決した結果も例に漏れずバクがあります。</p>

<p>まず最初に書いたURL -> <a href="http://haya14busa.com/cannot-input-japanese-in-python-interpreter/">Mac OSXのPythonのインタラクティブシェルorインタプリタで日本語が入力出来なくてつらい « haya14busa</a> の記述と同様Pythonインタプリタで使用される文字エンコーディングをすべて&#8217;utf-8&#8242;に変えます。</p>

<p>~/.zshrc</p>

<pre><code>export PYTHONSTARTUP=~/.pythonstartup
export PYTHONIOENCODING='utf-8'
</code></pre>

<p>~/.pythonstartup</p>

<pre><code>import sys
reload(sys)
sys.setdefaultencoding('utf-8')

import codecs

sys.stdout = codecs.getwriter('utf_8')(sys.stdout)
sys.stdin = codecs.getreader('utf_8')(sys.stdin)
</code></pre>

<p>エンコーディングを変えた環境で開発するのは配布の際などに不具合をきたす可能性があがってよくないですが、日本語扱うためにはある程度しかたないです。そもそもインタプリタってちょっと気軽に確認したいってときに使うことが多いと思うので。また普通にスクリプトを実行する際は上記の記述はまったく関係ないはずなので問題ないと思います。</p>

<h3>で…実行すると</h3>

<pre><code>% python
Python 2.7.5 (default, Jul  8 2013, 03:25:24) 
[GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; a = 'こんにちは'
&gt;&gt;&gt; type(a)
&lt;type 'str'&gt;
&gt;&gt;&gt; len(a)
15
&gt;&gt;&gt; print a
こんにちは
&gt;&gt;&gt; b = u'こんにちは'
&gt;&gt;&gt; type(b)
&lt;type 'unicode'&gt;
&gt;&gt;&gt; len(b)
15
&gt;&gt;&gt; print b
ããã«ã¡ã¯
</code></pre>

<p>aに関してはいいですよ………問題は<strong>b</strong>です。len(b)が15ってなんだよ！ぉこだよ！？printで文字化けしてんじゃねーよ！！！</p>

<p>これじゃあ日本語入力できても結局確認にすら使えないですよね。そこでちょっと強引な解決法として</p>

<pre><code>&gt;&gt;&gt; c = unicode(a,'utf-8')
&gt;&gt;&gt; type(c)
&lt;type 'unicode'&gt;
&gt;&gt;&gt; len(c)
5
&gt;&gt;&gt; print c
こんにちは
&gt;&gt;&gt; c[1:3]
u'\u3093\u306b'
&gt;&gt;&gt; print c[1:3]
んに
</code></pre>

<p>これだと文字列のスライスもできてますし、ちょっと日本語関係のコードを確認するときは一旦str型で入力したものをunicode(text,&#8217;utf-8&#8242;)すればちゃんと動くってことですね。これでひとまず解決！！！</p>

<p>ところでu&#8221;テキスト&#8221;とunicode(&#8220;テキスト&#8221;,&#8217;utf-8&#8242;)の違いってなんなんだろうか。</p>

<p>u_quote_and_unicode.py</p>

<pre><code># coding:utf-8
print u"てきすと" == unicode("てきすと",'utf-8') # True
</code></pre>

<p>シェルでなくスクリプトファイルで確認するとTrueだったので違いはないのかな？</p>

<p>ちなみにPython3のインタプリタで試した所、無駄なこと一切せず動きます。文字コードに関しては3に移行したいと思った。ついでに言うとPyrhon2.6から実装されたfrom <strong>future</strong> import unicode_literalsすると全部u&#8221;てきすと&#8221;の扱いになるので今回は逆効果です。</p>

<p>あとインタプリタ上で日本語入力ができてるように見えますけど、内部？では1文字の「あ」ではなくカーソル3つ分くらいの長さを持ってるので、カーソルを移動させたり、消去すると表示がバグります。いったん何文字か売ってカーソルを左に移動させてからもう一度右にするとわかりやすいです。……ということで日本語部分を書き直すなら文頭から全部書きなおすようにしたほうがいいですね。<div class=clearfix> 最初に数文字打って………</p>

<p><a href="../images/misc/wp/2013/07/Screen-Shot-2013-07-08-at-9.08.49-AM.png"><img src="../images/misc/wp/2013/07/Screen-Shot-2013-07-08-at-9.08.49-AM-300x128.png" alt="Screen Shot 2013-07-08 at 9.08.49 AM" width="300" height="128" class="aligncenter size-medium wp-image-61 clearfix" /></a> カーソルを左右に移動させると……… <a href="../images/misc/wp/2013/07/Screen-Shot-2013-07-08-at-9.09.36-AM.png"><img src="http://haya14busa.com/wp-content/uploads/2013/07/Screen-Shot-2013-07-08-at-9.09.36-AM-300x119.png" alt="Screen Shot 2013-07-08 at 9.09.36 AM" width="300" height="119" class="alignnone size-medium wp-image-62 clearfix" /></a> </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OSXのPythonのインタラクティブシェルorインタプリタで日本語が入力出来なくてつらい]]></title>
    <link href="http://haya14busa.com/cannot-input-japanese-in-python-interpreter/"/>
    <updated>2013-07-07T00:00:00+09:00</updated>
    <id>http://haya14busa.com/cannot-input-japanese-in-python-interpreter</id>
    <content type="html"><![CDATA[<h3>参考リンク</h3>

<ul>
<li><a href="http://www.metareal.org/2008/04/11/building-readline-enabled-python-on-mac/">Mac の Python をビルドするときに GNU Readline ライブラリを有効にする | METAREAL</a></li>
<li><a href="http://python.matrix.jp/pages/tips/compatibility/interact_encoding.html">インタラクティブモードのエンコード — PythonMatrixJp</a></li>
<li><a href="http://raydive.hatenablog.jp/entry/20100925/1285414097">Homebrew環境下で野良Pythonをビルドしても大丈夫か？ &#8211; 日々の御伽噺</a></li>
<li><a href="http://raydive.hatenablog.jp/entry/20100207/1265555421">Python2.6.4をreadlineと文字ロケール問題を回避してSnow Leopardに入れる &#8211; 日々の御伽噺</a></li>
<li><a href="http://raydive.hatenablog.jp/entry/20090111/1231694394">Readlineとロケール問題を回避したPythonをインストールする &#8211; 日々の御伽噺</a></li>
<li>etc…</li>
</ul>


<h3>環境</h3>

<ul>
<li>Mac OSX 10.8.4</li>
<li>Python 2.7.5 (Homebrewでインストール)</li>
</ul>


<h3>MacのPythonインタプリタで日本語が入力出来なくてつらい。つらい</h3>

<p>Snow Leopardだと<code>easy_install readline</code>で解決するって記事がもう嫌になるほど見つかるけど僕の環境では全く解決しません。</p>

<p>ただなんにせよreadlineの問題であることはわかりました。</p>

<p>単にreadlineといっても</p>

<ol>
<li>Mac標準のreadline</li>
<li>Homebrewで入れるreadline</li>
<li>easy_installで入れるreadline</li>
<li>pipで入れるreadline</li>
</ol>


<p>もう何がなんだか…。1と2はライセンスの関係で少し違うらしいこと、3と4は同じかと思いきやHomebrewのreadlineをアンインストールした状態で3のeasy_installでは上手くimportできるのに、4のpipではimportエラーが発生します。</p>

<p>Homebrewでのreadlineをアンインストールした状態で,pip install readlineした時のエラー</p>

<pre><code>ImportError: dlopen(/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/readline.so, 2): Library not loaded: /usr/local/opt/readline/lib/libreadline.6.2.dylib
  Referenced from: /usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/readline.so
  Reason: image not found
</code></pre>

<p>readlineの問題だと考えるのはHomebrew、easy_install、pipのすべてでreadlineをアンインストールした場合、ちゃんと日本語が通ります。ただ勿論readlineが使えないので補完はおろか矢印キーさえ動きません。これはツライ。</p>

<p>1-4でいろんな組み合わせでreadlineをインストール&amp;アンインストールしてもimportできた場合はすべて日本語通りません…</p>

<p>.zshrc</p>

<pre><code>export PYTHONSTARTUP=~/.pythonstartup
export PYTHONIOENCODING='utf-8'
</code></pre>

<p>.pythonstartup</p>

<pre><code>import sys
reload(sys)
sys.setdefaultencoding('utf-8')

import codecs

sys.stdout = codecs.getwriter('utf_8')(sys.stdout)
sys.stdin = codecs.getreader('utf_8')(sys.stdin)
</code></pre>

<p>上記の2つを設定して、Pythonシェルでのエンコーディングをすべてutf-8にしても解決せず。utf-8に変更する前はUS-ASCIIだったんでこれが問題かと思ったんだけど……</p>

<p>Python インタプリタ</p>

<pre><code>import sys
&gt;&gt;&gt; print sys.getfilesystemencoding()
utf-8
&gt;&gt;&gt; print sys.stdin.encoding
utf-8
&gt;&gt;&gt; print sys.stdout.encoding
utf-8
&gt;&gt;&gt; print sys.stderr.encoding
utf-8
&gt;&gt;&gt; print sys.getdefaultencoding()
utf-8
</code></pre>

<p>もちろんLANG=ja_JP.UTF-8状態にもしてるし、ターミナルではちゃんと日本語入力できるのに…</p>

<p><code>brew link readline</code>とかやったり、brewで入れたreadlineを使うように（?）Homebrew使わず自前でPython入れなおしてみたりいろいろとやってみた………が………だめ</p>

<pre><code>% CPPFLAGS=-I/usr/local/Cellar/readline/6.2.4/include LDFLAGS=-L/usr/local/Cellar/readline/6.2.4/lib  ./configure --prefix=/usr/local/Cellar/python/2.7.5 --enable-ipv6 --datarootdir=/usr/local/Cellar/python/2.7.5/share --datadir=/usr/local/Cellar/python/2.7.5 --enable-framework --with-universal-archs=intel --enable-universalsdk=/

% make
% sudo make frameworkinstall
</code></pre>

<p>書きながら調べてたらここを見つけた。-> <a href="http://raydive.hatenablog.jp/entry/2013/02/09/120000">Pythonビルドメモ（2013/02/09版） &#8211; 日々の御伽噺</a></p>

<p>というか参考にしてたリンクの更新版的な記事だったのでやっぱ検索力足りてない…試してみようかな</p>

<h2>追記</h2>

<p>なんとか解決できました</p>

<p><a href="http://haya14busa.com/mac-python-readline-input-japanese/">解決:Mac OSXのPythonのインタプリタで日本語入力する方法 « haya14busa</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PythonでTwitterのタイムラインをストリーミングで読み上げさせるfor Mac[tweepy]]]></title>
    <link href="http://haya14busa.com/tweepy-read-aloud-tl/"/>
    <updated>2013-07-06T00:00:00+09:00</updated>
    <id>http://haya14busa.com/tweepy-read-aloud-tl</id>
    <content type="html"><![CDATA[<h2>作りま……パクりました</h2>

<p>初心者ながらPythonでツイッターのタイムライン読み上げさせたら面白いなーと思って頑張ってました。最初は何も考えず<a href="(https://github.com/bear/python-twitter)">python-twitter</a>で試行錯誤してたんだけど、<a href="(https://github.com/tweepy/tweepy)">tweepy</a>はStreaming APIにも対応しててtweepy使った方が楽なことを発見。んでググってたらそのままターミナルにストリーミングでTL流すスクリプト見つけたので、そこにSayKotoeriコマンドをプラスしてちょっと変えただけのほぼ丸パクリです。頑張って自分で作ったのは別記事のリストを擬似ストリーミングで読み上げさせる方なので、ご了承ください。</p>

<p>リストバージョン -> <a href="http://haya14busa.com/tweepy-read-aloud-list-tl/">PythonでツイッターのリストのTLを擬似ストリーミングで読み上げさせる[tweepy] « haya14busa</a></p>

<h2>tweepyのインストール</h2>

<p><code>pip install tweepy</code>でおけ。記事執筆現在API1.1にも対応してます。pipならバージョンは2.0でgithubには2.1が上がってるっぽいです。でも現場2.0で良さそう。公式ドキュメントのバージョンが1.4で古かったりして大変なので、バージョンに気を付けてググったり、dir()コマンドとかソース読んで自分で見ていくとわかりやすいっぽいです。</p>

<h2>読み上げコマンド</h2>

<p><a href="(https://sites.google.com/site/nicohemus/home/saykotoeri)">Saykotoeri</a> &amp; <a href="(http://www.a-quest.com/quickware/saykana/)">SayKana</a> , or <a href="(https://sites.google.com/site/nicohemus/home/saykotoeri2)">Saykotoeri2</a>コマンドが必要です。リンク先からインストールしてください。デフォルトのsayコマンドで<a href="(http://stts.hatenablog.com/entry/20110724/1311513263)">Kyoko</a>さんをインストールして使うのもいいけどKyokoさんは漢字全然読めないからお察し。英語を読ませる場合、sayコマンドの発音は凄いと思います。英語用リストではsayコマンド使ってます。</p>

<p>SayKotoeri2の方がいろいろコマンドのオプションがあって使いやすいんだけど、女性1、いわゆるゆっくり(れいむ)の声がSayKotoeriの方でしか使えなかったんでやむなくSayKotoeri使ってます。SayKotoeri2で同じ声使う方法知ってる方がいらしたら教えてほしい。</p>

<p>それとSayKotoeriは英語が全然読めないのでことえり辞書で教育するといいっぽいです。(例: 読み->ついったー, 単語:Twitter)<br/>
それ用の辞書入れたら良いのだろうけど無料でいいやつは現状ないかも。シェアウェアなら-><a href="http://nadroom.dousetsu.com/download/download_katakana_share.html">NADのカタカナ英語辞書(シェア)</a></p>

<p>一応正規表現でツイートに埋め込まれてるURLを「URL」, RTを「Retweet」に置換などはしてますがもっと置換のパターン増やせばよりストレスなく聞き取れるかも。</p>

<h2>コード</h2>

<p>twAloud.py</p>

<pre><code>#!/usr/bin/env python
# -*- coding:utf-8 -*-
#
# Timelineをストリーミングで読み上げさせる
# 
# Author:   haya14busa
# URL:      http://haya14busa.com
# require:  SayKotoeri, Saykana or SayKotoeri2
# OS:       for Mac Only
# Link:     [twitterをターミナル上で楽しむ(python)](http://www.nari64.com/?p=200)

import tweepy
from tweepy import  Stream, TweepError
import logging
import urllib
from subprocess import call
import re
import sys, codecs

sys.stdout = codecs.getwriter('utf_8')(sys.stdout)
sys.stdin = codecs.getreader('utf_8')(sys.stdin)

def get_oauth():
    CONSUMER_KEY='**********'
    CONSUMER_SECRET='**********'
    ACCESS_TOKEN_KEY='**********'
    ACCESS_TOKEN_SECRET='**********'

    auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
    auth.set_access_token(ACCESS_TOKEN_KEY, ACCESS_TOKEN_SECRET)
    return auth

def str_replace(string):
    string = re.sub('&amp;.+;', ' ', string)
    # remove URL
    string = re.sub('(https?|ftp)(:\/\/[-_.!~*\'()a-zA-Z0-9;\/?:\@&amp;=+\$,%#]+)', 'URL', string)
    # remove quote
    string = re.sub('"', ' ', string)
    string = re.sub("'", ' ', string)
    string = re.sub('\/', ' ', string)

    string = re.sub('RT', 'Retweet', string)
    return string

class CustomStreamListener(tweepy.StreamListener):

    def on_status(self, status):

        try:
            print u'---{name}/@{screen}---\n   {text}\nvia {src} {created}'.format(
                    name = status.author.name,
                    screen = status.author.screen_name,
                    text = status.text,
                    src = status.source,
                    created = status.created_at)
            read_text = str_replace(status.text.encode('utf-8'))
            call(['SayKotoeri -s "-s 120" "{text}" &gt;/dev/null 2&gt;&amp;1'.format(text=read_text)], shell=True)

        except Exception, e:
            print &gt;&gt; sys.stderr, 'Encountered Exception:', e
            pass

    def on_error(self, status_code):
        print &gt;&gt; sys.stderr, 'Encountered error with status code:', status_code
        return True # Don't kill the stream

    def on_timeout(self):
        print &gt;&gt; sys.stderr, 'Timeout...'
        return True # Don't kill the stream


class UserStream(Stream):

    def user_stream(self, follow=None, track=None, async=False, locations=None):
        self.parameters = {"delimited": "length", }
        self.headers['Content-type'] = "application/x-www-form-urlencoded"

        if self.running:
            raise TweepError('Stream object already connected!')

        self.scheme = "https"
        self.host = 'userstream.twitter.com'
        self.url = '/2/user.json'

        if follow:
           self.parameters['follow'] = ','.join(map(str, follow))
        if track:
            self.parameters['track'] = ','.join(map(str, track))
        if locations and len(locations) &gt; 0:
            assert len(locations) % 4 == 0
            self.parameters['locations'] = ','.join(['%.2f' % l for l in locations])

        self.body = urllib.urlencode(self.parameters)
        logging.debug("[ User Stream URL ]: %s://%s%s" % (self.scheme, self.host, self.url))
        logging.debug("[ Request Body ] :" + self.body)
        self._start(async)

def main():
    auth = get_oauth()
    stream = UserStream(auth, CustomStreamListener())
    stream.timeout = None
    stream.user_stream()

if __name__ == "__main__":
    main()
</code></pre>

<h2>使い方</h2>

<p><a href="https://dev.twitter.com/">Twitter Developers</a>に登録してCONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN_KEY, ACCESS_TOKEN_SECRETをそれぞれ取得してコードの該当位置に書き込んでください。PINコードで認証とかは気が向いたらまた考える。</p>

<p>読み上げコマンド含め好きなように編集して使ってください。デフォルトだと一般的なゆっくりの声です。もちろん読み上げなしにして授業中や会社でばれないようにツイッターするのもよし。</p>

<p>あとはターミナルで<code>python twaloud.py</code> 終了はCtrl-Cで強制終了してください。</p>

<p>それとデフォルトのTerminal.appよりも<a href="(http://www.iterm2.com/#/section/home)">iTerm2</a>だとコマンドクリックでURL開けるのでタイムライン読むのに便利です。</p>

<h2>参考リンク</h2>

<h3>ライブラリ</h3>

<ul>
<li><a href="https://github.com/tweepy/tweepy">tweepy/tweepy · GitHub</a></li>
<li><a href="https://github.com/bear/python-twitter">bear/python-twitter · GitHub</a></li>
</ul>


<h3>リストバージョン</h3>

<ul>
<li><a href="http://haya14busa.com/tweepy-read-aloud-list-tl/">PythonでツイッターのリストのTLを擬似ストリーミングで読み上げさせる[tweepy] « haya14busa</a></li>
</ul>


<h3>コード</h3>

<ul>
<li><a href="http://www.nari64.com/?p=200">twitterをターミナル上で楽しむ(python)</a></li>
<li><a href="http://kk6.hateblo.jp/entry/20110817/1313564125">tweepyがUser Streamsに対応していた &#8211; kk6のメモ帳*</a></li>
<li><a href="http://creco.net/2009/07/17/softalk_twitter_to_bring_out_slowly_in_a_voice_of/">TwitterをSoftalkのゆっくりボイスでしゃべらせる 2 | クレコ</a></li>
</ul>


<h3>読み上げ関連</h3>

<ul>
<li><a href="https://sites.google.com/site/nicohemus/home/saykotoeri">SayKotoeri &#8211; Hemus -Macアプリ</a></li>
<li><a href="http://www.a-quest.com/quickware/saykana/">SayKana &#8211; Mac用音声合成プログラム</a></li>
<li><a href="https://sites.google.com/site/nicohemus/home/saykotoeri2">SayKotoeri2 &#8211; Hemus -Macアプリ</a></li>
<li><a href="http://stts.hatenablog.com/entry/20110724/1311513263">Mac OSX 10.7 Lion付属のKyokoさんにスピーチしてもらう &#8211; sttsのソースコードMemoブログ</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
