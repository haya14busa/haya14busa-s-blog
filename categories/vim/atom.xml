<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim, | haya14busa]]></title>
  <link href="http://haya14busa.com/categories/vim/atom.xml" rel="self"/>
  <link href="http://haya14busa.com/"/>
  <updated>2017-12-31T23:59:22+09:00</updated>
  <id>http://haya14busa.com/</id>
  <author>
    <name><![CDATA[haya14busa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go に恋した Vimmer の2016年の振り返り]]></title>
    <link href="http://haya14busa.com/2016-is-go-year/"/>
    <updated>2016-12-29T17:47:59+09:00</updated>
    <id>http://haya14busa.com/2016-is-go-year</id>
    <content type="html"><![CDATA[<p>この記事では2016年 <a href="https://twitter.com/haya14busa">@haya14busa</a> がやってきた活動，特にVimとかGo 活動をざっくり振り返ります．
個人的な備忘録です．あとポエム．</p>

<h3>過去の振り返り記事</h3>

<ul>
<li><a href="http://haya14busa.com/vim_driven_learning/">1年間『Vim駆動学習』してきて最高に楽しかったのでオススメしたい - haya14busa</a></li>
<li><a href="http://haya14busa.com/haya14busa-s-happy-vimming-year-2014/">2014年の振り返り. またはプログラミング2年目をVimに捧げるとこうなるという話 - haya14busa</a></li>
<li><a href="http://haya14busa.com/look-back-2015/">はてな，Googleインターン行ってイカやりすぎたイカVimmerの2015年の振り返り - haya14busa</a></li>
</ul>


<p>今年はざっくりプログラミング &amp; Vimmer 歴 4年目でした．
そろそろプログラミングの基礎的なところわかってなくても，まだはじめてそんな経ってなくてまだ勉強できてないんです〜，また今度やっておきますっ!
みたいな言い訳が完全に通用しない年になってきた気がします (そもそも実際に言ったことは無い)．
まだまだ学んでおきたい分野はたくさんあって，特にもうちょっとレイヤーが下の要素もやっていって理解しておきたさがありますね&hellip;</p>

<h2>&ldquo;Go&rdquo; に恋した 2016年</h2>

<p>AlphaGo, Pokemon GO, Amazon Go&hellip; &ldquo;Go&rdquo; は2016年の1つのキーワードだったように思いますが，個人的には Go 言語の &ldquo;Go&rdquo; に恋した1年でした．</p>

<p><img src="../images/post/2016-12-26-gopher-stickers-lovely.png" alt="" /></p>

<p><small>credit: <a href="https://github.com/tenntenn/gopher-stickers">Gopher by tenntenn CC BY 3.0</a></small></p>

<h3>Go との出会い</h3>

<p>Go 言語との出会いは去年インターンでGoをはじめて使ったときでした．</p>

<p>その時一目惚れ&hellip; をしたわけではありません．</p>

<p>シンプルでとにかくプロジェクトで動くものは作れる感じだったので，なんとなくGoよさそうかなぁとは感じつつも，
ちょっと気になっている子(Scala) との大きな違いに戸惑ってたりしてました．
&ldquo;Functional Programming&rdquo;? なにそれおいしいの? とでも聞こえてきそうな Go の雰囲気に，
僕は一歩足を引いて評価を保留してました．
ただ，さも vim で書くために生まれてきた言語では&hellip;? というほどの <code>gofmt</code>
といった周辺のツールの充実っぷりはこの頃から大好きで，言語というよりは周囲の
エコシステムがよさ&hellip;という印象でした．</p>

<p>また，Go と出会ったころと時を同じくして，僕はスプラトゥーンと出会ってました．
お家に帰って Go やってる場合ではなく，一日中イカする毎日．
イカの存在によって Go とはどこかビジネスライクな付き合いにとどまってました．イカはっょぃ．</p>

<h3>Go との別れ</h3>

<p>それから程なくして，インターンが終了しました．
Go をいちから学ぶところからはじめたにも関わらず，
終了時にある程度のものが出来たことを Go にも感謝しつつ，
一旦 Go との付き合いもお別れになりました．</p>

<p>結局，まぁなんかよさそうな言語だ程度の(ふんわり)印象でここで一旦お別れしたわけですが，
後々，このときのいい環境で Go を書いてレビューしてもらったり，
教えてもらったことはとても役に立ちました．
ありがたい．</p>

<h3>Go との再会</h3>

<p>2016年の春，忙しかった時期も一段落し，スプラトゥーンとの距離をうまく保てるようになった僕は
ちょっとした小さいツールを Go で書くことにしました．</p>

<p>理由としては，コマンドラインツールとか Go で書くのは便利そうだったことや，
来年以降もGo書くことになりそうかなぁという打算的な思考，
また同じ頃にはじめたアルバイト先のいくつかのサブシステムは Go で書かれていることもあり，
Go 書けるとそのへんも触れておもしろそうかなという気持ちがありました．</p>

<p>数カ月の Go とのお別れ期間でいろいろ忘れていることに戸惑いつつも，書いていくうちに勘も戻ってきました．
ちょっとした自分用ツールをいくつか Go で完成させて，簡単にサーバにもっていって動かすことができてよいなーと感じたり，
Google App Engine で雑に動かしたりして遊んでました．
アルバイト先でもちょっとずつ書いたりするようになって，Go と触れ合う時間は増えました．</p>

<h3>2016年秋，気づけば Go に恋に落ちてた</h3>

<p>それからも，定期的に Go で何か作ったりしてました．例えば，</p>

<ul>
<li><a href="https://github.com/haya14busa/goplay">haya14busa/goplay: The Go Playground (https://play.golang.org/) client</a>

<ul>
<li>コマンドラインから Go Playground で Go を実行したり，コードを Playground に共有するツール</li>
<li>習作という向きも強かったけど，いまでも Playground でコードを共有する際に使ったりしていて便利．</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/gopkgs">haya14busa/gopkgs: List Go packages FAST by using the same implementation as goimports</a>

<ul>
<li>goimports と同じ内部実装でGo のパッケージをリストするツール</li>
<li>goimports と同じ実装なので <code>.goimportsignore</code> も見てくれてたりなど速い．</li>
<li>peco/fzf/unite といったフィルタリングツールと組み合わせて，import したり godoc を開いたりなどして今も便利に使ってる．</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/goverage">haya14busa/goverage: go test -coverprofile for multiple packages</a>

<ul>
<li>マルチパッケージ対応版 go test -coverprofile</li>
<li>関連記事: <a href="http://haya14busa.com/ci-for-go-in-end-of-2016/">Go の CI で lint と カバレッジ回して非人間的なレビューは自動化しよう in 2016年 - haya14busa</a></li>
</ul>
</li>
<li>関連Post: <a href="https://medium.com/@haya14busa/golang-tips-you-might-not-know-1c90e6921a3#.4h65zgqzb">Golang tips you might not know – Medium</a></li>
</ul>


<p>この頃には Go がかなり手に馴染むようになってきました．上記に上げたツールも Go
の開発を助けるツールだということからも，Go をより書くようになってきてることがうかがえます．</p>

<p>特にきっかけはありませんでした．でもこの頃にはもう Go に恋してたんだと思います．
その結果，特に意味もなく Vim script のパーサを Go 言語で動かしたいなぁ&hellip;
既存の Python 実装とかあるけど，Go でいじりたいなぁ&hellip; と思って Go 実装を作ったりしてました．</p>

<h4>go-vimlparser - Vim Script Parser written in Go</h4>

<ul>
<li>GitHub: <a href="https://github.com/haya14busa/go-vimlparser">haya14busa/go-vimlparser: Vim Script Parser written in Go</a></li>
<li>Post: <a href="https://medium.com/@haya14busa/vim-script-parser-written-in-go-4d0296782a14#.rtaybepih">Vim Script Parser written in Go – Medium</a></li>
<li>VimConf でも発表しました: <a href="https://medium.com/@haya14busa/report-of-vimconf2016-an-international-conference-for-vim-f99925893322#.d8n121p9e">Report of #vimconf2016 — an international conference for Vim – Medium</a></li>
</ul>


<p>Just for fun ではじめましたが，結果として最速 Vim script parser 実装となって，Vimmer にも嬉しい便利なものになったと思います．
Go のパフォーマンスチューニングのやり方も改めて経験できて身についたし，
AST の表現や AST walker の実装をするために <a href="https://golang.org/pkg/go/ast/">go/ast</a>
のコードを読んでインターフェースをパク&hellip;参考にしたりとおもしろかった．
Go の標準ライブラリのデザインはとても参考になるし，それを Go 言語でザクザク読めるのは本当にいいなぁと思います．</p>

<h3>Go と Vim との共同作業</h3>

<p>この頃，Vim はJSONやchannel, job 機能が実装され，外部インターフェースとの通信が容易になり，もうすぐ Vim 8.0 出すよ〜という時期でした．
Go に恋した Vimmer としては，もちろんここで Go 言語を使って Vim との共同作業をさせたいというのは必然です!
(これでは Go と Vim がカップルになってるのではということは気にしない．でも実際2人の相性はとてもよい)</p>

<p>このあたりの話は Vim Advent Calendar で書きました．</p>

<ul>
<li><a href="http://haya14busa.com/vim-go-client/">Go で Vim プラグインを書く - haya14busa</a></li>
<li><a href="https://github.com/haya14busa/vim-go-client">haya14busa/vim-go-client: [WIP] Vim 8.0 client written in go</a></li>
<li><a href="https://github.com/haya14busa/vim-stacktrace">haya14busa/vim-stacktrace: Stacktrace of Vim script</a></li>
</ul>


<p>vim-go-client の通信のハンドリングのデザインは Go の <a href="https://golang.org/pkg/net/http/">net/http</a> のコードを読んで参考にしたりしました．
が，もうちょっといい感じにできそうな気がする&hellip;
実際に Go で vim-stacktrace という便利プラグインを作れることを確認できて，go-vimlparser も有効活用できたりなど，
Vim活にも Go が絡むようになってきてますます Go が好きになっていきました．</p>

<h3>Go と Vim との間に生まれた子供 - reviewdog</h3>

<p>(Go と Vim が結婚して子供を産みました．僕のGoへの恋は片想い)</p>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/d598ed7dc49fefb0018e422e4c43e5ab8f207a6b/reviewdog/reviewdog.logo.png" alt="reviewdog logo" /></p>

<ul>
<li><a href="https://github.com/haya14busa/reviewdog">haya14busa/reviewdog: A code review dog who keeps your codebase healthy</a></li>
<li><a href="https://github.com/haya14busa/errorformat">haya14busa/errorformat: Vim&rsquo;s quickfix errorformat implementation in Go</a></li>
<li><a href="http://haya14busa.com/reviewdog/">reviewdog を飼ってコードレビューや開発を改善しませんか - haya14busa</a></li>
<li><a href="https://medium.com/@haya14busa/reviewdog-a-code-review-dog-who-keeps-your-codebase-healthy-d957c471938b#.r3hb734et">reviewdog — A code review dog who keeps your codebase healthy</a></li>
</ul>


<p>reviewdog は僕の 2016年に作ったプロダクトの一番のヒット作と言えます．reviewdog の GitHub のスターは執筆時現在 268 です．
reviewdog が好きなのは，実際に超便利プロダクトだということはもちろん，Vim の &lsquo;errorformat&rsquo; という便利な機能を
Go言語で port して Vim の外でも使えるようにしたという，Vim と Go の&#8221;よさ&#8221; が存分に発揮されたプロダクトだというところがとても気に入っています．</p>

<p>reviewdog のようなものを作るには，いろんな linter などのコマンドの結果を扱わなくてはいけません．
他のツールでは， <a href="https://github.com/alecthomas/gometalinter">gometalinter</a> のように linter ごとに正規表現をアドホックに作ったり，
それぞれのコマンドの runner を作ったり， checkstyle xml やJSONのある機械的な形式を吐くlinterにのみ対応するといった割り切りをしています．</p>

<p>Vim はそういういろんなコマンドやいろんなアウトプット形式に対応するというのは得意で，
&lsquo;errorformat&rsquo; という scanf-like な機能がこれにあたり，この形式を使うことに決めました．</p>

<p>ただしこの&#8217;errorformat&#8217;は Vim でしか使えません．そこを同じくマルチプラットフォームで簡単に動く
Go 言語で同等の機能をポート(<a href="https://github.com/haya14busa/errorformat">haya14busa/errorformat</a>)し，
Vim のよさを Go がサポートしてより広く使ってもらえるようにできました．</p>

<p>reviewdog は現在もちょくちょく改善していて，特にローカルでもより動かしやすいようにしようと思ってます．
年内にある程度開発してバージョン1.0にしようかと思っていましたが，もう少しかかりそうです．</p>

<h4>reviewdog の状況</h4>

<ul>
<li><blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">reviewdogでエゴサしたらつい昨日リリースしたというのにすでに <a href="https://twitter.com/hashtag/lispmeetup?src=hash">#lispmeetup</a> というミートアップで lisp のlint ツールの発表で reviewdog 使ってくれているっぽいことを発見した&hellip;. べんりすぎる <a href="https://t.co/zYQeOVIGTX"><a href="https://t.co/zYQeOVIGTX">https://t.co/zYQeOVIGTX</a></a></p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/790888183844089857">October 25, 2016</a></blockquote>

<ul>
<li>スライド: <a href="http://www.slideshare.net/fukamachi/sblint">SBLint</a></li>
<li>リリースした直後に reviewdog に対応するための lint ツール作った発表とかを観測してビビった．</li>
</ul>
</li>
<li><a href="https://speakerdeck.com/fortkle/yasashii-sonogo">やさしいコーディング規約の導入〜その後〜 / yasashii-sonogo // Speaker Deck</a>

<ul>
<li>実際に使ってもらえてるっぽくてよさ</li>
</ul>
</li>
<li><a href="https://github.com/vim-jp/vital.vim/pull/458">CI: reviewdog 導入 by haya14busa · Pull Request #458 · vim-jp/vital.vim</a>

<ul>
<li>vital.vim という Vim script ライブラリのリポジトリに reviewdog 導入してもらった．</li>
</ul>
</li>
<li>reviewdog は僕がバリバリドックフーディングしているのはもちろんのこと，ちょっと使ってもらってる例はちらほら見かける．</li>
</ul>


<p>OSS で導入するのは CI サービスがうまく Secure Token を扱ってくれないせいで，
若干最初の導入が手間なのが使ってもらうには少し壁になってるのが悲しい．Travis〜CircleCI〜頼む〜改善してくれ〜．
一度導入してしまえばあとは楽だし，もしくはローカルでだけ使っても便利なのでもうちょっと使用事案増えて欲しい．</p>

<h3>Go 活動その他</h3>

<ul>
<li><a href="http://haya14busa.com/golang-how-to-write-mock-of-interface-for-testing/">Golangにおけるinterfaceをつかったテストで mock を書く技法 - haya14busa</a>

<ul>
<li>いい記事に感化されて僕も何か書きたくなった。事案</li>
</ul>
</li>
<li><a href="http://haya14busa.com/ci-for-go-in-end-of-2016/">Go の CI で lint と カバレッジ回して非人間的なレビューは自動化しよう in 2016年 - haya14busa</a>

<ul>
<li>Go の CI 周りの紹介</li>
</ul>
</li>
<li><a href="https://medium.com/@haya14busa/sum-union-variant-type-in-go-and-static-check-tool-of-switch-case-handling-3bfc61618b1e#.cp9eqobvo">Sum/Union/Variant Type in Go and Static Check Tool of switch-case handling – Medium</a>

<ul>
<li><a href="http://developer.hatenastaff.com/entry/engineer-advent-calendar-2016">はてなエンジニアアドベントカレンダー2016</a> の 6日目の記事</li>
<li>はてなの Mackerel チームでアルバイトしていて，仕事してて直和型っぽいことを表現したいときの知見がちょうどあったのでアドベントカレンダーに書かせていただきました．</li>
<li>linter はアドベントカレンダー書くなら知見共有だけよりはツールも欲しいなと書きました．<code>go/types</code> パッケージ便利．</li>
</ul>
</li>
<li>OSS Contributions

<ul>
<li><a href="https://github.com/mattn/goveralls">mattn/goveralls</a> で複数パッケージサポート足した</li>
<li>go-github で GitHub の Review API サポートのレビューをなぜかメンテナでもないけどやってる <a href="https://github.com/google/go-github/issues/495">https://github.com/google/go-github/issues/495</a>

<ul>
<li>実質 GitHub Review API の reviewer みたいにもなってて Support に要望送りまくってる</li>
</ul>
</li>
<li>あんまりやってなかった&hellip;</li>
</ul>
</li>
</ul>


<h3>Go が好き</h3>

<p>書いてるうちに手に馴染んできて，いつの間にか好きになってましたが，結局僕はなぜ Go に恋に落ちたのでしょうか．
1つは間違いなく Go の Simplicity に惹かれたんだと思います．</p>

<h4>Simplicity is Complicated</h4>

<ul>
<li>slide: <a href="https://talks.golang.org/2015/simplicity-is-complicated.slide#1">Simplicity is Complicated</a></li>
<li>youtube: <a href="https://www.youtube.com/watch?v=rFejpH_tAHM">dotGo 2015 - Rob Pike - Simplicity is Complicated - YouTube</a></li>
</ul>


<p>Rob Pike の &ldquo;Simplicity is Complicated&rdquo; という発表がオススメです．
僕はこの発表をみて，胸がきゅーーんっとなりました．Go かわいいよ Go．</p>

<p>Go はなぜ成功したんでしょうか? コンパイル速度，実行速度，デプロイの容易さ，充実したツール，質の高いライブラリ，interfaceやconcurrencyをサポートする言語機能&hellip;
そのどれもが大事で，僕も実際どれも好きですが，Rob Pike は &ldquo;Simplicity&rdquo; が答えだといいます．
そしてこの &ldquo;Simplicity&rdquo; は &ldquo;Complicated&rdquo; だとも．</p>

<p>シンプルという言葉はともすれば薄っぺらくなります．特にVimmerという職業(?)柄，
Vim plugin とかをいくつかみると，&#8221;simple&#8221; だとか，他にも &ldquo;easy&rdquo;, &ldquo;minimalictic&rdquo;
と言った単語が並んでたりします．これは自戒を込めてですが，場合によってはちょっと薄っぺらいなぁと感じるようなものもあったりします．</p>

<blockquote><p>Simplicity is the art of hiding complexity.</p></blockquote>

<p>Go が simple だとか，less is more だとか，引き算の言語だ&hellip;といった表現をされるとき，
僕は全く薄っぺらいだとかは思いません．
これは&#8221;Simplicity&#8221; というのは実は&#8221;Complicated&#8221; であり，
&ldquo;Simplicity&rdquo; の背後には&#8221;complexity&#8221;を洗練された，緻密なデザインや設計，実装が隠れているからなんだと思います．</p>

<p>GCやgoroutine,interfaceといった実際の例がスライドで説明されているので是非見てみてください．</p>

<p>僕らが享受しているGo の &ldquo;Simplicity&rdquo; は簡単に実現されたものではありません．
僕らが Go に対して，「あぁ，こういうのでいいんだよ．こういうので．」と感じるとき，
その背後には Go がたくさんの機能を削ぎ落として，直交する必要十分な機能のデザインと
複雑な実装が存在しています．</p>

<blockquote><p>Simplicity is hard—to design. <br>
Simplicity is complicated—to build. <br>
But if you get it right&hellip; <br>
Simplicity is easy—to use. <br>
The success of Go proves it. <br>
&ndash; <a href="https://talks.golang.org/2015/simplicity-is-complicated.slide#30">https://talks.golang.org/2015/simplicity-is-complicated.slide#30</a></p></blockquote>

<p>&ldquo;Simplicity&rdquo; をデザインするのは難しく，&#8221;Simplicity&#8221;の実現はとても複雑です．
でもこれらをうまくやると，&#8221;Simplicity&#8221; は使うのが簡単になります．</p>

<p>これが Go は， &ldquo;simple&rdquo; であり，&#8221;less is more&#8221; であり，&#8221;引き算の言語&#8221; であり，
「あぁ，こういうのでいいんだよ．こういうので．」ということなのでしょう．</p>

<h4>Go is more Pythonic than Python</h4>

<p><a href="https://talks.golang.org/2012/zen.slide#1">Go and the Zen of Python</a></p>

<pre><code>&gt;&gt;&gt; import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
</code></pre>

<p>僕が最初に学んだ言語は Python で，The Zen of Python の思想はとても好きでした．</p>

<ul>
<li>Explicit is better than implicit.</li>
<li>Simple is better than complex.</li>
<li>Readability counts.</li>
<li>There should be one&ndash; and preferably only one &ndash;obvious way to do it.</li>
</ul>


<p>Go は The Zen of Python に，ともすれば Python 以上にマッチしています．
Go が Pythonic なところも間違いなく僕が Go を好きになった一因です．
なんなら，Go が Python より Pythonic なので，もう Python で書くようなところは，
Go で書きたい．</p>

<p>Go の前に学んだ言語は Scala でした．
Scala が魅せてくれるプログラミング言語の可能性にはスゴイなぁ，おもしろいなぁ，
と思いつつも，Scala が気になる子止まりだったのは，The Zen of Python の思想の真逆を
行くような，ないし真逆のコードが生まれやすい言語だからだと思います．
Scala は今も書いているし，堅牢かつ規模の大きいコードも Scala だと比較的安心して書いていけたり，
僕に &ldquo;Functional Programming&rdquo; などを教えてくれた Scala は好きですが，恋に落ちるほどではなかった．
僕を含め，もう少し人類が進化するとまた変わってくる気もする．</p>

<h3>Go とのこれから</h3>

<p>2017年もGoと仲良くやってきたいです．個人的には特に Vim との連携とか含め．
Go 本体になんかコントリビュッションしたいと思いつつできなかったので，機会があればやっていきたい．</p>

<p>あとは，Go のよさを再確認するため(?)に別のパラダイムの言語(rust とか)にちょい浮気しつつやっていきたいですね．</p>

<h2>Vim との 2016年 - 本妻は Vim</h2>

<p>2016年のVim活もザックリ振り返ります．</p>

<h3>EasyMotion 3.0</h3>

<p><a href="http://haya14busa.com/vim-easymotion-ver-3-dot-0-overwin-motions/">Vimのカーソル移動はもっともっと爆速になる! Vim-EasyMotion v3.0 をリリースしました - haya14busa</a></p>

<p>結構前にやった気もしますが，今年でした．
バージョン3.0の機能追加でウィンドウをまたいだEasyMotionによるカーソル移動が実現しました．
完全にライフチェンジング機能だし，待望の機能の実現で自分の Vim script 力の高まりも確認できてよかった．</p>

<h3>vital のロード高速化</h3>

<ul>
<li><a href="http://haya14busa.com/revital-vim-makes-vital-vim-a-lot-faster/">revital.vim で vital.vim を爆速にしてお前らの Vim plugin を速くする - haya14busa</a></li>
<li><a href="https://github.com/vim-jp/vital.vim/pull/415">vital モジュールのロードを爆速にする &amp; ロード方法を考える by haya14busa · Pull Request #415 · vim-jp/vital.vim</a></li>
</ul>


<p>まず，revital.vim という別プラグインで vital.vim のロードを高速化できることを示した後，結局 vital.vim 本体に入れてもらいました．
ついでにリファクタリングしたりインターフェースの改善も行いました(後方互換性は維持している)．
特定の環境でvital.vimが遅いという問題を完全に解決し，現在では autoload 関数を呼ぶのと変わらなくなってます．</p>

<h3>はじめてのパッチ - Vim の Contributer に!</h3>

<ul>
<li><a href="https://github.com/vim-jp/issues/issues/893">statuslineの%{}などでevalした際に，try-catch でVimのエラーをキャッチしていても statusline が disable されてしまう · Issue #893 · vim-jp/issues</a></li>
<li><a href="https://github.com/vim/vim/commit/a742e084b677f76c67e9e52c4f9fb9ab24002e20">patch 7.4.1711 · vim/vim@a742e08</a></li>
</ul>


<p>vital のロード高速化の際に Vim のバグを踏んで，小さいですがはじめてパッチを書いて取り込まれました!
このバグは本体のバグだったということもあって異常に原因究明が難しく，原因を見つけたのは <a href="https://github.com/lambdalisue">lambdalisue</a> さんでした．</p>

<p>今年は他にも EasyMotion で踏んだバグの修正パッチや，Vim8.0 リリース前の channelやjob 機能を叩いたパッチを書いたり，
Vim 8.0 に lambda いれようぜ! ともう一回 vim-jp でちょっと騒いで，あとは vim-jp の <a href="https://github.com/mattn">mattn</a> さんや
<a href="https://github.com/k-takata">k-takata</a> さんに丸投げするなどをしてました．</p>

<p>そのあたりの話で１つ記事を書いてます -> <a href="https://medium.com/@haya14busa/vim-8-0-released-and-now-im-a-contributor-of-vim-36d93bbfc7b6#.nxkskyex2">Vim 8.0 released and Now, I’m a contributor of Vim !!! – Medium</a></p>

<p>今年になって小さいとは言え Vimのパッチ書いたりできたのはとても嬉しかったです．
Vim のソースコードも読むことは出来るし，デバッグの仕方もわかってきたし，
場合によってはちょっと修正するくらいのことも出来るということがわかったのは収穫でした．
ただ，もっと C 力は高めたほうがよさそう．</p>

<h3>Vim 8.0 &amp; Go関連</h3>

<ul>
<li>go-vimlparser</li>
<li>vim-go-client</li>
<li>vim-stacktrace</li>
<li>パッチいくつか．</li>
</ul>


<p>詳細は Go のところで紹介したので省略．</p>

<h3>VimConf</h3>

<ul>
<li><a href="https://medium.com/@haya14busa/report-of-vimconf2016-an-international-conference-for-vim-f99925893322#.d8n121p9e">Report of #vimconf2016 — an international conference for Vim – Medium</a></li>
<li><a href="https://github.com/haya14busa/vim-metarepeat">haya14busa/vim-metarepeat</a></li>
<li><a href="https://github.com/haya14busa/vim-textobj-function-syntax">haya14busa/vim-textobj-function-syntax: heuristic syntax-based text-object for function</a></li>
</ul>


<p>発表は go-vimlparser についての話ですでに書きましたが，
<a href="https://github.com/t9md">t9md</a> さんの <a href="https://github.com/t9md/atom-vim-mode-plus">t9md/atom-vim-mode-plus</a> の発表が面白くて，
Atom の vim-mode-plus のアイデアを Vim にバックポートする業などをしていました．</p>

<p><a href="https://github.com/haya14busa/vim-metarepeat">haya14busa/vim-metarepeat</a> は vim-mode-plus の occurence で出来るようになる便利な機能を別の角度から実装したもので，
ドットリピートをオペレータとして，テキストオブジェクト内の対象に対して一括でドットリピートを実行するものです．
記事には書いてないけどissueにちょっと考えとかを書いています -> <a href="https://github.com/vim-jp/issues/issues/977#issuecomment-259703728">https://github.com/vim-jp/issues/issues/977#issuecomment-259703728</a>
vim-metarepeat はかなり便利で常用していて，記事書くかぁと思いながら今年が終了しました．</p>

<p><a href="https://github.com/haya14busa/vim-textobj-function-syntax">haya14busa/vim-textobj-function-syntax</a> は関数text-objectをVimのsyntaxを使って言語ごとに用意せずに使えるようにしたものです．
syntax によって使える/使えない言語がありますが，ちょっと便利．
これも記事にはしてないけどissueにちょっとコメントしてます．-> <a href="https://github.com/vim-jp/issues/issues/987#issuecomment-262870187">https://github.com/vim-jp/issues/issues/987#issuecomment-262870187</a></p>

<h3>Google Translate の衝撃と Vim</h3>

<p><a href="https://japan.googleblog.com/2016/11/google.html">Google Japan Blog: Google 翻訳が進化しました。</a></p>

<p>今年はGoogle Translate が日英間の翻訳に Neural Machine Translation を導入して，
機械翻訳がとても流暢になりました．Google Translate さんすごい．
この改善をみて，Vimから使いやすくするためにいくつかプラグインを作りました．</p>

<ul>
<li><a href="https://github.com/haya14busa/vim-open-googletranslate">haya14busa/vim-open-googletranslate: Open Google Translate (https://translate.google.com/) from Vim.</a>

<ul>
<li>Vim から Google Translate を開く operator やコマンドを追加するプラグイン．常用してます．</li>
<li><a href="https://twitter.com/Linda_pp">りんだん</a> さんに <a href="https://github.com/rhysd/electron-open-url">rhysd/electron-open-url</a> という Electron で url を開くものを作ってもらって，これをつかって Google Translate を開く設定をすることによって，連続で翻訳しやすくなってとても便利になりました．</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/gtrans">haya14busa/gtrans: Command-line translator using Google Translate</a></li>
<li><a href="https://github.com/haya14busa/vim-gtrans">haya14busa/vim-gtrans: Google Translate in Vim</a>

<ul>
<li>Google Translate の API を使ったもの．こちらは Vim のバッファで完結できる．</li>
<li>API はめちゃめちゃ安いとはいえ，お金がかかるし，vim-open-googletranslate with electron-open-url の組み合わせが十分便利なのでそちらを最近は使ってる．</li>
</ul>
</li>
</ul>


<h2>英語でブログ記事を書く</h2>

<p>Google Translate の流れでいうと今年後半からは実験的にブログ記事も英語で書くようにしました．
Google Translate 改善前からやっていて，改善後も勿論(?)Google Translateはあくまで補助としての使用ですが．</p>

<h3>書いた英語 Posts</h3>

<ul>
<li><a href="https://medium.com/@haya14busa">haya14busa – Medium</a></li>
<li><a href="https://medium.com/@haya14busa/vim-8-0-released-and-now-im-a-contributor-of-vim-36d93bbfc7b6#.5f2fkfj0o">Vim 8.0 released and Now, I’m a contributor of Vim !!! – Medium</a></li>
<li><a href="https://medium.com/@haya14busa/vim-script-parser-written-in-go-4d0296782a14#.gj03djo2w">Vim Script Parser written in Go – Medium</a></li>
<li><a href="https://medium.com/@haya14busa/reviewdog-a-code-review-dog-who-keeps-your-codebase-healthy-d957c471938b#.80j73sekq">reviewdog — A code review dog who keeps your codebase healthy – Medium</a></li>
<li><a href="https://medium.com/@haya14busa/report-of-vimconf2016-an-international-conference-for-vim-f99925893322#.pz8doupyk">Report of #vimconf2016 — an international conference for Vim – Medium</a></li>
<li><a href="https://medium.com/@haya14busa/golang-tips-you-might-not-know-1c90e6921a3#.zhpcp2dot">Golang tips you might not know – Medium</a></li>
<li><a href="https://medium.com/@haya14busa/sum-union-variant-type-in-go-and-static-check-tool-of-switch-case-handling-3bfc61618b1e#.l22136r8d">Sum/Union/Variant Type in Go and Static Check Tool of switch-case handling – Medium</a></li>
</ul>


<p>英語で書く記事かどうか決めるというよりは，基本的に英語で書いて，どうしても日本語で書いたほうがよさそうだったら日本語で書くことにしています．
直近の2つのアドベントカレンダーは普通に日本語で書いてしまって守れてないけど&hellip;正直時間が取れなかったので日本語に逃げました&hellip;
まぁ日本語で発信するのもそれはそれで大事だと思うのでいいかなぁーとは思ってます．</p>

<p>英語で書く理由としては，今後使うし勉強のためやらなきゃ&hellip;という理由と，
発信を日本に閉じる必要性はないかなーと最近は考えてるからでした．
僕はVimとかGoについて書くことが最近は多いですが，それらの記事のターゲットは大抵 Vimmer か Gopher で，
別に想定読者を日本人に絞る必要性はないんですよね．</p>

<p>日本語で書いた後，英訳しようとはなかなか行動できないので，英語・日本語両方ポスト作ると言うよりは，
実質デファクトになってる英語で書けば英語読める日本人は読めるので，基本的には
英語で1つ記事を書くということにしました．</p>

<p>&hellip;とはいえ時間やクオリティーの兼ね合い，日本のコミュニティーの活性化，
フィードバックのもらいやすさ，そして何より現状の英語力が足りてない問題など，
色々と問題はありますが．そもそもたくさんの人に読んでもらうというのが目的ではないという観点もありそうだけど．</p>

<p>英語で書くと特に日本では伸びづらいですが，
日本で伸びなくても今までリーチしなかった層にリーチするし，
今年書いた記事はだいたいある程度は日本人もそれ以外も読んでもらえたっぽいので，
今の所やってみてよかったです．
reddit とかにあげるとそこそこ読みにきてくれて便利．(redditのCEOがコメント編集したという事件があって，若干使いたさが減りましたが&hellip;)．
来年も続けていこうかなぁと思います．</p>

<p>英語に関してはWritingもそうだけど，どちらかといえば勉強する必要があったのはSpeaking/Listeningだった気が&hellip;
という説もあり，今後がとても心配すぎる&hellip;</p>

<h2>2016年活動情報</h2>

<h3>GitHub Contributions</h3>

<ul>
<li><a href="https://github.com/haya14busa?utf8=%E2%9C%93&amp;tab=repositories&amp;q=created%3A%222016-01-01%20..%202017-01-01%22%20fork%3Afalse&amp;type=&amp;language=">作った Repositories</a></li>
<li><a href="https://github.com/search?utf8=%E2%9C%93&amp;q=is%3Apr+author%3Ahaya14busa+created%3A%222016-01-01+..+2017-01-01%22+&amp;type=Issues&amp;ref=searchresults">開いた issues</a></li>
<li><a href="https://github.com/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+author%3Ahaya14busa+created%3A%222016-01-01+..+2017-01-01%22+">開いた Pull Requests</a></li>
</ul>


<p>GitHub Contributions (including private contributions)</p>

<p><img src="../images/post/2016-github-all-contributions.png" alt="GitHub Contributions (including private contributions)" /></p>

<p>GitHub Contributions (public)</p>

<p><img src="../images/post/2016-github-public-contributions.png" alt="GitHub Contributions (public)" /></p>

<h3>Posts</h3>

<ul>
<li>Jan 19 <a href="http://haya14busa.com/vim-easymotion-ver-3-dot-0-overwin-motions/">Vimのカーソル移動はもっともっと爆速になる! Vim-EasyMotion v3.0 をリリースしました - haya14busa</a></li>
<li>Mar 23 <a href="http://haya14busa.com/revital-vim-makes-vital-vim-a-lot-faster/">revital.vim で vital.vim を爆速にしてお前らの Vim plugin を速くする - haya14busa</a></li>
<li>May 30 <a href="http://haya14busa.com/amazon-kindle-sale-til-2016-06-02/">6/2までKindle本50%オフセール!IT系の本で僕が欲しい本をまとめた!!! - haya14busa</a></li>
<li>Jul 02 <a href="http://haya14busa.com/hatena-pepabo-kyoto/">はてな・ペパボ技術大会〜インフラ技術基盤〜@京都 行ってきたメモ - haya14busa</a></li>
<li>Oct 24 <a href="http://haya14busa.com/reviewdog/">reviewdog を飼ってコードレビューや開発を改善しませんか - haya14busa</a></li>
<li>Nov 02 <a href="http://haya14busa.com/golang-how-to-write-mock-of-interface-for-testing/">Golangにおけるinterfaceをつかったテストで mock を書く技法 - haya14busa</a></li>
<li>Dec 21 <a href="http://haya14busa.com/vim-go-client/">Go で Vim プラグインを書く - haya14busa</a></li>
<li>Dec 24 <a href="http://haya14busa.com/ci-for-go-in-end-of-2016/">Go の CI で lint と カバレッジ回して非人間的なレビューは自動化しよう in 2016年 - haya14busa</a></li>
</ul>


<h3>Posts (English)</h3>

<ul>
<li>Sep 13 <a href="https://medium.com/@haya14busa/vim-8-0-released-and-now-im-a-contributor-of-vim-36d93bbfc7b6#.zeqiwqjtq">Vim 8.0 released and Now, I’m a contributor of Vim !!! – Medium</a></li>
<li>Sep 20 <a href="https://medium.com/@haya14busa/vim-script-parser-written-in-go-4d0296782a14#.5ehmbn3dn">Vim Script Parser written in Go – Medium</a></li>
<li>Oct 24 <a href="https://medium.com/@haya14busa/reviewdog-a-code-review-dog-who-keeps-your-codebase-healthy-d957c471938b#.lk0e5kix0">reviewdog — A code review dog who keeps your codebase healthy – Medium</a></li>
<li>Nov 7 <a href="https://medium.com/@haya14busa/report-of-vimconf2016-an-international-conference-for-vim-f99925893322#.fe69sy14m">Report of #vimconf2016 — an international conference for Vim – Medium</a></li>
<li>Dec 1 <a href="https://medium.com/@haya14busa/golang-tips-you-might-not-know-1c90e6921a3#.77th9mu4e">Golang tips you might not know – Medium</a></li>
<li>Dec 6 <a href="https://medium.com/@haya14busa/sum-union-variant-type-in-go-and-static-check-tool-of-switch-case-handling-3bfc61618b1e#.cp9eqobvo">Sum/Union/Variant Type in Go and Static Check Tool of switch-case handling – Medium</a></li>
</ul>


<h2>歩くのが下手って気付いた2016年</h2>

<p>今年は1つ大きく躓いた出来事がありました．躓いただけなら立て直せばよかったはずだったけど，
そのまま歩き続ける意味を見失い，歩みを進めようとする心はもう折れていて，しばらくその場でうずくまってしまいました．
躓いたことにも，歩き直せなかったことにも，道を変えて歩くことさえもできずに，ただただうずくまってました．
今まで通りとはいかないにしても，もうちょっとうまく歩けたはずでした．
あぁ，僕は歩くのがなんて下手なんだ&hellip;</p>

<p>今の所，詳細はオープンインターネットには書かなくてもいいかな&hellip;と思ってます．
書く気がないのにここでふんわり書いたのは完全に自己満足です．忘年です．忘れないけど．</p>

<p>あとは完全にここでやるべきことではないけど，一種の懺悔みたいなものです．
僕が単に1人でうずくまったまま世界から消えても，別に世界はどうってことないけど，
無駄に不要なところにまで迷惑をおかけしてしまったり，いくつか見えた差し伸べられた手も
完全にシャットアウトしてしまったことは，単純に反省しています．ごめんなさい．</p>

<p>最近は人間的な生活をおくるリハビリをしていて，心に平穏は戻りつつある気はします．</p>

<h2>最後に</h2>

<p>2016年の振り返り記事だって言ってるのに無駄なポエムがところどころにあるせいで無駄に長くなった気がします．
あとオープンにやってきたこと何でもかんでも放り込み過ぎて長くなったので，もうちょっとハイライトだけ振り返ればよかった気もする．
まぁ，まだまだとはいえ，2016年結構いろいろやったのでは? と振り返って思いました．
来年の目標，なにか定量的なものを設定して振り返るのが本当は良い気がしますが，
来年はとりあえず強く生きることを目標にします．</p>

<p>来年がとても素晴らしい1年でありますように．</p>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go で Vim プラグインを書く]]></title>
    <link href="http://haya14busa.com/vim-go-client/"/>
    <updated>2016-12-21T18:14:54+09:00</updated>
    <id>http://haya14busa.com/vim-go-client</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://qiita.com/advent-calendar/2016/vim">Vim アドベントカレンダー 2016</a> の21日目の記事です．</p>

<p>最近は Go 言語が大好きすぎて，Vim plugin も Go で書きたい!!! という欲が出てきたので，
Vim plugin を Go で書く方法について紹介します．</p>

<h2>Go で Vim plugin を書くとは?</h2>

<p>一口に Go で Vim plugin を書くといっても</p>

<ol>
<li>Go で書いたバイナリがメインで Vim script の autoload 関数などから呼ぶ．例: <a href="https://github.com/mattn/vim-filewatcher">https://github.com/mattn/vim-filewatcher</a></li>
<li>Go 側からも Vim script を呼ぶ，つまり Vim script で Vim の情報を取得するところなど含めて，ほぼ全部 Go で書く．</li>
</ol>


<p>という 2 段階があると思います．本記事では2の方法も含めて紹介しますがまずは1から行きましょう．</p>

<h2>1. Go で書いたバイナリをつかった Vim plugin の作り方</h2>

<p>これは先程例にあげた <a href="https://github.com/mattn/vim-filewatcher">https://github.com/mattn/vim-filewatcher</a> がシンプルでわかりやすいです．</p>

<p><a href="https://github.com/mattn/vim-filewatcher/blob/22594895e16cb4de11afa37f04d88a996f48da58/filewatcher/filewatcher.go">filewatcher/filewatcher.go</a>
で書いた Go をインストール時に <code>cd filewatcher &amp;&amp; go get -d &amp;&amp; go build</code> でビルドし，
<a href="https://github.com/mattn/vim-filewatcher/blob/22594895e16cb4de11afa37f04d88a996f48da58/autoload/filewatcher.vim">autoload/filewatcher.vim</a>
でこのバイナリを <code>job</code> をつかって呼んでいます．</p>

<p><code>go get -d</code> を呼ぶことで依存するパッケージをダウンロードし，<code>go build</code> することで <code>$GOBIN</code> などを汚さずにプラグインディレクトリにバイナリを配置できます．</p>

<h4><a href="https://github.com/mattn/vim-filewatcher/blob/22594895e16cb4de11afa37f04d88a996f48da58/autoload/filewatcher.vim">autoload/filewatcher.vim</a></h4>

<pre><code>let s:cmd = expand('&lt;sfile&gt;:h:h:gs!\\!/!') . '/filewatcher/filewatcher' . (has('win32') ? '.exe' : '')
if !filereadable(s:cmd)
  finish
endif

function! filewatcher#watch(dir, cb)
  return {'dir': a:dir, 'job': job_start([s:cmd, a:dir], { 'out_cb': a:cb, 'out_mode': 'nl' })}
endfunction
</code></pre>

<p>バイナリを呼んでいるVim script もとてもシンプルで， windows かどうか見ながらバイナリのパスを取得し，
それを <code>job</code> で呼ぶだけです．簡単．プラグインの性質によっては <code>job</code> ではなく <code>system()</code> などを使ってもよいでしょう．</p>

<p>また，開発時には <code>g:plugin_name#debug</code> などを作ってそれを見て <code>go run</code> を呼ぶというふうに変えることもできます．</p>

<pre><code>function! s:separator() abort
  return fnamemodify('.', ':p')[-1 :]
endfunction

let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')

let s:base = expand('&lt;sfile&gt;:p:h:h')
let s:basecmd = s:base . s:separator() . fnamemodify(s:base, ':t')
let s:cmd = s:basecmd . (s:is_windows ? '.exe' : '')

if g:plugin_name#debug
  let s:cmd = ['go', 'run', s:basecmd . '.go']
elseif !filereadable(s:cmd)
  call system(printf('cd %s &amp;&amp; go get -d &amp;&amp; go build', s:base))
endif
</code></pre>

<p>僕が作ったプラグインから引っ張ってきた例で autoload/filewatcher.vim ほどシンプルではないですが，もうちょっとなんとか出来るかもしれないですね．
main パッケージのファイル (<code>s:basecmd . '.go'</code>) を1ファイルにすると<code>go run</code>で呼びやすいです．</p>

<h2>2. Go 側からも Vim script を呼ぶ必要があるようなプラグインの作り方</h2>

<p>mattn/filewatcher ではファイルの変更を検知してstdout にJSONを吐いて，それが job の callback に渡されるという形式で単体で簡潔してましたが，
場合によっては Go 側から Vim の状態を取得したり，Vim script を呼んだりしたい場合もあります．
そういうプラグインを作るには，job を JSON モードで起動し， <a href="http://vim-jp.org/vimdoc-ja/channel.html#channel-commands">:h channel-commands</a>
を使うことによって実現できます．</p>

<h4><a href="http://vim-jp.org/vimdoc-ja/channel.html#channel-commands">:h channel-commands</a></h4>

<pre><code>JSON チャンネルを使用すると、サーバープロセス側はVimへコマンドを送信できます。
そのコマンドはチャンネルのハンドラーを介さずに、Vimの内部で実行されます。

実行可能なコマンドは以下のとおりです:           *E903* *E904* *E905*
    ["redraw", {forced}]
    ["ex",     {Ex コマンド}]
    ["normal", {ノーマルモードコマンド}]
    ["eval",   {式}, {数値}]
    ["expr",   {式}]
    ["call",   {func name}, {argument list}, {number}]
    ["call",   {func name}, {argument list}]
</code></pre>

<p><code>{数値}</code>(<code>{number}</code>) は id で，job -> Vim に渡すさいはマイナスを指定する必要があり，
その渡した id と共に評価された値が返ってきます．</p>

<p>例えば Go 側で stdout に <code>["expr","line('$')", -2]</code> を書き込むと， Vim
が<code>line('$')</code> を評価してその結果が stdin に <code>[-2, "last line"]</code>
といった結果が返ってきます．</p>

<p>便利すぎる&hellip;</p>

<p>ということでidの取扱などこのあたりの処理を毎回丁寧にやるのは面倒くさいので，
<a href="https://github.com/haya14busa/vim-go-client">https://github.com/haya14busa/vim-go-client</a> というラッパーを作りました．
ドキュメント: <a href="https://godoc.org/github.com/haya14busa/vim-go-client#Client">https://godoc.org/github.com/haya14busa/vim-go-client#Client</a></p>

<p><a href="https://godoc.org/github.com/haya14busa/vim-go-client#Client"><code>type Client</code></a> が上記の channel-commands などのに相当するメソッドを持っており，
<a href="https://godoc.org/github.com/haya14busa/vim-go-client#Handler"><code>type Handler</code></a> がメッセージの受け渡しを担当します．</p>

<p>サンプル: <a href="https://github.com/haya14busa/vim-go-client/blob/32a96bf256fabc81dff549a70328a6bb3f24e9b5/_example/dev/job/job.go"><code>_example/dev/job/job.go</code></a></p>

<pre><code>package main

import (
    "fmt"
    "log"
    "os"
    "time"

    vim "github.com/haya14busa/vim-go-client"
)

type myHandler struct{}

func (h *myHandler) Serve(cli *vim.Client, msg *vim.Message) {
    log.Printf("receive: %#v", msg)
    if msg.MsgID &gt; 0 {

        if msg.Body == "hi" {
            cli.Send(&amp;vim.Message{
                MsgID: msg.MsgID,
                Body:  "hi how are you?",
            })
        } else {
            start := time.Now()
            log.Println(cli.Expr("eval(join(range(10), '+'))"))
            log.Printf("cli.Expr: finished in %v", time.Now().Sub(start))
        }

    }
}

func main() {
    handler := &amp;myHandler{}
    cli := vim.NewClient(vim.NewReadWriter(os.Stdin, os.Stdout), handler)
    done := make(chan error, 1)
    go func() {
        done &lt;- cli.Start()
    }()

    cli.Ex("echom 'hi'")
    log.Println(cli.Expr("1+1"))

    select {
    case err := &lt;-done:
        fmt.Printf("exit with error: %v\n", err)
        fmt.Println("bye;)")
    }
}
</code></pre>

<p><code>handler := &amp;myHandler{}</code> でハンドラを作って <code>cli := vim.NewClient(vim.NewReadWriter(os.Stdin, os.Stdout), handler)</code>
で stdin/stdout を介してVim と通信できるclientを作成しています．
あとはこいつを <code>cli.Start()</code> しておけば Vim から <code>ch_sendexpr()</code> などが呼ばれると handler に中身が渡されるし，
<code>cli.Ex("echom 'hi'")</code> などを呼ぶと Vim 側で <code>echom 'hi'</code> が実行されます．</p>

<h2>実例: vim-stacktrace</h2>

<p>実際に vim-go-client を使ってひとつプラグインを書いてみました．</p>

<p><a href="https://github.com/haya14busa/vim-stacktrace">haya14busa/vim-stacktrace</a></p>

<p><img src="https://raw.githubusercontent.com/haya14busa/i/e7ef65e590e850ea37425c6ebf4479c1422ef8c8/vim-stacktrace/stacktracefromhist.gif" alt="stacktracefromhist.gif (1287×800)" /></p>

<p>Vim のスタックトレースをquickfix に流し込むプラグインでやっていることとしては6日目の記事の <a href="http://qiita.com/tmsanrinsha/items/0787352360997c387e84">Vim scriptのエラーメッセージをパースしてquickfixに表示する - Qiita</a>
と近いです．</p>

<p>autoload 関数からjobに <code>ch_evalexpr</code>
する部分([link]<a href="https://github.com/haya14busa/vim-stacktrace/blob/933f9d10c7ef99467c27609fcdd80be37c0712e8/autoload/stacktrace.vim#L12-L30">https://github.com/haya14busa/vim-stacktrace/blob/933f9d10c7ef99467c27609fcdd80be37c0712e8/autoload/stacktrace.vim#L12-L30</a>())
を除いてほぼ全てがGoで実装されていて，現時点で Go の割合が 87.8 % です．</p>

<p><img src="https://cloud.githubusercontent.com/assets/3797062/21386073/5e56a5aa-c7b4-11e6-9cac-869cbb8ffe8d.png" alt="image" /></p>

<p>実装の中身としても，Vim のスタックトレースからは関数内における行番号しかとれず，ファイルの行番号が取得できない問題があるのですが，
それをGoで実装したVim script parser (<a href="https://github.com/haya14busa/go-vimlparser">https://github.com/haya14busa/go-vimlparser</a>) を使ってファイルをパースし，行番号を取得することができています．
また，<code>:CStacktraceFromhist</code> などは Vim script の <code>inputlist</code> をGo側から呼んでいてインテラクティブにVimと協調して動作できることも示せました．</p>

<h2>Go で書くよさ</h2>

<p>実際に Vim script でやっているひともいたように，vim-stacktrace は Go
が無いとかけなかったといった類のものではないですが，Goで書くといいことがたくさんありました．</p>

<ul>
<li>型がある安心感</li>
<li>テストが標準に備わっていて書きやすい (go test)</li>
<li>カバレッジも取れる! (go test -coverprofile)</li>
<li>Go のパッケージが使える (go-vimlparser, etc&hellip;)</li>
<li>etc&hellip;</li>
</ul>


<p>カバレッジなどは現在Vim scriptのテスティングフレームワークではサポートされていないし，なかなか実装しようとしてもムズカシそうなのですが，
Goでかけば標準でついてきます．とても便利．</p>

<p>coverall も使えます: <a href="https://coveralls.io/github/haya14busa/vim-stacktrace?branch=master"><img src="https://coveralls.io/repos/github/haya14busa/vim-stacktrace/badge.svg?branch=master" alt="Coverage Status" /></a></p>

<p>逆にPure Vim script と比較して悪いところや注意点があるとすれば</p>

<ul>
<li>vim-go-client がまだ安定してない</li>
<li>channel-commands がエラーをちゃんと返してくれない(エラーがあれば &ldquo;ERROR&rdquo; とだけ返ってくる)</li>
<li>チャンネルの通信で少しだけオーバーヘッドがある</li>
<li>現状vim/neovimに両対応できない</li>
</ul>


<p>といった感じでしょうか．もうちょっとvim-go-client精錬させたいですね&hellip;頑張ります&hellip;</p>

<h2>NeoVim のリモートプラグイン</h2>

<p>neovim 向けには実は <a href="https://github.com/neovim/go-client">neovim/go-client</a> というものが存在し，リモートプラグインをGoで書くことが出来るようです．</p>

<p><a href="http://vimconf.vim-jp.org/2016/">Vimconf 2016</a> で <a href="https://github.com/zchee">zchee</a> さんが発表していた nvim-go はこれが使われています．</p>

<p>スライド該当部分: <a href="http://go-talks.appspot.com/github.com/zchee/talks/vimconf2016.slide#33">http://go-talks.appspot.com/github.com/zchee/talks/vimconf2016.slide#33</a></p>

<p>正直なところ neovim のリモートプラグインの先行アドバンテージ(?)は大きく，vim-go-client と比較してかなり高機能になってます．
理想としては Vim 8 でも neovim でも使えるものをかけるようにしたいのですが， neovimのリモートプラグインが高機能であることや，
msgpack 依存であることからなかなか両方に対応することはムズカシイです&hellip;</p>

<p>うまく抽象化してロジックの部分だけ共通化して，vim8用/neovim用にメッセージのハンドラを管理してうんたん&hellip;みたいなことは出来るかも知れないので，
今後の研究課題という感じですね．あと僕がほとんどneovim使わないので nvim-go の仕様感とか知っている方はお話してくれると嬉しいです．
(Vimconf で zchee さんとその話ができたのは便利だった&hellip;)</p>

<h2>おわりに</h2>

<p>正直まだまだGoで書かれたVim plugin は少なく発展途上ですが，実用的なプラグインを作成することもできたので，可能性を感じます．
Go でかけばマルチプラットフォームに対応できるし，ライブラリがどうとか環境がどうとか気にすることなく動かせるので，Vim との親和性はかなり高いと思っています．</p>

<p>何よりGoはかわいい!書いていて楽しい!</p>

<p>まだまだ発展途上ですが，ぜひ皆さんもGoでVim プラグインを作ってみてください．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年の振り返り. またはプログラミング2年目をVimに捧げるとこうなるという話]]></title>
    <link href="http://haya14busa.com/haya14busa-s-happy-vimming-year-2014/"/>
    <updated>2014-12-30T00:00:00+09:00</updated>
    <id>http://haya14busa.com/haya14busa-s-happy-vimming-year-2014</id>
    <content type="html"><![CDATA[<h2>この記事について</h2>

<p>この記事は <a href="http://qiita.com/advent-calendar/2014/vim">Vim Advent Calendar 2014</a> の30日目かもしれません(または来年, Vim記事集約系のイベントやりたいという気持ちの1つです).</p>

<p>今年の2月に <a href="http://haya14busa.com/vim_driven_learning/">1年間『Vim駆動学習』してきて最高に楽しかったのでオススメしたい - haya14busa</a> というVim歴換算で1年を振り返ったエントリーを書いたのですが, 今回は2014年を振り返ってみたら, やっぱりVim活たのしかったなぁという日記的エントリーです.</p>

<p>また思い返してみると僕がプログラミング始めたのは2年と少し前だったので, 2014年はプログラミング2年目の年でもありました.
この文脈でみると<strong>「プログラミング2年目をVimに捧げるとどうなるか?」</strong> というエントリーとも言えそうです. (※1年目からかなりの割合をVimに捧げていました)</p>

<h2>2014年, 今年のVim活を振り返る</h2>

<p>※Vim活が9割です</p>

<h3>カーソル移動系人気プラグインの vim-easymotion の開発を乗っ取った!</h3>

<div class="github-card" data-github="Lokaltog/vim-easymotion" data-width="400" data-height="153" data-theme="default"></div>


<p><img src="../images/easymotion/20141230_easymotion_contribution_graph.png" alt="20141230_easymotion_contribution_graph" />
<img src="../images/gif/easymotion_on_speed_ex.gif" alt="easymotion_on_speed_ex" /></p>

<ul>
<li><a href="https://github.com/Lokaltog/vim-easymotion">Lokaltog/vim-easymotion</a></li>
<li><a href="https://github.com/haya14busa/vim-easyoperator-phrase">haya14busa/vim-easyoperator-phrase</a></li>
<li><a href="https://github.com/haya14busa/vim-easyoperator-line">haya14busa/vim-easyoperator-line</a></li>
<li>ブログ記事: <a href="http://haya14busa.com/mastering-vim-easymotion/">Vim-EasyMotionでカーソル移動を爆速にして生産性をもっと向上させる - haya14busa</a></li>
<li>執筆時GitHubスター数: 1556</li>
</ul>


<p>これは2013年の後半からforkして活動していて, 今年の2月くらいに起こった出来事なのですでに下記の記事に少し感想を書いています.</p>

<p>-> <a href="http://haya14busa.com/vim_driven_learning/">1年間『Vim駆動学習』してきて最高に楽しかったのでオススメしたい - haya14busa</a></p>

<p>記事執筆現在, GitHub のStar数 1556 で, 開発を引き継いだ時点での Star数は 1000 にちょっと届かない程度でした.
もともとほっといた場合の伸び具合がどれくらいかはわからないですが, 自分が引き継いだ時点で Star数 約1000 のリポジトリが, さらに500強増えたという事実は本当に嬉しいです.
GitHub Star 500+ めでたい.</p>

<p>これだけ 「たくさんのスター数がついている≒たくさんの人に使っていただけている」 プロジェクトを開発 &amp; メンテするというのはなかなかに学ぶことがおおくてとても楽しかったです.
今後はリファクタリング含めもっと便利にしたいなぁと思っているんですが, そう思ってから半年くらい経過しております(すでに十分に便利&amp;安定してきているのでモチベが低い).</p>

<h3>最高の検索体験を提供したい! incsearch.vim つくった</h3>

<div class="github-card" data-github="haya14busa/incsearch.vim" data-width="400" data-height="153" data-theme="default"></div>


<p><img src="../images/gif/incsearch/incremental_regex_building.gif" alt="incremental_regex_building" /></p>

<ul>
<li><a href="https://github.com/haya14busa/incsearch.vim">haya14busa/incsearch.vim</a></li>
<li><a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a></li>
<li>ブログ記事: <a href="http://haya14busa.com/enrich-your-search-experience-with-incsearch-vim/">incsearch.vimでVimの検索体験をリッチにする - haya14busa</a>

<ul>
<li><a href="http://qiita.com/advent-calendar/2014/vim">Vim Advent Calendar 2014</a> の 14日目の記事でもあります</li>
</ul>
</li>
<li>執筆時GitHubスター数: 231</li>
</ul>


<p>今年の前半がvim-easymotionだとしたら, 後半はほとんど incsearch.vim でした.
実はこのプラグインは最初はサクッと気晴らしにつくったぜーというレベルのものだったのですが,
なんだかんだちゃんとしたものにしようという流れになり目一杯頑張りました.</p>

<p>また使用しているライブラリの <a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a>
にもコントリビューションという名のリクエスト丸投げや, 設計についてコメント, ダメダメな Pull Request
を交えながらいろいろ関わらせていただきました.
おしょーさんありがとうございます, 迷惑いっぱいかけてスイマセンッ, これからもよろしくお願いします..!</p>

<p>便利さの9割は vital-over のおかげなのですが, 自分が1から開発してるリポジトリーでスター数3桁を達成してこれもまた非常に嬉しいです. これもめでたい.</p>

<p>GitHubの VimL trending で Repositories &amp; Developers の両方で1位も獲得できました&hellip;! 嬉しさ.</p>

<p><img src="../images/github/github-trending-viml-today-incsearch-2014-10-21%2009:26:33.png" alt="github-trending-viml-today-incsearch" />
<img src="../images/github/github-developer-today-vimL-2014-10-22%2022:51:58.png" alt="github-developer-today-vimL-2014-10-22 22:51:58" /></p>

<h3>VimConf 2014 で発表した</h3>

<ul>
<li><a href="http://vimconf.vim-jp.org/2014/">VimConf 2014</a></li>
<li>皆さんの発表などなど: <a href="http://vimconf.vim-jp.org/2014/reports/">Reports - VimConf 2014</a></li>
<li>ブログ記事: <a href="http://haya14busa.com/vimconf2014/">VimConf2014 で検索とその拡張について発表した - haya14busa</a></li>
<li>スライド: <a href="https://docs.google.com/presentation/d/1ie2VCSt9onXmoY3v_zxJdMjYJSbAelVR-QExdUQK-Tw/pub">/-improved</a></li>
<li>発表動画: <a href="https://www.youtube.com/watch?v=yB1H5V8e1j4&amp;list=PLx8bw5NQypsnuX8NJPRHvURhXqj2NUnGZ&amp;index=12">/-improved #VimConf2014 - YouTube</a></li>
</ul>


<p>VimConf2014 という感極まるVimのカンファレンスが今年も開催されたのですが, そこでLT枠で発表させていただきました.
Vimの便利な検索機能と上述した incsearch.vim の紹介をしました. 発表グダったりもしましたが, よかったという反応をいただけたり, スライドを英語で書いたので英語圏の人にも見てもらって便利さを伝えられたのは良かったです. 英語というより gif をふんだんに活用したので伝わったという説もある.
(<a href="http://usevim.com/2014/11/14/vimconf/">usevim</a>, <a href="http://www.reddit.com/r/vim/comments/2lwrv0/vimconf_2014_reports/">reddit</a> )</p>

<p>ちなみに動画はテンパッて間違ったことも多々言ってるので鵜呑みにしないでください&hellip; この辺慣れるには場数を踏む必要がありそう</p>

<h3>最高の検索体験を提供したい + α!. vim-asterisk 勢いでつくった</h3>

<div class="github-card" data-github="haya14busa/vim-asterisk" data-width="400" data-height="153" data-theme="default"></div>


<p><img src="https://raw.githubusercontent.com/haya14busa/i/master/vim-asterisk/asterisk_z_star.gif" alt="asterisk_z_star" /></p>

<ul>
<li><a href="https://github.com/haya14busa/vim-asterisk">haya14busa/vim-asterisk</a></li>
<li>執筆時GitHubスター数: 34</li>
</ul>


<p>Vim の <code>*</code> ってとても便利なのですが, 自分のユースケースとしては次のマッチにジャンプして欲しくないという不満があったので, そこを解消するために作りました.
<code>*</code> からの <code>gn</code> テキストオブジェクト活用でスムーズに編集できるようになってとても気に入っています.</p>

<p>結構小さいプラグインではあるのですが, 今まで得たVim scriptの知識や経験をたくさん使っていたり, ビジュアルモードにおける <code>*</code> 機能は <a href="https://github.com/thinca/vim-visualstar">thinca/vim-visualstar</a> の部分をお借りしたり, マルチバイトの扱いを<a href="https://github.com/haya14busa/vim-asterisk/pulls?q=is%3Apr+is%3Aclosed">プルリク</a>貰って直したりとなかなかよさ気なものになりました.</p>

<p>実は似たような機能を提供してるプラグインはいくつかあるのですが, どれも不満がまだありました(Vimの検索機能周りの拡張は結構落とし穴が多い).
incsearch.vim の経験などが活きて落とし穴はうまく回避できました. 気になった方は是非使ってみてください.</p>

<h3>vimrc 読書会にいっぱい参加 &amp; 管理のデータ化・自動化 &amp; 統計ページ をつくった</h3>

<ul>
<li><a href="http://vim-jp.org/reading-vimrc/">vimrc読書会</a></li>
<li><a href="http://vim-jp.org/reading-vimrc/stat/#/">vimrc読書会 Stat</a></li>
<li>ブログ記事: <a href="http://haya14busa.com/reading-vimrc-stat/">vimrc読書会Stat作った - haya14busa</a></li>
<li><a href="http://vim-jp.org/reading-vimrc/stat/#/u/haya14busa">たくさん参加してる様子</a></li>
</ul>


<p>確か管理者権限貰ったのは恐らく今年(すこしあやしい&hellip;厳密には去年だったかも&hellip;)で, 参加するだけでなくちょっとずつ運営面でも関わらせていただきました.
Jekyll を覚えて 読書会のデータを yaml でデータ化したり,
そのデータを使って Angularとd3.jsで 読書会の統計ページをつくったり,
データ化によって扱いやすくなったので python や ruby で簡単なスクリプトを作成して更新作業を自動化したりしました.
読書会は毎週やるので更新が一瞬でできるようになって非常に便利になりました. 統計ページのJS, よくない部分多々あるのでそのうち書き直したい.</p>

<p><strong>毎週土曜日23:00からやっているので皆さん参加しましょう!</strong> -> <a href="http://lingr.com/signup?letmein=vim">http://lingr.com/signup?letmein=vim</a></p>

<h3>Vim プラグイン読書会やってた</h3>

<ul>
<li><a href="http://haya14busa.github.io/reading-vimplugin/">Vimプラグイン読書会</a></li>
</ul>


<p>こちらも1ヶ月周期でやっていました. Vim プラグイン開発, 興味ある. という方にオススメです! 一緒に読みましょう.
またvimrc読書会とVim プラグイン読書会での経験が, Vim以外の普段の開発のレビューにも活かされたような気も&hellip;しま&hellip;す(自信なし).</p>

<p>執筆時現在次の日付が更新されてないという少々のグダりを見せていますが, 落ち着いたら必ず更新します!</p>

<h3>Osaka.vim やで</h3>

<ul>
<li><a href="http://osaka-vim.connpass.com/">Osaka.vim - connpass</a></li>
<li>ブログ記事: <a href="http://localhost:4000/osaka-vim-01/">Osaka.vim #1 に行ってきた - haya14busa</a></li>
</ul>


<p><strong>connpass上では運営になっていますが一切の運営をしていません&hellip;!</strong></p>

<p>関西のVim勉強会, 近年ではほとんどなかったので便利. 関西の皆さん参加しましょう.</p>

<h3>Vimで緊急地震速報が見れるの便利では&hellip;? eew.vim つくった</h3>

<ul>
<li><a href="https://github.com/haya14busa/eew.vim">haya14busa/eew.vim</a></li>
<li>Emacs移植: <a href="http://d.hatena.ne.jp/syohex/20140829/1409291511">eew.vimを移植しました - Life is very short</a></li>
<li>Sublime移植: <a href="https://github.com/tgfjt/Sublime-eew">tgfjt/Sublime-eew</a></li>
</ul>


<blockquote class="twitter-tweet" lang="en"><p>総務省の某審議会のエライ人が「家でテレビで録画を見ていた際、緊急地震速報が出なかった。なんとかならないのか」との意見を述べ、プチ衝撃が走っているらしい。ｗｗｗ 確かに、テレビ見てることには変わりないけれど。</p>&mdash; 閑居 (@doatease2313) <a href="https://twitter.com/doatease2313/status/504522127622418434">August 27, 2014</a></blockquote>


<blockquote class="twitter-tweet" data-cards="hidden" lang="en"><p>とりあえずでつくった <a href="https://t.co/hQQuAnnF9M">https://t.co/hQQuAnnF9M</a> RT <a href="https://twitter.com/haya14busa">@haya14busa</a> Vimに緊急地震速報流すの便利なのでは！？！？！？</p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/505004191199162368">August 28, 2014</a></blockquote>


<p>EmacsやSublimeに移植されたりとちょっとだけ話題になった(すこし).</p>

<h3>その他ちっちゃい Vim plugin 達</h3>

<ul>
<li><a href="https://github.com/haya14busa/unite-ghq">haya14busa/unite-ghq</a>

<ul>
<li>uniteでghqできるの便利では&hellip;?と思ってつくって公開したら, そのわずか数時間前に sorah さんが <a href="https://github.com/sorah/unite-ghq">sorah/unite-ghq</a> を公開しており,
しかもこちらのほうが基本的によくできていて「ｱｱｱｯ&hellip;」とリアルで声がでた少し苦い思い出のあるプラグイン. 自分のバージョン使ってるの自分だけだとおもう. でも便利.
既存プラグインの検索は直前まで入念にやりましょうという教訓を得ました. (数日前にやった時点ではなかったので大丈夫だと思ってた)</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/unite-reading-vimrc">haya14busa/unite-reading-vimrc</a>

<ul>
<li>vimrc読書会のログやvimrcのリンクをuniteで絞り込んで開ける. たまに vimrc読書会 の管理とか過去の記録を見るときに便利.</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/endtagcomment.vim">haya14busa/endtagcomment.vim</a>

<ul>
<li>よくvimrcで見かけるhtmlタグにコメントをつけるスクリプトをforkしてプラグイン化しただけ. もともと便利</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/unite-action-vimfiler_lcd">haya14busa/unite-action-vimfiler_lcd</a>

<ul>
<li>vimfilerで<code>lcd</code>してから開くというuniteアクションが欲しかった. 結局つかってないのであまり便利じゃない.</li>
</ul>
</li>
<li><a href="https://github.com/haya14busa/vim-textobj-number">haya14busa/vim-textobj-number</a>

<ul>
<li>数字のテキストオブジェクト. たまに便利. テキストオブジェクト学ぶかぁーという意図も含まれてた気がするけど結局それ以降テキストオブジェクト系プラグインは作成してない. なにかアイデア湧いたら作りたい.</li>
</ul>
</li>
</ul>


<h2>Vim活以外の進捗(残りの1割)</h2>

<ul>
<li>プログラミングのバイトを4月からはじめました(たぶんVim活アピール補正はかかりました. ある意味 Vim script もペイする言語&hellip;?).</li>
<li>それに伴って Scala をやりはじめたんですが視野が広がってとてもよかったし, もっと学んでいきたいです.</li>
<li>JavaScript もそこそこ書いて, Angular.js に触れたりなどしました. underscore.js も便利.</li>
<li>しかし Scala その他 Vim 以外のOSS活動の進捗ﾀﾞﾒです</li>
<li>heroku にPythonで小さいウェッブアプリをつくったのですが, 乗っかってるサービスが終了したので一緒にお亡くなりになってつらい.</li>
</ul>


<h3>勉強会にちょっとずつ参加するようになった</h3>

<ul>
<li><a href="http://scalamatsuri.org/">Enjoy.scala ! 日本最大級の Scala のカンファレンス - ScalaMatsuri</a></li>
<li><a href="http://kansaifp.doorkeeper.jp/events/17206">関西関数型道場 - 第02回 - 関西関数型道場 | Doorkeeper</a></li>
<li><a href="http://fpscala-osaka.connpass.com/">fpscala-osaka - connpass</a></li>
</ul>


<p>Vim 以外の勉強会にも今年はちょっとずつ参加するようになりました(Vimも基本的には今年からですが). しかしこれは進捗でゎなぃな&hellip;</p>

<h2>その他</h2>

<h3>GitHub current streak 365 日達成した</h3>

<blockquote class="twitter-tweet" lang="en"><p>気づいたらGitHubｺﾝﾄﾘﾋﾞｭｯｼｮﾝ Current streak 365日を達成していたっ&#8230;!!! <a href="http://t.co/XMED6OLFUp">pic.twitter.com/XMED6OLFUp</a></p>&mdash; はやぶさ (@haya14busa) <a href="https://twitter.com/haya14busa/status/544899856037208065">December 16, 2014</a></blockquote>


<p>dotfile 1行変更といったものがたくさんあるので全く大したことはしてないのですが, 日によってはそのついでにちゃんとプログラミングするぞっ! というきっかけになるので自分には合ってる継続的進捗管理術でした. 1年継続めでたい.</p>

<h3>2014年 GitHub の Pull Requests / Issues 一覧</h3>

<p><em>追記:</em></p>

<ul>
<li><a href="https://github.com/pulls?q=is%3Apr+author%3Ahaya14busa+created%3A%222014-01-01+..+2015-01-01%22+">2014年に出した Pull Requests 一覧</a></li>
<li><a href="https://github.com/issues?q=is%3Aissue+author%3Ahaya14busa+created%3A%222014-01-01+..+2015-01-01%22+">2014年に開いた Issues 一覧</a></li>
</ul>


<p>PullRequest 8 opens / 83 closed, Issues 53 open / 95 closed ※99% Vimである</p>

<h3>Podcast 聴くようになった</h3>

<p>聴いてるPodcastは</p>

<ul>
<li><a href="http://rebuild.fm/">Rebuild</a></li>
<li><a href="http://mozaic.fm/">mozaic.fm</a></li>
<li><a href="https://itunes.apple.com/jp/podcast/bairingarunyusu-bilingual/id653415937?mt=2">バイリンガルニュース (Bilingual News)</a></li>
<li><a href="http://thechangelog.com/podcast/">The Changelog Podcast</a></li>
<li><a href="https://itunes.apple.com/us/podcast/the-binpress-podcast/id897178291?mt=2">The Binpress Podcast</a></li>
<li>その他適当に気になったもの.</li>
</ul>


<p>という感じです. 例に漏れず(?), Rebuild.fm から聴き始めてめっちゃおもしろいっ! となり, そこから バイリンガルニュース や The Changelog を聴くようになりました.
最近はずっと気になってはいたけど聞いていなかった mozaic.fm を聴くようになって, こちらも Rebuild とは別のベクトルのよさがあって全部聴きました. 技術系(?)英語 podcast の binpress podcast というポッドキャストは, 全部無料でスクリプトがついているという<em>エイゴ・ゼンゼン・キキトレナイ勢</em>としては歓喜のサービスがついていてお気に入りです. おもしろさは回によって違う感じですが, 英語もついでに学ぶかーという方にはオススメです.</p>

<p>リスニング能力高めてもっと英語のポッドキャストを楽しめるようになりたい&hellip;</p>

<h3>英語の記事をコンスタントに読む &amp; 検索するようになった</h3>

<ul>
<li><a href="http://www.reddit.com/r/vim/">reddit.com/r/vim</a></li>
<li><a href="https://news.ycombinator.com/">Hacker News</a></li>
<li><a href="https://medium.com/">Medium</a></li>
<li><a href="http://getprismatic.com/home">Prismatic</a></li>
</ul>


<p>1年目も別に避けたりはしてなかったのですが, 最近は能動的に英語の情報に触れようとする確率が高くなったかなと思います.
検索や話題になっている記事を除けば, 見ているのはだいたい上記のリンクです.
ただ単に読んでるだけではなかなか得るものも少ないので, 自分から英語で発信する能力をつけたいなーというのが最近の悩みです.
現状 GitHub の issue のやりとりやプラグインのドキュメントは基本英語を使ってるのですが, もっともっと使っていかないとなかなか身につかないですねー.</p>

<h2>来年の抱負とか</h2>

<ul>
<li>Vim もっと頑張る.</li>
<li>Vim のソースコード側も C言語ちょっとぐらい読み書きできるようになって簡単なバグくらいなら報告だけでなく修正案まで出せるようにしたい.</li>
<li>Vim 以外も頑張る. なにか小さなウェッブサービスとか適当につくったりしたい.</li>
<li>Scala力をより深めるのに加えて C, Go, Haskell あたりの言語を触って学んでいきたいという思いがある.</li>
<li>データベース周りとか, 今触ってるレイヤーと別の部分も触っていきたい. 最低限基礎力が欲しい.</li>
<li>英語力をつけていきたい. Vim について英語で適当に英語用Twitterアカウントつくってつぶやくとかなら継続してできるのでは&hellip;?という考えがある.
欲を言えば Lingr の Vim 部屋のノリで英語でチャットとかできれば一番いいんじゃないかという思いがある. IRC に #vim チャンネルあるらしいけど, IRCよくわからない&hellip;ログ読みたい&hellip;</li>
<li>人生は厳しいので人生についてちゃんと考える必要がある. 人生キビシイ.</li>
</ul>


<h2>「プログラミング2年目をVimに捧げるとどうなるか?」</h2>

<p>少々Vim以外の進捗が少なすぎる気がするのは反省ですが, Vim活によってVimというコンテキストに留まらず, たくさんの貴重な経験ができました.
git や GitHub, テスト, CI, オブジェクト指向やらクロージャ, 変数や関数の名前の付け方, 英語での技術系コミュニケーションなどなど, たくさんのことを Vim駆動で理解したり, 理解を深めた1年間だったと思います.</p>

<p>Vim駆動学習, よさがあるのでオススメです. ※ただし用法用量を守って正しく Vim 活しないと Vim 以外の進捗が遅れます. 反省&hellip;</p>

<p>また Vim だといろいろな言語を使ってる人がいて, しかも雲の上のような存在の人もたくさんいたり, オンラインでもオフラインの勉強会でも活動が活発なのでVim以外にもいろんなことが知れるし, プログラミング初学者でも最初から Vim をガンガン使ってプログラミングしていくのはおもしろいかなぁと思います.</p>

<p>振り返ってみるとたくさんのVimmerにお世話になったなぁと思います. ※もちろんVimmerでないひとにもお世話になりました.</p>

<p>みなさん今年はお世話になりました. 来年の2015年もぜひ仲良くしてください. よろしくお願いします.</p>

<p>以上, <a href="https://twitter.com/haya14busa">@haya14busa</a> の 2年目の<del>プログラミング</del> Vim活記録でした.</p>

<script src="http://lab.lepture.com/github-cards/widget.js"></script>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
</feed>
