<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | haya14busa]]></title>
  <link href="http://haya14busa.com/categories/vim/atom.xml" rel="self"/>
  <link href="http://haya14busa.com/"/>
  <updated>2014-06-30T22:10:40+09:00</updated>
  <id>http://haya14busa.com/</id>
  <author>
    <name><![CDATA[haya14busa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Osaka.vim #1 に行ってきた]]></title>
    <link href="http://haya14busa.com/osaka-vim-01/"/>
    <updated>2014-06-30T19:09:21+09:00</updated>
    <id>http://haya14busa.com/osaka-vim-01</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://osaka-vim.connpass.com/event/6491/">Osaka.vim #1 - connpass</a></li>
<li><a href="https://github.com/iyuuya/OsakaVim/wiki/OsakaVim%231">Osaka.vim#1</a></li>
</ul>


<p>6/28(土)に開催されたOsaka.vim #1に行ってきました。 待ちに待った関西圏の Vim 勉強会!</p>

<h2>関西圏のVim勉強会!</h2>

<p>過去を遡るといくつか関西でのvim勉強会が開催されていたようなのですが、いづれも現在まで続いているものはなく、最近ではめっきりなくなっていました。 関東その他のVimの勉強会は結構な頻度で開催されており、しかもどれも楽しそう。 関西Emacsはあるのに関西Vimない!ﾅﾝﾃﾞ!</p>

<p>他の地域でのVim勉強会を見るたびに羨ましさの涙でvimrcを濡らしていたところ、やっと機会が回ってきました。</p>

<h4>2014/04/05</h4>

<blockquote><p>haya14busa: kansai.vim . &ldquo;#x09&rdquo; &ldquo; 関西Vim</p>

<p>manga_osyo: やると聞いて
              haya14busa.vim</p>

<p>&ndash; <cite><a href="http://lingr.com/room/vim/archives/2014/04/05#message-18727221">vim-users.jp – Lingr</a></p></blockquote>

<p>欲しいと思っている様子(口だけ)。そして時は流れて1ヶ月後</p>

<h4>2014/05/17</h4>

<blockquote><p>iyuuya: 大阪でもxxx.vimって無いんですかね
          iyuuya.vimやってもいいんですけどねー</p>

<p>&ndash; <cite><a href="http://lingr.com/room/vim/archives/2014/05/17#message-19050010">vim-users.jp – Lingr</a></p></blockquote>

<p><strong>やりたい!!!</strong></p>

<p>やっと開催の流れが現実味を帯びてきました。というか<a href="https://twitter.com/iyuuya">@iyuuya</a>さんが現実味を帯びせてくれました。非常に便利。
一応、「一緒に開催しましょー」と<a href="https://twitter.com/iyuuya">@iyuuya</a>さんに言っていただいたのですが、ここから開催日を決めて開催場所を決め、告知etc&hellip;
という流れまで <del>一緒に決め&hellip;</del> <a href="https://twitter.com/iyuuya">@iyuuya</a>さんがほとんどすべてやってくれ、とうとう<strong>Osaka.vim</strong>の開催が決定しました!</p>

<pre><code class="vim">for _ in range(100)
  @iyuuya++
endfor
</code></pre>

<p><a href="https://twitter.com/iyuuya">@iyuuya</a>さん本当にありがとうございました &amp; おつかれさまです。</p>

<h2>Osaka.vim #1</h2>

<p>待ちにまったOsaka.vim、 非常に楽しかったです。</p>

<h3>@thinca さんによるライブコーディング</h3>

<p>最初は <a href="https://twitter.com/thinca">@thinca</a> によるライブコーディングでした。
個人的にスクリーンキャストとか実際に操作している画面を見るのはとても好きなのですが、ライブコーディングとして生でコード書いているのを見るのは初めてで、より面白かったです。</p>

<p>Vimから一切出ずに操作していたり、<code>CursorHold</code>で <code>cursorline</code> を設定するなどといった便利tipsが得られたりなど、
さすがthincaさんというべきか見ているだけでとてもおもしろかったのですが、周りの怖いVimmerたちがそこはこうじゃないか,などなど
デバッグ手伝ったり、果ては Lingrのvim部屋 にいた Shougo さんにリアルタイムでuniteを修正をしてもらうなど、
これがソーシャルコーディングか&hellip;!と驚きの連続でした。</p>

<ul>
<li>作成されたプラグイン: <a href="https://github.com/thinca/vim-quickmemo">thinca/vim-quickmemo</a></li>
<li>uniteの修正の様子: <a href="https://github.com/Shougo/unite.vim/commit/94a29bc73d91f6a7847bc22cb4d37a3f482f9ec9">https://github.com/Shougo/unite.vim/commit/94a29bc73d91f6a7847bc22cb4d37a3f482f9ec9</a></li>
</ul>


<p>まさかの <strong>1時間半</strong> にも渡るライブコーディングでしたが見ていて飽きず、面白かったです。thincaさんお疲れ様でした。</p>

<h3>フリータイム</h3>

<p>もくもく回となるかと思いきや,思った以上に交流会でﾜｲﾜｲという感じで非常に面白かったです。 <em>#進捗なんてなかった</em></p>

<p>vimのキーマップの話をしたり、vi過激派の設定を聞いて狂気を感じたり、何故かAtomしてる人がいたり、T-code という完全に人類には早すぎる入力メソッドの紹介などがあってとても楽しめました。</p>

<p><a href="https://twitter.com/itchyny">@itchyny</a> の <a href="https://github.com/itchyny/miv">itchyny/miv</a> というコマンドベースのHaskell製Vimプラグインマネージャの話が面白くて、ここでも来てよかったなぁと思いました。</p>

<p><code>miv</code>の存在は知っていたけど本当に知っていただけで全然試したこともなかったのですが、
聞いてみると興味をそそられました。
<code>NeoBundleLazy</code> は遅延ロード用の指定したコマンドなどを動的に設定しているけど、
いやそこは事前に生成できるし、そうすればもっと速くなるので<code>miv</code>はそうしてるなどといった利点の説明や、
コマンドラインベースなのでシェルからプラグイン一覧を簡単に出したり、それぞれに<code>git gc</code>したりなどといった
使い方がとても良さそうでした。</p>

<p>ネックなところがあるとすれば個人的には<code>yaml</code>にVim scriptを書くところがやはり気になるのですが、試してみたいと思いました。</p>

<blockquote><p><strong>既存のものに不満を持ちましょう</strong></p></blockquote>

<p>とitchynyさんが最後に締めくくったのが個人的には結構ささりました。
<del>今のところ<code>NeoBundleLazy</code>に不満がなかったとか言えない&hellip;</del></p>

<p>割と大きいプラグインになると少々不満を持ってもだいたい無意識のうちにデカくて改善するのも大変そう, そもそもそんな大きいプロジェクトを改善するプログラミング力足りてなさそう&hellip;などと考えて、振り返ればそうやって妥協してるところが多々あるなぁということを再確認しました。</p>

<p>ぼくの一番大きいVim活プロジェクトとしては、やっぱりEasyMotionになってしまうのですが、
この <a href="http://haya14busa.com/mastering-vim-easymotion/">EasyMotionの開発を<del>乗っ取った</del>引き継いだ</a>という話は
それこそ、それまでのEasyMotionに不満があって、より改善したい!という思いからゴリ押しで進めたところがあって、
周りのVimmerたちに助けを求めながらもある程度の成果を出すことができました。</p>

<p>そもそもの <code>NeoBundle</code> もおそらく <code>Pathogen</code>や <code>Bundle</code>といった既存マネージャに満足できない、不満があったから <code>NeoBundle</code>が作られたのだと思います(当時の話は知りませんが)。</p>

<p>やはりこういう「不満」を持って、大きいプロジェクトでも妥協せずに取り組んで行くというのは、1つのあるべき姿だなぁと改めて感じました。</p>

<p>がんばりたい</p>

<h3>発表した</h3>

<ul>
<li>Slide資料: <a href="http://haya14busa.github.io/slide/2014-06-28-osaka-vim/">これからはじめるVimプラグイン開発</a></li>
</ul>


<p>そんなこんなで6時までのフリータイムだったのですが、残りだいたい30分。</p>

<p>「フリータイム&hellip;??きっと発表する人いるでしょ&hellip;? 用意出来てない&hellip;ﾔﾊﾞｲ!!!」
と実は朝起きてから2-3時間使ってざっくりスライドを書いたり、前からあったらいいなぁと思っていた
<a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a> を使った簡単なインクリメンタル検索の
拡張プラグインがサクッとプロトタイプが作れてライブコーディングするのにいいんじゃないかなーと考えていたのでした。</p>

<p>他のVimmerたちと話しているのが面白かったとか、他の進捗だそうと思っていたとか、
あんまり用意してないし別にやらなくてもいいかなーとかいろいろ思ってたのですが、
結局一番やろうとしなかった理由は勉強会で発表とか全くやったことないので日和ってたとかいう
ﾀﾞﾒﾀﾞﾒな理由だったので、せっかくスライド作ったしｴｲﾔｰと発表しました。</p>

<p>が、完全に言い出す時間が遅くて時間足りなかった上、そもそも十分に用意できてないのでグダったところもありなかなかつらみがありました&hellip;</p>

<p>こういう勉強会って、別に全員がプラグイン書いてるような怖い方ばかりではなく、結構そのへんはやったことないよーという
かたもたくさんいると思うので、そのあたりの層でこれからVimプラグイン作ってみたいって方向け(いると信じてる)
に簡単なプラグインの構造と、僕がやってて便利だなぁーと思っていたデバッグの仕方を中心に発表しました。</p>

<p>反応はイマイチわからなかった()</p>

<p>その後にvital-overつかったインクリメンタル検索プラグインは、便利そう感はある程度伝わったような気がしたのですが、結局既存のものを見せるだけで終わった感がなきにしもあらず、ほんとにもっと早めに始めとけばよかったと反省しました&hellip;
しかも、thincaさんが言っていたように、完全に作ってしまったものをそのまま書き直すのはライブコーディングっぽくもないので、簡単なプロトタイプにあえて留めて完成度もまだ低かったので出来ているものを見せてもそこまで大したものではなく輪をかけて反省でした。@各位 スイマセンでした</p>

<h2>懇親会&hellip;そしてカラオケオールへ</h2>

<p>その後、懇親会にいって美味しい料理を食べながらﾜｲﾜｲ話したりしてとても満足でした。
アルコール入ったままカラオケオールは終盤つらくて帰って爆睡しました。若さがたりない。</p>

<p>カラオケ中のvimrc 読書会が終了したあとサイトの更新で自動化できてなくて自分が更新ミスったこともあり、
初めて ruby さわってみて 次に読むvimrcを更新する簡単なスクリプトをrubyで書きました。</p>

<ul>
<li><a href="https://github.com/vim-jp/reading-vimrc/blob/gh-pages/scripts/update_next_vimrc.rb">https://github.com/vim-jp/reading-vimrc/blob/gh-pages/scripts/update_next_vimrc.rb</a></li>
</ul>


<p>更新便利になって満足。</p>

<p>Vim部屋にも関わらず、rubyのインタラクティブシェルのことをlingrで聞いてpryを教えてもらったり、iyuuyaさんに<code>anyenv</code>つかって<code>rbenv</code>でrubyの環境管理するのを教えてもらったり、できたあとにvim部屋で何故かrubyスクリプトのレビューしてもらったりと、なかなかやっていて楽しかったです。教えてくださった各位ありがとうございました!</p>

<p>何気にOsaka.vimで出した目に見える進捗がこのスクリプトくらいでVim scriptは進捗ﾀﾞﾒﾃﾞｼﾀ&hellip;</p>

<h2>次回&hellip;?</h2>

<p>きっと来月か再来月までにはOsaka.vim #2が開催されると思うのでぜひ#1に参加した人も、そうでない人も参加しましょう！</p>

<p>思った以上に京都の学生が多かったのでKyoto.vimもﾜﾝﾁｬﾝあるんじゃないかとかも思うけどどうでしょうね(ﾁﾗｯ</p>

<p>Osaka.vim #1, とっても楽しかったです。お疲れ様でした！</p>

<p><strong><code>:wq Osaka.vim_01</code></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimプラグイン読書会第5回が4/12(土)21:00から開催されます]]></title>
    <link href="http://haya14busa.com/reading-vimplugin-05-senden/"/>
    <updated>2014-04-12T12:57:25+09:00</updated>
    <id>http://haya14busa.com/reading-vimplugin-05-senden</id>
    <content type="html"><![CDATA[<h2>第5回 Vimプラグイン読書会</h2>

<ul>
<li>日時: 2014/04/12 Sat 21:00 -</li>
<li>場所: <a href="http://lingr.com/room/vim">LingrのVim部屋</a></li>
<li>読むプラグイン:

<ul>
<li><a href="https://github.com/vim-jp/vital.vim">vim-jp/vital.vim</a></li>
</ul>
</li>
<li>目的: Vim scriptでリスト、文字列、辞書の効率的かつ汎用的な扱い方を学ぶ</li>
</ul>


<p><strong>!!!本日(4/12)の21:00から開催です!!!</strong> <del>また宣伝記事が当日になってしまった&hellip;</del></p>

<p><strong>初心者でも歓迎ですよ</strong></p>

<p><a href="https://github.com/vim-jp/vital.vim/issues/80">昔開催されたvital.vim読書会</a>では、<code>Data.String</code>を読んだらしいので、今回は<code>Data.List</code>と<code>Data.Dictionary</code>のどちらか1つ,または両方を読むと思います。</p>

<h2>読みどころ</h2>

<p><a href="https://github.com/vim-jp/vital.vim">vital.vim</a>は主にvim-jpのVim script超詳しいマンのかっくいい方々が開発している Vim プラグインのためのライブラリです。これまでVimプラグイン読書会で読んだプラグインは何かしらVimの機能自体を拡張していたのに対し、vital.vimはあくまでも<em>ライブラリ</em>であり、Vim scriptによる汎用的かつ効率的なリストやディクショナリなどなどの操作の仕方を学べるので、「まだVim独自の仕様とかよくわからない&hellip;」という方にとっても読みやすくてよいかもしれません。Vim scriptまだ良くわからないという方も含め、ぜひぜひ気軽に参加してください!</p>

<p>また、vital.vimでなにが出来るのかも外から見ただけではイマイチよくわからなかったりするので、どういう関数が提供されていて、どういう仕様なのかなぁーとさらっと見ていくだけでも面白いんじゃないかと思います。</p>

<h2>vitalの使い方サンプル</h2>

<p>インストールした後適当なスクラッチバッファでQuickrunとかして動作確認しながら読むとよいかもしれない(かも)。vimrcに書いて自作vimrc関数で使ってもOKです。</p>

<pre><code>NeoBundle 'vim-jp/vital.vim'

" vital.vimを単体で使う場合は`vital#of('vital')`
" プラグインに組み込む場合は引数の'vital'の代わりにプラグインの名前(Vitalize --name で指定した値)
let s:V = vital#of('vital')

" vitalのData.Listをimportする。
" 基本的に s:List.&lt;utility_function&gt;(arguments) という使い方をする
" :h vital-data-list.txt
let s:List = s:V.import('Data.List')

echo '= flatten =========='

" リストをフラットに
echo s:List.flatten([[1],[2,[3,4]]])
" -&gt; [1,2,3,4]

echo '= push &amp; pop ======='

" スタックスタック
let s = []
echo s:List.push(s, 1)
" [1]
echo s:List.push(s, 2)
" [1, 2]
echo s:List.push(s, 3)
" [1, 2, 3]
echo s
" [1, 2, 3]
echo s:List.pop(s)
" 3
echo s:List.pop(s)
" 2
echo s
" [1]

echo '= uniq ============='

" ユニークな値だけを残す。最近vim本体にも組み込まれたはずだけど仕様は異なる
echo s:List.uniq(['vim', 'emacs', 'vim', 'vim'])
" ['vim', 'emacs']

" 条件つけたりも
echo s:List.uniq_by(
\ ['vim', 'Vim', 'VIM', 'emacs', 'Emacs', 'EMACS', 'gVim', 'GVIM'],
\ 'tolower(v:val)')
" ['vim', 'emacs', 'gVim']

echo '= zip =============='

" Vim girlイラスト、zipでください
echo s:List.zip([1, 2, 3], [4, 5, 6])
" [[1, 4], [2, 5], [3, 6]]
echo s:List.zip([1, 2, 3], [4, 5, 6], [7, 8, 9])
" [[1, 4, 7], [2, 5, 8], [3, 6, 9]]

" etc...
</code></pre>

<p>Vimプラグインに組み込む方法の詳しい日本語記事とか意外と無いし、アップデートは<code>Vitalize .</code>だけでOKとかはhelpにも書いていないような気がするのでそのうち記事を誰かが書いてくれるはず。</p>

<p>僕はまだvital自体をそんなに使ってないですが、<a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a>というvitalの外部モジュール機能を使った<code>vim-over</code>のライブラリを使わせてもらったりしてます。vitalとても便利なのでｵｽｽﾒです。</p>

<h2>過去のVim Advent Calendar の vital に関する記事</h2>

<ul>
<li><a href="http://qiita.com/rbtnn/items/deb569ebc94d5172a5e5">vital.vimをどんどん使っていこう。 - Qiita</a></li>
<li><a href="http://vim-users.jp/2013/03/vim-advent-calendar-2012-ujihisa-6/">vitalのData.List.take_whileを例にvital開発の指南書</a></li>
<li><a href="http://vim-users.jp/2013/03/vim-advent-calendar-2012-ujihisa-8/">構文解析器kp19ppと字句解析器Vital.Lexerを用いた超簡単な処理系作成方法</a></li>
<li><a href="https://gist.github.com/ujihisa/5761509">Vital.ProcessManagerとその無限の可能性について</a></li>
<li><a href="http://rhysd.hatenablog.com/entry/2013/11/08/224821">コマンドオプションを解析するライブラリ Vital.OptionParser を書いた - sorry, uninuplemented:</a></li>
</ul>


<p>適当にVACで検索しただけだったりする。<code>OptionParser</code>とか使ってみたいかも。</p>

<h2>本日21:00開催のVimプラグイン読書会に参加しよう!!!</h2>

<p>と、言うことでVimプラグイン読書会に参加してvitalを読んで実際に使ってみたり、バグとか改善点を見つけ本体にｺﾝﾄﾘﾋﾞｭｯｼｮﾝしたりしましょう！初心者でも歓迎ですし質問すれば詳しい方が解説してくれるはずです。「hi」と発言して読んでることを宣言してもらえるだけでも少なくとも僕は喜びます。 <del>人数少なすぎると読書会の存続自体が危うくなるのでhiだけでも便利</del></p>

<p>本日21:00から、<a href="http://lingr.com/room/vim">LingrのVim部屋</a>で開催です！ぜひ参加してください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[かゆいところに手が届く、vim-submodeでxの挙動をカイゼンする]]></title>
    <link href="http://haya14busa.com/improve-x-with-vim-submode/"/>
    <updated>2014-03-24T09:10:46+09:00</updated>
    <id>http://haya14busa.com/improve-x-with-vim-submode</id>
    <content type="html"><![CDATA[<h2>Vim Advent Calendarです</h2>

<p>この記事は<a href="http://atnd.org/events/45072">Vim Advent Calendar 2013 : ATND</a>の 108 日目の記事になります。日付がおかしいとか細かいことは気にしてはいけません。Vim Advent CalendarはVim記事を書きたいという人がいるかぎり続きます。しかしいったい、いつまで続くんでしょう&hellip;気になります!</p>

<p>Vimに関することであれば基本的に何を書いてもよいはずなので、興味がある方は気軽に書いてみるとよいのではないでしょうか。</p>

<h2>vim-submodeで x の挙動をカイゼンする</h2>

<p><a href="https://github.com/kana/vim-submode">kana/vim-submode</a></p>

<p>Lingrで発言したときに若干反応があったのでVAC Tipsとして簡単なものですが紹介します。</p>

<p>Vimデフォルトの<code>x</code>はカーソル下の文字を消すという機能です。</p>

<p><code>x</code>の挙動のちょっとした不満点として1文字消すためだけにレジスタを汚してしまうというものがあり、それをカイゼンするために<code>nnoremap x "_x</code>を設定しているvimrcをたまに見かけます。</p>

<p>しかし、よくみるレジスタの問題の他にも不満点がありました。それは<code>x</code>後の<strong><code>u</code>ndo</strong>の挙動です。</p>

<p><code>x</code>で1文字消すごとにundo履歴が区切られてしまい、いざ<code>x</code>を連打した後に間違っていると判明して、<code>u</code>ndoしたい!と思っても、<code>x</code>を押した分だけ何回も何回も<code>u</code>を押さなくてはいけません。</p>

<p>連続した<code>x</code>で一気に消した分は、1回のundoで戻せたら素敵じゃないでしょうか?</p>

<p>そんな機能を実現できる、かゆいところに手が届くプラグインが<a href="https://github.com/kana/vim-submode">vim-submode</a>です。</p>

<h3>コード</h3>

<pre><code class="vim">NeoBundle 'kana/vim-submode'
function! s:my_x()
    undojoin
    normal! "_x
endfunction
nnoremap &lt;silent&gt; &lt;Plug&gt;(my-x) :&lt;C-u&gt;call &lt;SID&gt;my_x()&lt;CR&gt;
call submode#enter_with('my_x', 'n', '', 'x', '"_x')
call submode#map('my_x', 'n', 'r', 'x', '&lt;Plug&gt;(my-x)')
</code></pre>

<p>簡単に解説すると、最初に<code>x</code>を押した時に<code>"_x</code>でブラックホールレジスタに放り込んで1文字消すと同時に<code>my_x</code>という<code>submode</code>に入るようにし、この<code>my_x</code>という<code>submode</code>下での<code>x</code>は事前に定義した<code>&lt;Plug&gt;(my-x)</code>を呼んで、<a href="http://vim-jp.org/vimdoc-ja/undo.html#%3Aundojoin">undojoin</a>を使用することによりundo履歴を1つにまとめています。</p>

<blockquote><p>:undoj[oin] 以降の変更を直前の undo ブロックにつなげる。</p>

<p>&ndash; <cite><a href="http://vim-jp.org/vimdoc-ja/undo.html">Vim documentation: undo</a></p></blockquote>

<h3>欠点</h3>

<p><code>x</code>連打してここまで消したい！というときに1〜2カラム分行きすぎてしまったなどといった場合、<code>u</code>ndoすると初めから全部戻ってしまいます。一長一短ですね&hellip;</p>

<p>しかし、undo履歴が汚れ無いようになるし、結構気に入っています。ﾋﾟﾝと来た方は使ってみてはいかがでしょうか?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim-EasyMotionでカーソル移動を爆速にして生産性をもっと向上させる]]></title>
    <link href="http://haya14busa.com/mastering-vim-easymotion/"/>
    <updated>2014-03-23T21:34:54+09:00</updated>
    <id>http://haya14busa.com/mastering-vim-easymotion</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://atnd.org/events/45072">Vim Advent Calendar 2013 : ATND</a>の 113 日目の記事になります。</p>

<p>また『EasyMotionか!』と思う方も中にはいるかもしれませんが、実は誕生日VACだったりするので許してください。 <em>Happy Vimming to me</em>.</p>

<h2>カーソル移動がエディット時間の80%を占める</h2>

<p>Vimでエディットしている時間の中で、カーソル移動の割合は恐らく80%以上を占めてます[当社比][要出典]</p>

<p>何をするにしても基本的にはカーソルを移動させ、それからVimの強力な<code>operator</code>や<code>textobject</code>を駆使してテキストをエディットしたり、<code>Insert</code>モードに入って文字を入力するでしょう。また<code>tag</code>ジャンプや、<code>*</code>,<code>#</code>などでカーソル下の単語を検索して移動するために、そこまでカーソルを移動させるという『カーソル移動のためのカーソル移動』をするケースだってあります。</p>

<p>多くのVimmerは方向キーの代わりにホームポジションにある<code>hjkl</code>でカーソル移動をすることによって無駄な手の移動をなくし、スムーズなカーソルを実現することによって生産性を高めることからはじまります。</p>

<p>しかし、すべての移動を<code>hjkl</code>で行うには数字キーのカウントで一気に行えるということを差し引いても非常に無駄が多く、<strong><code>hjkl</code>の先</strong>のモーションを覚える必要があります。</p>

<ul>
<li><code>w</code>,<code>b</code>といった<code>Word</code>単位での移動</li>
<li><code>f</code>,<code>F</code>を使った行内の文字を<code>Find</code>する移動</li>
<li><code>)</code>,<code>(</code>の文単位の移動や,<code>}</code>,<code>{</code>のパラグラフ単位の移動</li>
<li><code>/</code>,<code>?</code>,<code>*</code>,<code>#</code>を使った検索による移動</li>
<li><code>H</code>,<code>M</code>,<code>L</code>による画面内移動</li>
<li><code>&lt;C-o&gt;</code>,<code>&lt;C-i&gt;</code>,<code>gi</code>,<code>g;</code>,<code>[(</code>, etc&hellip;といった特殊なJumpモーション</li>
<li><code>vimgrep</code>や外部の<code>grep</code>機能を使った<code>grep</code>によるファイルを横断する移動</li>
<li>etc&hellip; 詳しくは<a href="http://vim-jp.org/vimdoc-ja/motion.html#motion.txt">:h motion.txt</a></li>
</ul>


<p>また、単純な移動ではなく<code>operator</code>と組み合わせることによって真価を発揮する<code>textobject</code>もモーションの一種で、一部のJumpや上記したgrepによる移動などを除いた多くの<code>Motion</code>は<code>d</code>elete,<code>y</code>ank,<code>c</code>hangeといった<code>Operator</code>と組み合わせることができ、<code>Motion</code>は単純に移動だけを補助する仕組みにとどまらない、非常に重要な概念です。</p>

<p>しかし、これらモーションの種類はあまりにも多くて適切に使い分けるのが難しかったり、これだけあってもかゆいところに手が届かなかったりします。</p>

<p>そこで、そのモーション機能に一石を投じるプラグインの1つが<strong><a href="https://github.com/Lokaltog/vim-easymotion">vim-easymotion</a></strong>です</p>

<h2>Vim Motions on Speed!</h2>

<p><a href="https://github.com/Lokaltog/vim-easymotion">Lokaltog/vim-easymotion</a></p>

<p><img src="../images/gif/easymotion_on_speed_ex.gif" alt="easymotion_on_speed_ex" /></p>

<h3>How to Install</h3>

<pre><code>NeoBundle 'Lokaltog/vim-easymotion'
</code></pre>

<p>EasyMotionは主に<em>スクリーン内の見えている範囲の移動</em>において<strong>最小</strong>のキーストロークで<strong>爆速</strong>にカーソルを移動させることを目指したカーソル移動系プラグインです。</p>

<h3>TL;DR</h3>

<p>主観で1つだけイチオシ機能を紹介するなら</p>

<p><code>nmap s &lt;Plug&gt;(easymotion-s2)</code>によって<code>s{char}{char}{label}</code>のわずか<strong>4</strong>キーストロークで画面内のどこへでも<strong>素早く</strong>移動できる</p>

<p>という機能です。詳しくは下記で説明しますが、個人的にはこれが現在一番はやく、スムーズに移動できる汎用的な手段だと思っています。</p>

<h3>EasyMotionのついて</h3>

<p>もともとは<a href="https://github.com/Lokaltog/">Lokaltog</a>氏が開発していたのですが、本人がEmacsに移行するなど長らく開発が止まっており、せっかくコンセプトがよいのに惜しいところがたくさんありました。</p>

<p>そこで僕がforkして活動量のゴリ押しで改善,開発していたところ、コラボレータとして開発を引き継がないか？と提案され、現在は僕がメインで開発を行っています。</p>

<p>実は<a href="http://haya14busa.com/vim-lazymotion-on-speed/">VAC2012の記事</a>でもEasyMotionについて紹介したのですが、その時点ではfork状態で、開発もまだまだ途中だったので、晴れて開発を引き継いで安定もしてきた今、もう一度前回の記事以降に追加された機能などをメインに紹介します。</p>

<p>ということで、ある程度基本のコンセプトは知っているという前提でここから書いていきます。が、知らなくてもgifや<a href="https://github.com/Lokaltog/vim-easymotion">README</a>を軽くみればなんとなくわかっていただけるかなぁとも思います。EasyMotion,オススメですよ!</p>

<h2>Now, EasyMotion is Completely Well-behaved</h2>

<p>EasyMotionは前回紹介させていただいた時点では<code>&lt;Plug&gt;</code>マッピングすらちゃんと提供できていなかったり、いろいろな制約上好ましくない挙動を示していたりもしたのですが、<code>&lt;Plug&gt;</code>マッピングの提供やバグフィックスなどなどを行って、晴れて<em>お行儀の良い</em>プラグインになったと思います。</p>

<p>確かに、後方互換性のためにデフォルトのキーバインドは設定されるという点はありますが、<code>let g:EasyMotion_do_mapping = 0</code>とすることで回避できます。</p>

<p>『お行儀のいい』なんて当たり前のようなことですが、これはプラグインにとっては重要なことですし、<code>normal</code>,<code>visual</code>,<code>operator-pending</code> modeのすべてのモードで正しく動作し、<a href="https://github.com/tpope/vim-repeat">tpope/vim-repeat</a>を追加でインストールすれば<code>.</code>によるドットリピートも有効にするなどと、地味に苦労はしました&hellip;</p>

<h2>Now, EasyMotion is Completely Configurable</h2>

<p><code>&lt;Plug&gt;</code>マッピングによって、デフォルトで紹介されている機能に加えて様々なモーションを提供しており、自分好みの機能を選択して快適に使うことができます。</p>

<p>こう聞くと機能追加しすぎて遅くなってるんじゃ..みたいなことも考えられますが、ほとんどはコードを加えたというよりも引数などオプションで挙動を変えただけなので、機能追加を目指して肥大化しているということは(おそらく)ないです。逆にハイライト周りの速度改善を行ったりなどしたのでそのへんはここで明記しておきます。</p>

<p><code>nmap</code>,<code>omap</code>,<code>xmap</code>などで柔軟にマップできるのは勿論、画面の背景を灰色にする<code>shade</code>オプションなど、たいていの機能は<code>Configurable</code>、柔軟に設定可能になりました。</p>

<p>例えば新たに追加された機能として<code>Within Line Motion</code>という、ターゲットの対象をカーソル行だけに絞ったモーションがあります。</p>

<p>一見対象を絞るなんてバカげているアイデアのようにも思えますが、EasyMotionはターゲットが1つしかない場合はラベルを選択するフェーズを飛ばして自動的にジャンプしてくれるので以下のような設定をすると便利になったりします。</p>

<pre><code class="vim">map f &lt;Plug&gt;(easymotion-fl)
map t &lt;Plug&gt;(easymotion-tl)
map F &lt;Plug&gt;(easymotion-Fl)
map T &lt;Plug&gt;(easymotion-Tl)
</code></pre>

<p>これだと、例えば<code>df{char}</code>とした時にカーソル行に<code>{char}</code>が1つであればVimデフォルトの<code>f</code>の機能、2つ以上あればラベルで選択するという挙動が可能です。対象の<code>{char}</code>が1つしかないというケースは多いですし、逆に2つ以上あった時にはVimデフォルトの<code>f</code>だと数値を正しくカウントすることは面倒だし、1つ目だと思っていたのにその途中に存在していた同じ<code>{char}</code>を見落としていて、思っていた部分まで<code>delete</code>できないなどといったケースを回避することができます。</p>

<p>url内のスラッシュ(<code>/</code>)やLispの<code>()</code>の連続、Vimのautoload関数の<code>#</code>などなどの1行に同じ文字がたくさんあるけど<code>f</code>や<code>t</code>で<code>d</code>や<code>c</code>したい!というケースで特に有用だったりします。</p>

<p>勿論<a href="https://github.com/tpope/vim-repeat">tpope/vim-repeat</a>があれば<code>.</code>リピートも可能です。</p>

<p>また基本的にすべてのモーションは<code>bidirection</code>機能、つまり対象とする範囲を<code>forward</code>/<code>backward</code>の両方向にできるモーションも提供しているので</p>

<pre><code class="vim">map f &lt;Plug&gt;(easymotion-bd-fl)
map t &lt;Plug&gt;(easymotion-bd-tl)
</code></pre>

<p>このようにマップして、<code>F</code>と<code>T</code>の挙動をまかなったり、</p>

<pre><code class="vim">omap &lt;Leader&gt;w &lt;Plug&gt;(easymotion-bd-wl)
omap &lt;Leader&gt;e &lt;Plug&gt;(easymotion-bd-el)
</code></pre>

<p>このようにoperator-pending時だけ指定する、などなど好きなようにマッピングすることができるようになっています。</p>

<h2>Now, EasyMotion is Completely Sophisticated</h2>

<p><a href="http://haya14busa.com/vim-lazymotion-on-speed/">前回</a>から追加された特に便利な機能としては2つあります。</p>

<h3>2-key Find Motion</h3>

<p>1つ目は以前までの<code>&lt;Leader&gt;f{char}</code>(<code>&lt;Plug&gt;(easymotion-f)</code>)のfind motionを拡張した2つ<code>{char}</code>を指定できる機能です。</p>

<p><a href="https://github.com/goldfeld/vim-seek">goldfeld/vim-seek</a>/<a href="https://github.com/justinmk/vim-sneak">justinmk/vim-sneak</a>がデフォルトの<code>f</code>で<code>{char}</code>を2つ指定できるという機能にインスパイアされて実装し、最近はこのモーションが以前まで常用していた<code>s{char}</code>(<code>nmap s &lt;Plug&gt;(easymotion-s)</code>)の<code>{char}</code>が1つのモーションよりも快適で、慣れれば最高のカーソル移動手段になると思います。</p>

<pre><code class="vim">nmap s &lt;Plug&gt;(easymotion-s2)
xmap s &lt;Plug&gt;(easymotion-s2)
" surround.vimと被らないように
omap z &lt;Plug&gt;(easymotion-s2)

"もしくはこんな感じがオススメ
map &lt;Space&gt; &lt;Plug&gt;(easymotion-s2)
</code></pre>

<h3>最小のキーストロークで、スムーズに、素早く移動できる</h3>

<p>最初に述べましたがこれによって<code>s{char}{char}{label}</code>というわずか<strong>4</strong>キーストロークで画面内の(主にmiddleからlong range)の移動をたった<strong>1つ</strong>のキーバインド(<code>s</code>)でまかなうことができます。</p>

<p>以前の<code>s{char}{label}</code>だと、多くのターゲットにマッチしすぎて<code>{label}</code>を2回押す必要があるケースが多々ありました。一度に押すべきラベルを2つ提示する機能を前回までに実装していてある程度楽になっていたとはいえ、<code>{char}</code>は最初から押すべきキーがわかっているのに対し、<code>{label}</code>は基本的に何が出るかわからず『ラベルを視認してから押す』という段階を踏む必要があって押しにくいのです。</p>

<p>今回の2-key find motionであれば、まず押すべきラベルが2つになることはないですし、<code>{char}{char}</code>の部分は最初から押すべきキーがわかっているので素早く押すことが出来ます。</p>

<p>また<code>{char}{char}</code>と2つの組み合わせで指定するので、最初から画面内にマッチするものが1つだけで、ラベルを押さずに一瞬で移動できるということも多々あってよいです。(例: 冒頭で提示したgif画像は<code>fi</code>にマッチするものが1つしかなく、一瞬でジャンプしています。)</p>

<p>単に最小限のキーストロークという観点でいえば<code>&lt;Plug&gt;(easymotion-s)</code>で<code>s{char}{label}</code>という3キーストロークのほうが少ないのですが、平均すると<code>s{char}{char}{label}</code>とした方が全体としては快適に移動できるので、慣れるまで使ってみる価値はあると思います。</p>

<h3>Minimumにこの機能だけつかいたい</h3>

<p>この機能は特にイチオシなので</p>

<pre><code class="vim">NeoBundle 'Lokaltog/vim-easymotion'
let g:EasyMotion_do_mapping = 0 "Disable default mappings
nmap s &lt;Plug&gt;(easymotion-s2)
</code></pre>

<p>というミニマムな構成で使うのもよいと思います。また実際にこのような使い方をしている方も見かけました。</p>

<h3>補足とか。</h3>

<h4><code>s{char}&lt;CR&gt;</code></h4>

<p><code>s{char}&lt;CR&gt;</code>と<code>{char}</code>を1つの状態でエンターキーを押すとそのまま1つの<code>{char}</code>で検索されます。</p>

<h4><code>s&lt;CR&gt;</code></h4>

<p><code>s&lt;CR&gt;</code>と<code>{char}</code>を1つも押さずにエンターキーを押すと、前回の<code>s{char}{char}</code>というモーションをリピートすることができます。便利。</p>

<h4>Jump to first match</h4>

<p>1つ目のマッチに飛びたいというケースが多々あり、その都度ラベルのキーを押すのは面倒です。</p>

<p>そこで下記の設定をするとラベル選択時に<code>&lt;Space&gt;</code>か<code>&lt;CR&gt;</code>を押すことによって最初のマッチに飛ぶことが出来ます。</p>

<pre><code class="vim">" Jump to first match with enter &amp; space
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1
</code></pre>

<p>初めから1つ目のマッチに飛びたいという場合に<code>s{char}{char}&lt;Space&gt;</code>と事前に押すべきキーがわかるので便利です。</p>

<h3>n-key Find Motion</h3>

<p>2つ目の大きな機能としては<code>{char}</code>としてn-keyの任意のキーを指定できるVimデフォルトの検索の拡張とも言えるべき機能です。</p>

<p>設定例:</p>

<pre><code class="vim">" =======================================
" Search Motions
" =======================================
" Extend search motions with vital-over command line interface
" Incremental highlight of all the matches
" Now, you don't need to repetitively press `n` or `N` with EasyMotion feature
" `&lt;Tab&gt;` &amp; `&lt;S-Tab&gt;` to scroll up/down a page of next match
" :h easymotion-command-line
nmap g/ &lt;Plug&gt;(easymotion-sn)
xmap g/ &lt;Plug&gt;(easymotion-sn)
omap g/ &lt;Plug&gt;(easymotion-tn)
" Support mappings feature
EMCommandLineNoreMap &lt;Space&gt; &lt;CR&gt;
EMCommandLineNoreMap ; &lt;CR&gt;
EMCommandLineNoreMap &lt;C-j&gt; &lt;Space&gt;
</code></pre>

<p>冒頭のgifで最後にお見せしたモーションです。Vimデフォルトの<code>incsearch</code>が最初のマッチだけインクリメンタルにハイライトするのに対して、こちらはすべてのマッチをインクリメンタルにハイライトします。また<code>&lt;CR&gt;</code>でEasyMotionの機能が起動されてラベルを選択できるので、<code>n</code>や<code>N</code>などを何回も押して移動するという必要がなくなります。</p>

<p>またこのモーションは対象の範囲を画面内にとどまらずに画面外まで探してくれるので、入力している最中にスクリーン内に対象がなくなればVimデフォルトの<code>/</code>と同じように自動でスクロールしますし、飛びたい目的のマッチが画面内にない場合は<code>&lt;Tab&gt;</code>キーを押すことによってスクロールし、また単に次のページに飛んだのではなく、その先の検索した文字列に最初にマッチするページまで飛んでくれます。逆に前方向にスクロールする場合は<code>&lt;S-Tab&gt;</code>です。</p>

<p>正直、文章だとわかりずらいし、gifを見てもまだわかりずらいかもしれませんが、バッファのテキストを検索して移動する場合、デフォルトの<code>/</code>だと何回も何回も<code>n</code>を押す必要があったりして面倒くさい!というつらみを解消することができます。</p>

<p>このfind motionのコマンドラインインターフェースはおしょーさん作で<a href="https://github.com/osyo-manga/vim-over">osyo-manga/vim-over</a>で使われていたものをvitalのライブラリ,<a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a>として作ってもらい、これを使用させていただいています。おしょーさんいろいろ本当にありがとうございました。</p>

<p>この<a href="https://github.com/osyo-manga/vital-over">osyo-manga/vital-over</a>のコマンドラインのおかげで、Vimデフォルトの履歴やレジスタ挿入といった機能やマッピングといったほとんどの機能が擬似的に実装されており、さらにバッファのテキストの補完(EasyMotionではデフォルトで<code>&lt;C-l&gt;</code>)が使えたりと、デフォルトの<code>/</code>を置き換えれるレベルのものになっていると思います。</p>

<p>この機能と似ている(というかもともと先に実装されていた)<a href="https://github.com/t9md/vim-smalls">t9md/vim-smalls</a>では、<code>&lt;CR&gt;</code>でexcursionモード、<code>;</code>でラベルの表示となっています。</p>

<p>実際に使ってみると<code>;</code>をターゲットとして選択できない代わりに<code>;</code>で起動するのがとても押しやすくて便利なのですが、これもマッピングをつかえばEasyMotionでも可能となります。個人的には<code>&lt;Space&gt;</code>が押しやすくていいし、<code>\s</code>などで代替できるので<code>EMCommandLineNoreMap &lt;Space&gt; &lt;CR&gt;</code>を設定しています。</p>

<pre><code>EMCommandLineNoreMap ; &lt;CR&gt;
EMCommandLineNoreMap &lt;Space&gt; &lt;CR&gt;
</code></pre>

<p>実はこのコマンドラインインターフェースの機能は<code>&lt;Plug&gt;(easymotion-s2)</code>、<code>&lt;Plug&gt;(easymoton-s)</code>といった1文字や2文字のfind motionでも使うように変更しているので、2-key findmotionでのエンター代わりに<code>&lt;Space&gt;</code>をつかうといったことが可能だったりします。</p>

<h2>その他の追加機能</h2>

<h3>Repeat Motion</h3>

<pre><code class="vim">map &lt;Leader&gt;&lt;Leader&gt; &lt;Plug&gt;(easymotion-repeat)
map &lt;C-n&gt; &lt;Plug&gt;(easymotion-next)
map &lt;C-p&gt; &lt;Plug&gt;(easymotion-prev)
" map ; &lt;Plug&gt;(easymotion-next)
" map , &lt;Plug&gt;(easymotion-prev)
</code></pre>

<p><code>&lt;Plug&gt;(easymotion-repeat)</code>で前回のモーションをリピートしたり、<code>&lt;Plug&gt;(easymotion-next)</code>,<code>&lt;Plug&gt;(easymotion-prev)</code>で<code>;</code> &amp; <code>,</code>のように次/前のマッチに飛ぶことができます。</p>

<p>最初にジャンプしたところと似たところにジャンプして<code>.</code>リピートしたいといったケースなどで、最初に移動して編集したあとは<code>&lt;Plug&gt;(easymotion-next)</code>で次のマッチに移動して、<code>.</code>リピート!といったことが出来ます。</p>

<p>またハイライトがカーソル移動などで自動で消えるという実装なので、この挙動が好みならば下記のように設定すればよくある<code>:nohlsearch</code>コマンドでわざわざハイライトを消すという作業をしなくて済むようになります。</p>

<pre><code class="vim">set nohlsearch
map  / &lt;Plug&gt;(easymotion-sn)
omap / &lt;Plug&gt;(easymotion-tn)
map  n &lt;Plug&gt;(easymotion-next)
map  N &lt;Plug&gt;(easymotion-prev)

" いらなくなる
" nmap &lt;silent&gt; &lt;Esc&gt;&lt;Esc&gt; :&lt;C-u&gt;nohlsearch&lt;CR&gt;
</code></pre>

<h3>Migemoの改善</h3>

<pre><code class="vim">let g:EasyMotion_use_migemo = 1
</code></pre>

<p>migemo機能をONにすると結構時間がかかってしまうという欠点があったのですが、画面内にマルチバイト文字がない場合に自動的にOFFにすることにより、普通にコードを書いているときはmigemoの遅さを気にせず使えるようになりました。</p>

<p>また、<code>cmigemo</code>がインストールされていた場合は上述した2-key &amp; n-key find motionでもmigemo機能が有効になります。</p>

<h3>その他いろいろ</h3>

<p><strong>その他いろいろです!!!!!</strong></p>

<h2>他のカーソル移動系プラグインとか素Vimとかと比較</h2>

<ul>
<li><a href="https://github.com/rhysd/clever-f.vim">rhysd/clever-f.vim</a></li>
<li><a href="https://github.com/justinmk/vim-sneak">justinmk/vim-sneak</a> (<a href="https://github.com/goldfeld/vim-seek">goldfeld/vim-seek</a>)</li>
<li><a href="https://github.com/t9md/vim-smalls">t9md/vim-smalls</a></li>
</ul>


<h3>clever-f</h3>

<p><a href="https://github.com/rhysd/clever-f.vim">rhysd/clever-f.vim</a></p>

<p>行を跨いで移動するという機能を<code>f</code>につけ、<code>;</code>の代わりに<code>f</code>でリピートできるので中距離(数行程度)までならclever-fで移動するとスムーズかもしれない。しかし、どちらかといえば<code>;</code>&amp;<code>,</code>マッピングを節約できる、migemoやsmartcaseといった追加機能が美味しいという感じで<code>f</code>に足りない痒いところに手が届く機能を提供しているというところがいいところだと思っている。</p>

<h3>vim-sneak</h3>

<p><a href="https://github.com/justinmk/vim-sneak">justinmk/vim-sneak</a></p>

<p><code>f</code>の機能を拡張して2つ<code>{char}</code>として指定できる。<a href="https://github.com/goldfeld/vim-seek">goldfeld/vim-seek</a>のほうが先に出ていたけどsneakのほうが活発に開発されていて(たぶん) 基本的には上位互換。</p>

<p>sneakは最近clever-f機能を取り込んで、EasyMotionのラベルで意図していないものを押すのが思考の妨げになってどうしても慣れない or 嫌、でもモーション拡張プラグイン使ってみたいという人に一番いいと思います。<code>f</code>と違って対象として2つ<code>{char}</code>を指定すればマッチが格段に減るので<code>s{char}{char}ssss...</code>でスムーズかつラベルの考慮など何も考えずに移動できます。また2 charsだとハイライトしてくれるのも地味に嬉しい。</p>

<p><code>s</code>,<code>S</code>を勝手に書き換えるという挙動以外のつらみがあった実装は最近直ってきているので良いと思います。</p>

<p>ただ、同時に最近は<code>streak</code>モードというEasyMotionライクな機能を実装していて、これは主観とか差し引いてもEasyMotionの下位互換機能、劣化となっているのでこの機能はあまりオススメしません。</p>

<h3>vim-smalls</h3>

<p><a href="https://github.com/t9md/vim-smalls">t9md/vim-smalls</a></p>

<p>もともと任意のキーストロークでEasyMotionライクに移動できるというのはvim-smallsが最初に実装していて、それにインスパイア &amp; 2-keyを実装するなら任意のキーもついでに実装できるという理由でEasyMotionもついでに<code>&lt;Plug&gt;(easymotion-sn)</code>として実装しました。</p>

<p>vim-smallsの売りは良くも悪くもexcursion-modeだと思っているのですが、単に移動するにはToo much感がなきにしもあらず、なんとなく常用にいたらないという印象です。移動先を決めてから<code>delete</code>や<code>yank</code>を出来たりと正直全機能は把握していませんが便利に使える方法もあるとはおもいます。</p>

<p>vim-smallsの劣化になるなぁーと考えて、EasyMotionの検索拡張機能にスクロールなどを追加したりしたのですが、逆に言えばexcursion-modeが画面外も対象に移動できるようになったりすると、もっと便利になる可能性あるなぁと思ったりもします。</p>

<p>上記の3つともEasyMotionを拡張するにあたって多かれ少なかられ参考にさせてもらったりしたので、非常に感謝しています。</p>

<p>しかし、自分のなかで一番なのはEasyMotion,つまりはそのラベルによってキーストロークを最小限にして移動するというコンセプトで、自分の知る限りのバグはfixしてお行儀もよくなり、各種便利機能などを実装した今、EasyMotionがベストだと自分で思ってます。</p>

<p>自分で開発しておいて自分で言うのもなんですが、ベースはLokaltogさんが作ったというリスペクトも含めてやっぱり好きです。そもそもこう思っていなかったらCollaboratorとして開発を引き継ぐまでには至らないし、言うまでもないかもしれないですね。</p>

<h3>素Vim</h3>

<p>おそらく、EasyMotionを使うであろうというケースの移動では<code>set incsearch</code>,<code>set nohlsearch</code>で<code>/</code>,<code>*</code>などを駆使して検索して移動していると勝手に思ってます。&hellip;というか<code>HML</code>とか<code>tag</code>,<code>grep</code>だとか<code>)</code>,<code>]]</code>,<code>}</code>だとか<code>relativenumber</code>などなどそれぞれ使い分けてるというのが正解かな。</p>

<p>検索に関しては<code>n</code>の連打をする必要がなくなったり、検索履歴を汚さないなどいろいろあるのですが、そもそもプラグイン使わないよ派だったり、やはりEasyMotionの長所でもあり欠点でもある<em>ラベル</em>を選択するという事前にわからない不確定の要素で思考を妨げられるのがいやだったりと、やっぱり素Vimだよねというのも良い(というか尊敬しています)ですよね。</p>

<p>EasyMotionを使っていても、徐々にいろんな移動の仕方を覚えて、それらを使い分けていきたいですね。</p>

<h2>まとめたvimrcの設定例</h2>

<p>個人的には</p>

<ul>
<li><code>&lt;Plug&gt;(easymotion-s2)</code> or <code>&lt;Plug&gt;(easymotion-s)</code>のFind motion</li>
<li><code>&lt;Plug&gt;(easymotion-j)</code> &amp; <code>&lt;Plug&gt;(easymotion-k)</code>の行移動を拡張するJK motion</li>
<li>今回紹介した<code>&lt;Plug&gt;(easymotion-sn)</code>機能</li>
</ul>


<p>などが便利で、<code>Word</code>の拡張モーションなんかは使わない人もいるなぁーと思うので主に上記の3点を中心にした設定例を適当なコメントと共に載せておきます。勿論もっとミニマムに設定したり、もっと変態的に設定しまくってもいいんですよっ//</p>

<p>またEasyMotionのデフォルトのprefixキーが<code>&lt;Leader&gt;&lt;Leader&gt;</code>で使いづらいのはLokaltogさんが他のプラグインと競合しないために配慮した過去があるというだけで、デフォルトで使っても絶対面倒です。ぜひインストールしただけで終わらずに、下記の設定を真似するか、少なくとも<code>map &lt;Leader&gt; &lt;Plug&gt;(easymotion-prefix)</code>するなどして使うと使いやすくなります。</p>

<p>そもそも後方互換さえ無ければデフォルトのキーバインドは無くしたいというレベルなのでデフォルトに頼らず好きなものを必要なだけ使ってください。
特殊バッファを使ったアプリケーション的なプラグイン以外は、デフォルトのキーバインドに頼らずに自分で設定するのがベターだと思います。</p>

<p>vimrc
```vim
&ldquo; Vim motions on speed!
NeoBundle &lsquo;Lokaltog/vim-easymotion&rsquo;</p>

<p>&ldquo; =======================================
&rdquo; Boost your productivity with EasyMotion
&ldquo; =======================================
&rdquo; Disable default mappings
&ldquo; If you are true vimmer, you should explicitly map keys by yourself.
&rdquo; Do not rely on default bidings.
let g:EasyMotion_do_mapping = 0</p>

<p>&ldquo; Or map prefix key at least(Default: <Leader><Leader>)
&rdquo; map <Leader> <Plug>(easymotion-prefix)</p>

<p>&ldquo; =======================================
&rdquo; Find Motions
&ldquo; =======================================
&rdquo; Jump to anywhere you want by just <code>4</code> or <code>3</code> key strokes without thinking!
&ldquo; <code>s{char}{char}{target}</code>
nmap s <Plug>(easymotion-s2)
xmap s <Plug>(easymotion-s2)
omap z <Plug>(easymotion-s2)
&rdquo; Of course, you can map to any key you want such as <code>&lt;Space&gt;</code>
&ldquo; map <Space>(easymotion-s2)</p>

<p>&ldquo; Turn on case sensitive feature
let g:EasyMotion_smartcase = 1</p>

<p>&ldquo; =======================================
&rdquo; Line Motions
&ldquo; =======================================
&rdquo; <code>JK</code> Motions: Extend line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
&ldquo; keep cursor column with <code>JK</code> motions
let g:EasyMotion_startofline = 0</p>

<p>&ldquo; =======================================
&rdquo; General Configuration
&ldquo; =======================================
let g:EasyMotion_keys = &lsquo;;HKLYUIOPNM,QWERTASDGZXCVBJF&rsquo;
&rdquo; Show target key with upper case to improve readability
let g:EasyMotion_use_upper = 1
&ldquo; Jump to first match with enter &amp; space
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1</p>

<p>&ldquo; =======================================
&rdquo; Search Motions
&ldquo; =======================================
&rdquo; Extend search motions with vital-over command line interface
&ldquo; Incremental highlight of all the matches
&rdquo; Now, you don&rsquo;t need to repetitively press <code>n</code> or <code>N</code> with EasyMotion feature
&ldquo; <code>&lt;Tab&gt;</code> &amp; <code>&lt;S-Tab&gt;</code> to scroll up/down a page with next match
&rdquo; :h easymotion-command-line
nmap g/ <Plug>(easymotion-sn)
xmap g/ <Plug>(easymotion-sn)
omap g/ <Plug>(easymotion-tn)
```</p>

<h2>最後に</h2>

<p>もっと詳しく知りたい場合はぜひhelpを読んでください。<a href="https://github.com/Lokaltog/vim-easymotion/blob/master/doc/easymotion.txt">:h easymotion.txt</a></p>

<p>普段なにげなく使っているカーソル移動を爆速にして、生産性を向上させましょう!</p>

<p><strong>Boost your productivity with EasyMotion!</strong></p>

<p><del>結局思考が追いつかないし、進捗力ある人 with メモ帳に負ける</del></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimプラグイン読書会第4回が3/15(土)21:00から開催されます]]></title>
    <link href="http://haya14busa.com/reading-vimplugin-04-senden/"/>
    <updated>2014-03-15T00:00:00+09:00</updated>
    <id>http://haya14busa.com/reading-vimplugin-04-senden</id>
    <content type="html"><![CDATA[<h2>第4回Vimプラグイン読書会</h2>

<ul>
<li>日時: 2014/03/15 Sat 21:00 -</li>
<li>場所: <a href="http://lingr.com/room/vim">LingrのVim部屋</a></li>
<li>読むプラグイン:

<ul>
<li><a href="https://github.com/tpope/vim-pathogen">tpope/vim-pathogen</a></li>
</ul>
</li>
<li>目的: プラグインマネージャの仕組みを理解する</li>
</ul>


<p>ぜひ気軽に参加してください。</p>

<h2>pathogen読みます</h2>

<p>かの有名なtpope先生のプラグインです。first commitが5years agoの(たぶん)一番古株のプラグインマネージャで歴史を感じます。(<a href="https://github.com/c9s/Vimana">c9s/Vimana</a>というのもあったらしいですがperlスクリプトで、かつどっちが先かはよくわかりません)</p>

<p>326行1ファイルなので分量的には気軽に読めそうです。(密度は知らない)</p>

<h3>読みどころ</h3>

<p>Vim触り始めの頃からNeoBundleやVundle,pathogenといったプラグインマネージャが存在して、vimのランタイムパスとかほぼ気にせずプラグインを簡単にインストール、管理できた身としてはそのあたりで何やってるかというのは、しばらく全くわかっていませんでした。(そして今もそこまでわかってないかも&#8230;)</p>

<p>と、いうことでruntimepath周りや、「プラグインマネージャって結局何をどうやってるのよ?」みたいなところが１つの読みどころかなぁと思います。</p>

<p>あとは関連して、ファイルやディレクトリのpathの操作などは他の用途でも汎用的に使えそうです。</p>

<h2>pathogenの命名</h2>

<ul>
<li><a href="http://eow.alc.co.jp/search?q=pathogen">pathogenの意味・用例｜英辞郎 on the WEB：アルク</a></li>
<li><a href="http://eow.alc.co.jp/search?q=infect">infectの意味・用例｜英辞郎 on the WEB：アルク</a></li>
<li><a href="http://eow.alc.co.jp/search?q=incubate">incubateの意味・用例｜英辞郎 on the WEB：アルク</a></li>
</ul>


<p>pathogenってどういう意味かなぁと思って調べると、infectやincubateといった関数が存在することから、 そのまま「病原体」の&#8221;pathogen&#8221;と&#8221;path&#8221;を掛けたっぽいですね。[要出典]</p>

<p>「<code>~/vim/bundle/</code>のディレクトリをvimのruntimepathという病原体(pathogen)でinfect(感染)させるぜ!」と言ったところでしょうか。</p>

<p>結構カッコイイ命名っぽい。</p>

<h2>ということで</h2>

<p>明日、3/15(土)21:00から[LingrのVim部屋]((<a href="http://lingr.com/room/vim">http://lingr.com/room/vim</a>)で開催されるのでぜひワイワイ読みましょう！</p>

<p>初見でも初心者でも歓迎ですよ!</p>
]]></content>
  </entry>
  
</feed>
